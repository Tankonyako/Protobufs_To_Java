package in.dragonbra.javasteam.protobufs.steam;


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steam/steammessages_clientsettings.proto

// Protobuf Java Version: 3.25.2
public final class SteammessagesClientsettings {
  private SteammessagesClientsettings() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(SteammessagesClientsettings.settingStore);
    registry.add(SteammessagesClientsettings.settingName);
    registry.add(SteammessagesClientsettings.settingPreLogin);
    registry.add(SteammessagesClientsettings.settingDefaultBool);
    registry.add(SteammessagesClientsettings.settingDefaultInt);
    registry.add(SteammessagesClientsettings.settingDefaultUint);
    registry.add(SteammessagesClientsettings.settingDefaultFloat);
    registry.add(SteammessagesClientsettings.settingDefaultString);
    registry.add(SteammessagesClientsettings.settingReadonly);
    registry.add(SteammessagesClientsettings.settingDescription);
    registry.add(SteammessagesClientsettings.settingProfileMode);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code EClientSettingStore}
   */
  public enum EClientSettingStore
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>k_EClientSettingStore_Invalid = 0;</code>
     */
    k_EClientSettingStore_Invalid(0),
    /**
     * <code>k_EClientSettingStore_ConfigStore_Install = 1;</code>
     */
    k_EClientSettingStore_ConfigStore_Install(1),
    /**
     * <code>k_EClientSettingStore_ConfigStore_UserRoaming = 2;</code>
     */
    k_EClientSettingStore_ConfigStore_UserRoaming(2),
    /**
     * <code>k_EClientSettingStore_ConfigStore_UserLocal = 3;</code>
     */
    k_EClientSettingStore_ConfigStore_UserLocal(3),
    /**
     * <code>k_EClientSettingStore_Registry = 4;</code>
     */
    k_EClientSettingStore_Registry(4),
    /**
     * <code>k_EClientSettingStore_CustomFunc = 5;</code>
     */
    k_EClientSettingStore_CustomFunc(5),
    ;

    /**
     * <code>k_EClientSettingStore_Invalid = 0;</code>
     */
    public static final int k_EClientSettingStore_Invalid_VALUE = 0;
    /**
     * <code>k_EClientSettingStore_ConfigStore_Install = 1;</code>
     */
    public static final int k_EClientSettingStore_ConfigStore_Install_VALUE = 1;
    /**
     * <code>k_EClientSettingStore_ConfigStore_UserRoaming = 2;</code>
     */
    public static final int k_EClientSettingStore_ConfigStore_UserRoaming_VALUE = 2;
    /**
     * <code>k_EClientSettingStore_ConfigStore_UserLocal = 3;</code>
     */
    public static final int k_EClientSettingStore_ConfigStore_UserLocal_VALUE = 3;
    /**
     * <code>k_EClientSettingStore_Registry = 4;</code>
     */
    public static final int k_EClientSettingStore_Registry_VALUE = 4;
    /**
     * <code>k_EClientSettingStore_CustomFunc = 5;</code>
     */
    public static final int k_EClientSettingStore_CustomFunc_VALUE = 5;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EClientSettingStore valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EClientSettingStore forNumber(int value) {
      switch (value) {
        case 0: return k_EClientSettingStore_Invalid;
        case 1: return k_EClientSettingStore_ConfigStore_Install;
        case 2: return k_EClientSettingStore_ConfigStore_UserRoaming;
        case 3: return k_EClientSettingStore_ConfigStore_UserLocal;
        case 4: return k_EClientSettingStore_Registry;
        case 5: return k_EClientSettingStore_CustomFunc;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EClientSettingStore>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EClientSettingStore> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EClientSettingStore>() {
            public EClientSettingStore findValueByNumber(int number) {
              return EClientSettingStore.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return SteammessagesClientsettings.getDescriptor().getEnumTypes().get(0);
    }

    private static final EClientSettingStore[] VALUES = values();

    public static EClientSettingStore valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EClientSettingStore(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EClientSettingStore)
  }

  /**
   * Protobuf enum {@code EOverlayToggleBarLocation}
   */
  public enum EOverlayToggleBarLocation
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>k_EOverlayToggleBarLocation_Bottom = 0;</code>
     */
    k_EOverlayToggleBarLocation_Bottom(0),
    /**
     * <code>k_EOverlayToggleBarLocation_Left = 1;</code>
     */
    k_EOverlayToggleBarLocation_Left(1),
    /**
     * <code>k_EOverlayToggleBarLocation_Right = 2;</code>
     */
    k_EOverlayToggleBarLocation_Right(2),
    /**
     * <code>k_EOverlayToggleBarLocation_Top = 3;</code>
     */
    k_EOverlayToggleBarLocation_Top(3),
    ;

    /**
     * <code>k_EOverlayToggleBarLocation_Bottom = 0;</code>
     */
    public static final int k_EOverlayToggleBarLocation_Bottom_VALUE = 0;
    /**
     * <code>k_EOverlayToggleBarLocation_Left = 1;</code>
     */
    public static final int k_EOverlayToggleBarLocation_Left_VALUE = 1;
    /**
     * <code>k_EOverlayToggleBarLocation_Right = 2;</code>
     */
    public static final int k_EOverlayToggleBarLocation_Right_VALUE = 2;
    /**
     * <code>k_EOverlayToggleBarLocation_Top = 3;</code>
     */
    public static final int k_EOverlayToggleBarLocation_Top_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EOverlayToggleBarLocation valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static EOverlayToggleBarLocation forNumber(int value) {
      switch (value) {
        case 0: return k_EOverlayToggleBarLocation_Bottom;
        case 1: return k_EOverlayToggleBarLocation_Left;
        case 2: return k_EOverlayToggleBarLocation_Right;
        case 3: return k_EOverlayToggleBarLocation_Top;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EOverlayToggleBarLocation>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        EOverlayToggleBarLocation> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EOverlayToggleBarLocation>() {
            public EOverlayToggleBarLocation findValueByNumber(int number) {
              return EOverlayToggleBarLocation.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return SteammessagesClientsettings.getDescriptor().getEnumTypes().get(1);
    }

    private static final EOverlayToggleBarLocation[] VALUES = values();

    public static EOverlayToggleBarLocation valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private EOverlayToggleBarLocation(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:EOverlayToggleBarLocation)
  }

  /**
   * Protobuf enum {@code ESettingProfileMode}
   */
  public enum ESettingProfileMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>k_ESettingProfileMode_None = 0;</code>
     */
    k_ESettingProfileMode_None(0),
    /**
     * <code>k_ESettingProfileMode_PerGame = 1;</code>
     */
    k_ESettingProfileMode_PerGame(1),
    /**
     * <code>k_ESettingProfileMode_PerGamePerDisplay = 2;</code>
     */
    k_ESettingProfileMode_PerGamePerDisplay(2),
    ;

    /**
     * <code>k_ESettingProfileMode_None = 0;</code>
     */
    public static final int k_ESettingProfileMode_None_VALUE = 0;
    /**
     * <code>k_ESettingProfileMode_PerGame = 1;</code>
     */
    public static final int k_ESettingProfileMode_PerGame_VALUE = 1;
    /**
     * <code>k_ESettingProfileMode_PerGamePerDisplay = 2;</code>
     */
    public static final int k_ESettingProfileMode_PerGamePerDisplay_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ESettingProfileMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ESettingProfileMode forNumber(int value) {
      switch (value) {
        case 0: return k_ESettingProfileMode_None;
        case 1: return k_ESettingProfileMode_PerGame;
        case 2: return k_ESettingProfileMode_PerGamePerDisplay;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ESettingProfileMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ESettingProfileMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ESettingProfileMode>() {
            public ESettingProfileMode findValueByNumber(int number) {
              return ESettingProfileMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return SteammessagesClientsettings.getDescriptor().getEnumTypes().get(2);
    }

    private static final ESettingProfileMode[] VALUES = values();

    public static ESettingProfileMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ESettingProfileMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ESettingProfileMode)
  }

  public interface CMsgHotkeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgHotkey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 key_code = 1;</code>
     * @return Whether the keyCode field is set.
     */
    boolean hasKeyCode();
    /**
     * <code>optional uint32 key_code = 1;</code>
     * @return The keyCode.
     */
    int getKeyCode();

    /**
     * <code>optional bool alt_key = 2;</code>
     * @return Whether the altKey field is set.
     */
    boolean hasAltKey();
    /**
     * <code>optional bool alt_key = 2;</code>
     * @return The altKey.
     */
    boolean getAltKey();

    /**
     * <code>optional bool shift_key = 3;</code>
     * @return Whether the shiftKey field is set.
     */
    boolean hasShiftKey();
    /**
     * <code>optional bool shift_key = 3;</code>
     * @return The shiftKey.
     */
    boolean getShiftKey();

    /**
     * <code>optional bool ctrl_key = 4;</code>
     * @return Whether the ctrlKey field is set.
     */
    boolean hasCtrlKey();
    /**
     * <code>optional bool ctrl_key = 4;</code>
     * @return The ctrlKey.
     */
    boolean getCtrlKey();

    /**
     * <code>optional bool meta_key = 5;</code>
     * @return Whether the metaKey field is set.
     */
    boolean hasMetaKey();
    /**
     * <code>optional bool meta_key = 5;</code>
     * @return The metaKey.
     */
    boolean getMetaKey();

    /**
     * <code>optional string display_name = 6;</code>
     * @return Whether the displayName field is set.
     */
    boolean hasDisplayName();
    /**
     * <code>optional string display_name = 6;</code>
     * @return The displayName.
     */
    java.lang.String getDisplayName();
    /**
     * <code>optional string display_name = 6;</code>
     * @return The bytes for displayName.
     */
    com.google.protobuf.ByteString
        getDisplayNameBytes();
  }
  /**
   * Protobuf type {@code CMsgHotkey}
   */
  public static final class CMsgHotkey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgHotkey)
      CMsgHotkeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgHotkey.newBuilder() to construct.
    private CMsgHotkey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgHotkey() {
      displayName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CMsgHotkey();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SteammessagesClientsettings.internal_static_CMsgHotkey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SteammessagesClientsettings.internal_static_CMsgHotkey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SteammessagesClientsettings.CMsgHotkey.class, SteammessagesClientsettings.CMsgHotkey.Builder.class);
    }

    private int bitField0_;
    public static final int KEY_CODE_FIELD_NUMBER = 1;
    private int keyCode_ = 0;
    /**
     * <code>optional uint32 key_code = 1;</code>
     * @return Whether the keyCode field is set.
     */
    @java.lang.Override
    public boolean hasKeyCode() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional uint32 key_code = 1;</code>
     * @return The keyCode.
     */
    @java.lang.Override
    public int getKeyCode() {
      return keyCode_;
    }

    public static final int ALT_KEY_FIELD_NUMBER = 2;
    private boolean altKey_ = false;
    /**
     * <code>optional bool alt_key = 2;</code>
     * @return Whether the altKey field is set.
     */
    @java.lang.Override
    public boolean hasAltKey() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional bool alt_key = 2;</code>
     * @return The altKey.
     */
    @java.lang.Override
    public boolean getAltKey() {
      return altKey_;
    }

    public static final int SHIFT_KEY_FIELD_NUMBER = 3;
    private boolean shiftKey_ = false;
    /**
     * <code>optional bool shift_key = 3;</code>
     * @return Whether the shiftKey field is set.
     */
    @java.lang.Override
    public boolean hasShiftKey() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional bool shift_key = 3;</code>
     * @return The shiftKey.
     */
    @java.lang.Override
    public boolean getShiftKey() {
      return shiftKey_;
    }

    public static final int CTRL_KEY_FIELD_NUMBER = 4;
    private boolean ctrlKey_ = false;
    /**
     * <code>optional bool ctrl_key = 4;</code>
     * @return Whether the ctrlKey field is set.
     */
    @java.lang.Override
    public boolean hasCtrlKey() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional bool ctrl_key = 4;</code>
     * @return The ctrlKey.
     */
    @java.lang.Override
    public boolean getCtrlKey() {
      return ctrlKey_;
    }

    public static final int META_KEY_FIELD_NUMBER = 5;
    private boolean metaKey_ = false;
    /**
     * <code>optional bool meta_key = 5;</code>
     * @return Whether the metaKey field is set.
     */
    @java.lang.Override
    public boolean hasMetaKey() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional bool meta_key = 5;</code>
     * @return The metaKey.
     */
    @java.lang.Override
    public boolean getMetaKey() {
      return metaKey_;
    }

    public static final int DISPLAY_NAME_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object displayName_ = "";
    /**
     * <code>optional string display_name = 6;</code>
     * @return Whether the displayName field is set.
     */
    @java.lang.Override
    public boolean hasDisplayName() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional string display_name = 6;</code>
     * @return The displayName.
     */
    @java.lang.Override
    public java.lang.String getDisplayName() {
      java.lang.Object ref = displayName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          displayName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string display_name = 6;</code>
     * @return The bytes for displayName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      java.lang.Object ref = displayName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        displayName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, keyCode_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, altKey_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, shiftKey_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(4, ctrlKey_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeBool(5, metaKey_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, displayName_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, keyCode_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, altKey_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, shiftKey_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, ctrlKey_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, metaKey_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, displayName_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SteammessagesClientsettings.CMsgHotkey)) {
        return super.equals(obj);
      }
      SteammessagesClientsettings.CMsgHotkey other = (SteammessagesClientsettings.CMsgHotkey) obj;

      if (hasKeyCode() != other.hasKeyCode()) return false;
      if (hasKeyCode()) {
        if (getKeyCode()
            != other.getKeyCode()) return false;
      }
      if (hasAltKey() != other.hasAltKey()) return false;
      if (hasAltKey()) {
        if (getAltKey()
            != other.getAltKey()) return false;
      }
      if (hasShiftKey() != other.hasShiftKey()) return false;
      if (hasShiftKey()) {
        if (getShiftKey()
            != other.getShiftKey()) return false;
      }
      if (hasCtrlKey() != other.hasCtrlKey()) return false;
      if (hasCtrlKey()) {
        if (getCtrlKey()
            != other.getCtrlKey()) return false;
      }
      if (hasMetaKey() != other.hasMetaKey()) return false;
      if (hasMetaKey()) {
        if (getMetaKey()
            != other.getMetaKey()) return false;
      }
      if (hasDisplayName() != other.hasDisplayName()) return false;
      if (hasDisplayName()) {
        if (!getDisplayName()
            .equals(other.getDisplayName())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasKeyCode()) {
        hash = (37 * hash) + KEY_CODE_FIELD_NUMBER;
        hash = (53 * hash) + getKeyCode();
      }
      if (hasAltKey()) {
        hash = (37 * hash) + ALT_KEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAltKey());
      }
      if (hasShiftKey()) {
        hash = (37 * hash) + SHIFT_KEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getShiftKey());
      }
      if (hasCtrlKey()) {
        hash = (37 * hash) + CTRL_KEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getCtrlKey());
      }
      if (hasMetaKey()) {
        hash = (37 * hash) + META_KEY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getMetaKey());
      }
      if (hasDisplayName()) {
        hash = (37 * hash) + DISPLAY_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getDisplayName().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SteammessagesClientsettings.CMsgHotkey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SteammessagesClientsettings.CMsgHotkey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SteammessagesClientsettings.CMsgHotkey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SteammessagesClientsettings.CMsgHotkey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SteammessagesClientsettings.CMsgHotkey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SteammessagesClientsettings.CMsgHotkey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SteammessagesClientsettings.CMsgHotkey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SteammessagesClientsettings.CMsgHotkey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static SteammessagesClientsettings.CMsgHotkey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static SteammessagesClientsettings.CMsgHotkey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SteammessagesClientsettings.CMsgHotkey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SteammessagesClientsettings.CMsgHotkey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SteammessagesClientsettings.CMsgHotkey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgHotkey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgHotkey)
        SteammessagesClientsettings.CMsgHotkeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SteammessagesClientsettings.internal_static_CMsgHotkey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SteammessagesClientsettings.internal_static_CMsgHotkey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SteammessagesClientsettings.CMsgHotkey.class, SteammessagesClientsettings.CMsgHotkey.Builder.class);
      }

      // Construct using SteammessagesClientsettings.CMsgHotkey.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        keyCode_ = 0;
        altKey_ = false;
        shiftKey_ = false;
        ctrlKey_ = false;
        metaKey_ = false;
        displayName_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SteammessagesClientsettings.internal_static_CMsgHotkey_descriptor;
      }

      @java.lang.Override
      public SteammessagesClientsettings.CMsgHotkey getDefaultInstanceForType() {
        return SteammessagesClientsettings.CMsgHotkey.getDefaultInstance();
      }

      @java.lang.Override
      public SteammessagesClientsettings.CMsgHotkey build() {
        SteammessagesClientsettings.CMsgHotkey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public SteammessagesClientsettings.CMsgHotkey buildPartial() {
        SteammessagesClientsettings.CMsgHotkey result = new SteammessagesClientsettings.CMsgHotkey(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(SteammessagesClientsettings.CMsgHotkey result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.keyCode_ = keyCode_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.altKey_ = altKey_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.shiftKey_ = shiftKey_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.ctrlKey_ = ctrlKey_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.metaKey_ = metaKey_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.displayName_ = displayName_;
          to_bitField0_ |= 0x00000020;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SteammessagesClientsettings.CMsgHotkey) {
          return mergeFrom((SteammessagesClientsettings.CMsgHotkey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SteammessagesClientsettings.CMsgHotkey other) {
        if (other == SteammessagesClientsettings.CMsgHotkey.getDefaultInstance()) return this;
        if (other.hasKeyCode()) {
          setKeyCode(other.getKeyCode());
        }
        if (other.hasAltKey()) {
          setAltKey(other.getAltKey());
        }
        if (other.hasShiftKey()) {
          setShiftKey(other.getShiftKey());
        }
        if (other.hasCtrlKey()) {
          setCtrlKey(other.getCtrlKey());
        }
        if (other.hasMetaKey()) {
          setMetaKey(other.getMetaKey());
        }
        if (other.hasDisplayName()) {
          displayName_ = other.displayName_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                keyCode_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                altKey_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                shiftKey_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                ctrlKey_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                metaKey_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 50: {
                displayName_ = input.readBytes();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int keyCode_ ;
      /**
       * <code>optional uint32 key_code = 1;</code>
       * @return Whether the keyCode field is set.
       */
      @java.lang.Override
      public boolean hasKeyCode() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional uint32 key_code = 1;</code>
       * @return The keyCode.
       */
      @java.lang.Override
      public int getKeyCode() {
        return keyCode_;
      }
      /**
       * <code>optional uint32 key_code = 1;</code>
       * @param value The keyCode to set.
       * @return This builder for chaining.
       */
      public Builder setKeyCode(int value) {

        keyCode_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 key_code = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeyCode() {
        bitField0_ = (bitField0_ & ~0x00000001);
        keyCode_ = 0;
        onChanged();
        return this;
      }

      private boolean altKey_ ;
      /**
       * <code>optional bool alt_key = 2;</code>
       * @return Whether the altKey field is set.
       */
      @java.lang.Override
      public boolean hasAltKey() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional bool alt_key = 2;</code>
       * @return The altKey.
       */
      @java.lang.Override
      public boolean getAltKey() {
        return altKey_;
      }
      /**
       * <code>optional bool alt_key = 2;</code>
       * @param value The altKey to set.
       * @return This builder for chaining.
       */
      public Builder setAltKey(boolean value) {

        altKey_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool alt_key = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAltKey() {
        bitField0_ = (bitField0_ & ~0x00000002);
        altKey_ = false;
        onChanged();
        return this;
      }

      private boolean shiftKey_ ;
      /**
       * <code>optional bool shift_key = 3;</code>
       * @return Whether the shiftKey field is set.
       */
      @java.lang.Override
      public boolean hasShiftKey() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional bool shift_key = 3;</code>
       * @return The shiftKey.
       */
      @java.lang.Override
      public boolean getShiftKey() {
        return shiftKey_;
      }
      /**
       * <code>optional bool shift_key = 3;</code>
       * @param value The shiftKey to set.
       * @return This builder for chaining.
       */
      public Builder setShiftKey(boolean value) {

        shiftKey_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool shift_key = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearShiftKey() {
        bitField0_ = (bitField0_ & ~0x00000004);
        shiftKey_ = false;
        onChanged();
        return this;
      }

      private boolean ctrlKey_ ;
      /**
       * <code>optional bool ctrl_key = 4;</code>
       * @return Whether the ctrlKey field is set.
       */
      @java.lang.Override
      public boolean hasCtrlKey() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional bool ctrl_key = 4;</code>
       * @return The ctrlKey.
       */
      @java.lang.Override
      public boolean getCtrlKey() {
        return ctrlKey_;
      }
      /**
       * <code>optional bool ctrl_key = 4;</code>
       * @param value The ctrlKey to set.
       * @return This builder for chaining.
       */
      public Builder setCtrlKey(boolean value) {

        ctrlKey_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ctrl_key = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearCtrlKey() {
        bitField0_ = (bitField0_ & ~0x00000008);
        ctrlKey_ = false;
        onChanged();
        return this;
      }

      private boolean metaKey_ ;
      /**
       * <code>optional bool meta_key = 5;</code>
       * @return Whether the metaKey field is set.
       */
      @java.lang.Override
      public boolean hasMetaKey() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional bool meta_key = 5;</code>
       * @return The metaKey.
       */
      @java.lang.Override
      public boolean getMetaKey() {
        return metaKey_;
      }
      /**
       * <code>optional bool meta_key = 5;</code>
       * @param value The metaKey to set.
       * @return This builder for chaining.
       */
      public Builder setMetaKey(boolean value) {

        metaKey_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool meta_key = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearMetaKey() {
        bitField0_ = (bitField0_ & ~0x00000010);
        metaKey_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object displayName_ = "";
      /**
       * <code>optional string display_name = 6;</code>
       * @return Whether the displayName field is set.
       */
      public boolean hasDisplayName() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional string display_name = 6;</code>
       * @return The displayName.
       */
      public java.lang.String getDisplayName() {
        java.lang.Object ref = displayName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            displayName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string display_name = 6;</code>
       * @return The bytes for displayName.
       */
      public com.google.protobuf.ByteString
          getDisplayNameBytes() {
        java.lang.Object ref = displayName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          displayName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string display_name = 6;</code>
       * @param value The displayName to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        displayName_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional string display_name = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisplayName() {
        displayName_ = getDefaultInstance().getDisplayName();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <code>optional string display_name = 6;</code>
       * @param value The bytes for displayName to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        displayName_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgHotkey)
    }

    // @@protoc_insertion_point(class_scope:CMsgHotkey)
    private static final SteammessagesClientsettings.CMsgHotkey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SteammessagesClientsettings.CMsgHotkey();
    }

    public static SteammessagesClientsettings.CMsgHotkey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgHotkey>
        PARSER = new com.google.protobuf.AbstractParser<CMsgHotkey>() {
      @java.lang.Override
      public CMsgHotkey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CMsgHotkey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgHotkey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgClientSettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CMsgClientSettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;NoSavePersonalInfo"];</code>
     * @return Whether the noSavePersonalInfo field is set.
     */
    boolean hasNoSavePersonalInfo();
    /**
     * <code>optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;NoSavePersonalInfo"];</code>
     * @return The noSavePersonalInfo.
     */
    boolean getNoSavePersonalInfo();

    /**
     * <code>optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OOBETestModeEnabled"];</code>
     * @return Whether the oobeTestModeEnabled field is set.
     */
    boolean hasOobeTestModeEnabled();
    /**
     * <code>optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OOBETestModeEnabled"];</code>
     * @return The oobeTestModeEnabled.
     */
    boolean getOobeTestModeEnabled();

    /**
     * <code>optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
     * @return Whether the inClientBeta field is set.
     */
    boolean hasInClientBeta();
    /**
     * <code>optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
     * @return The inClientBeta.
     */
    boolean getInClientBeta();

    /**
     * <code>optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
     * @return Whether the isSteamSideloaded field is set.
     */
    boolean hasIsSteamSideloaded();
    /**
     * <code>optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
     * @return The isSteamSideloaded.
     */
    boolean getIsSteamSideloaded();

    /**
     * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
     * @return Whether the preferredMonitor field is set.
     */
    boolean hasPreferredMonitor();
    /**
     * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
     * @return The preferredMonitor.
     */
    java.lang.String getPreferredMonitor();
    /**
     * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
     * @return The bytes for preferredMonitor.
     */
    com.google.protobuf.ByteString
        getPreferredMonitorBytes();

    /**
     * <code>optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;CEFGPUBlocklistDisabled"];</code>
     * @return Whether the steamCefGpuBlocklistDisabled field is set.
     */
    boolean hasSteamCefGpuBlocklistDisabled();
    /**
     * <code>optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;CEFGPUBlocklistDisabled"];</code>
     * @return The steamCefGpuBlocklistDisabled.
     */
    boolean getSteamCefGpuBlocklistDisabled();

    /**
     * <code>optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];</code>
     * @return Whether the bigpictureWindowed field is set.
     */
    boolean hasBigpictureWindowed();
    /**
     * <code>optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];</code>
     * @return The bigpictureWindowed.
     */
    boolean getBigpictureWindowed();

    /**
     * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
     * @return Whether the displayName field is set.
     */
    boolean hasDisplayName();
    /**
     * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
     * @return The displayName.
     */
    java.lang.String getDisplayName();
    /**
     * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
     * @return The bytes for displayName.
     */
    com.google.protobuf.ByteString
        getDisplayNameBytes();

    /**
     * <code>optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];</code>
     * @return Whether the isExternalDisplay field is set.
     */
    boolean hasIsExternalDisplay();
    /**
     * <code>optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];</code>
     * @return The isExternalDisplay.
     */
    boolean getIsExternalDisplay();

    /**
     * <code>optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];</code>
     * @return Whether the steamOsUnderscanLevel field is set.
     */
    boolean hasSteamOsUnderscanLevel();
    /**
     * <code>optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];</code>
     * @return The steamOsUnderscanLevel.
     */
    float getSteamOsUnderscanLevel();

    /**
     * <code>optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];</code>
     * @return Whether the steamOsUnderscanEnabled field is set.
     */
    boolean hasSteamOsUnderscanEnabled();
    /**
     * <code>optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];</code>
     * @return The steamOsUnderscanEnabled.
     */
    boolean getSteamOsUnderscanEnabled();

    /**
     * <code>optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];</code>
     * @return Whether the minScaleFactor field is set.
     */
    boolean hasMinScaleFactor();
    /**
     * <code>optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];</code>
     * @return The minScaleFactor.
     */
    float getMinScaleFactor();

    /**
     * <code>optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];</code>
     * @return Whether the maxScaleFactor field is set.
     */
    boolean hasMaxScaleFactor();
    /**
     * <code>optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];</code>
     * @return The maxScaleFactor.
     */
    float getMaxScaleFactor();

    /**
     * <code>optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];</code>
     * @return Whether the autoScaleFactor field is set.
     */
    boolean hasAutoScaleFactor();
    /**
     * <code>optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];</code>
     * @return The autoScaleFactor.
     */
    float getAutoScaleFactor();

    /**
     * <code>optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmallMode"];</code>
     * @return Whether the smallMode field is set.
     */
    boolean hasSmallMode();
    /**
     * <code>optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmallMode"];</code>
     * @return The smallMode.
     */
    boolean getSmallMode();

    /**
     * <code>optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;SteamVRHMDVGUIWarning"];</code>
     * @return Whether the skipSteamvrInstallDialog field is set.
     */
    boolean hasSkipSteamvrInstallDialog();
    /**
     * <code>optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;SteamVRHMDVGUIWarning"];</code>
     * @return The skipSteamvrInstallDialog.
     */
    boolean getSkipSteamvrInstallDialog();

    /**
     * <code>optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage&#92;&#92;Auth&#92;&#92;AlwaysShowUserChooser"];</code>
     * @return Whether the alwaysShowUserChooser field is set.
     */
    boolean hasAlwaysShowUserChooser();
    /**
     * <code>optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage&#92;&#92;Auth&#92;&#92;AlwaysShowUserChooser"];</code>
     * @return The alwaysShowUserChooser.
     */
    boolean getAlwaysShowUserChooser();

    /**
     * <code>optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the showFamilySharingNotifications field is set.
     */
    boolean hasShowFamilySharingNotifications();
    /**
     * <code>optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The showFamilySharingNotifications.
     */
    boolean getShowFamilySharingNotifications();

    /**
     * <code>optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSCorner"];</code>
     * @return Whether the overlayFpsCounterCorner field is set.
     */
    boolean hasOverlayFpsCounterCorner();
    /**
     * <code>optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSCorner"];</code>
     * @return The overlayFpsCounterCorner.
     */
    int getOverlayFpsCounterCorner();

    /**
     * <code>optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSContrast"];</code>
     * @return Whether the overlayFpsCounterHighContrast field is set.
     */
    boolean hasOverlayFpsCounterHighContrast();
    /**
     * <code>optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSContrast"];</code>
     * @return The overlayFpsCounterHighContrast.
     */
    boolean getOverlayFpsCounterHighContrast();

    /**
     * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
     * @return Whether the overlayKey field is set.
     */
    boolean hasOverlayKey();
    /**
     * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
     * @return The overlayKey.
     */
    SteammessagesClientsettings.CMsgHotkey getOverlayKey();
    /**
     * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
     */
    SteammessagesClientsettings.CMsgHotkeyOrBuilder getOverlayKeyOrBuilder();

    /**
     * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
     * @return Whether the screenshotKey field is set.
     */
    boolean hasScreenshotKey();
    /**
     * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
     * @return The screenshotKey.
     */
    SteammessagesClientsettings.CMsgHotkey getScreenshotKey();
    /**
     * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
     */
    SteammessagesClientsettings.CMsgHotkeyOrBuilder getScreenshotKeyOrBuilder();

    /**
     * <code>optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableGameOverlay"];</code>
     * @return Whether the enableOverlay field is set.
     */
    boolean hasEnableOverlay();
    /**
     * <code>optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableGameOverlay"];</code>
     * @return The enableOverlay.
     */
    boolean getEnableOverlay();

    /**
     * <code>optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotNotification", (.setting_default_bool) = true];</code>
     * @return Whether the enableScreenshotNotification field is set.
     */
    boolean hasEnableScreenshotNotification();
    /**
     * <code>optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotNotification", (.setting_default_bool) = true];</code>
     * @return The enableScreenshotNotification.
     */
    boolean getEnableScreenshotNotification();

    /**
     * <code>optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];</code>
     * @return Whether the enableScreenshotSound field is set.
     */
    boolean hasEnableScreenshotSound();
    /**
     * <code>optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];</code>
     * @return The enableScreenshotSound.
     */
    boolean getEnableScreenshotSound();

    /**
     * <code>optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotSaveUncompressed"];</code>
     * @return Whether the saveUncompressedScreenshots field is set.
     */
    boolean hasSaveUncompressedScreenshots();
    /**
     * <code>optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotSaveUncompressed"];</code>
     * @return The saveUncompressedScreenshots.
     */
    boolean getSaveUncompressedScreenshots();

    /**
     * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the screenshotsPath field is set.
     */
    boolean hasScreenshotsPath();
    /**
     * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The screenshotsPath.
     */
    java.lang.String getScreenshotsPath();
    /**
     * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for screenshotsPath.
     */
    com.google.protobuf.ByteString
        getScreenshotsPathBytes();

    /**
     * <code>optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];</code>
     * @return Whether the defaultPingRate field is set.
     */
    boolean hasDefaultPingRate();
    /**
     * <code>optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];</code>
     * @return The defaultPingRate.
     */
    int getDefaultPingRate();

    /**
     * <code>optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the serverPingRate field is set.
     */
    boolean hasServerPingRate();
    /**
     * <code>optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The serverPingRate.
     */
    int getServerPingRate();

    /**
     * <code>optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the steamNetworkingShareIp field is set.
     */
    boolean hasSteamNetworkingShareIp();
    /**
     * <code>optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The steamNetworkingShareIp.
     */
    int getSteamNetworkingShareIp();

    /**
     * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the webBrowserHome field is set.
     */
    boolean hasWebBrowserHome();
    /**
     * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The webBrowserHome.
     */
    java.lang.String getWebBrowserHome();
    /**
     * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for webBrowserHome.
     */
    com.google.protobuf.ByteString
        getWebBrowserHomeBytes();

    /**
     * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voiceMicDeviceName field is set.
     */
    boolean hasVoiceMicDeviceName();
    /**
     * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voiceMicDeviceName.
     */
    java.lang.String getVoiceMicDeviceName();
    /**
     * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for voiceMicDeviceName.
     */
    com.google.protobuf.ByteString
        getVoiceMicDeviceNameBytes();

    /**
     * <code>optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voiceMicInputGain field is set.
     */
    boolean hasVoiceMicInputGain();
    /**
     * <code>optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voiceMicInputGain.
     */
    float getVoiceMicInputGain();

    /**
     * <code>optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voiceSpeakerOutputGain field is set.
     */
    boolean hasVoiceSpeakerOutputGain();
    /**
     * <code>optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voiceSpeakerOutputGain.
     */
    float getVoiceSpeakerOutputGain();

    /**
     * <code>optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voicePushToTalkSetting field is set.
     */
    boolean hasVoicePushToTalkSetting();
    /**
     * <code>optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voicePushToTalkSetting.
     */
    int getVoicePushToTalkSetting();

    /**
     * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voicePushToTalkKey field is set.
     */
    boolean hasVoicePushToTalkKey();
    /**
     * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voicePushToTalkKey.
     */
    SteammessagesClientsettings.CMsgHotkey getVoicePushToTalkKey();
    /**
     * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     */
    SteammessagesClientsettings.CMsgHotkeyOrBuilder getVoicePushToTalkKeyOrBuilder();

    /**
     * <code>optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];</code>
     * @return Whether the overlayToolbarListView field is set.
     */
    boolean hasOverlayToolbarListView();
    /**
     * <code>optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];</code>
     * @return The overlayToolbarListView.
     */
    boolean getOverlayToolbarListView();

    /**
     * <code>optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableSCTenFootOverlayCheckNew"];</code>
     * @return Whether the alwaysUseGamepaduiOverlay field is set.
     */
    boolean hasAlwaysUseGamepaduiOverlay();
    /**
     * <code>optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableSCTenFootOverlayCheckNew"];</code>
     * @return The alwaysUseGamepaduiOverlay.
     */
    boolean getAlwaysUseGamepaduiOverlay();

    /**
     * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
     * @return Whether the overlayTabs field is set.
     */
    boolean hasOverlayTabs();
    /**
     * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
     * @return The overlayTabs.
     */
    java.lang.String getOverlayTabs();
    /**
     * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
     * @return The bytes for overlayTabs.
     */
    com.google.protobuf.ByteString
        getOverlayTabsBytes();

    /**
     * <code>optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OverlayScaleInterface", (.setting_default_bool) = true];</code>
     * @return Whether the overlayScaleInterface field is set.
     */
    boolean hasOverlayScaleInterface();
    /**
     * <code>optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OverlayScaleInterface", (.setting_default_bool) = true];</code>
     * @return The overlayScaleInterface.
     */
    boolean getOverlayScaleInterface();

    /**
     * <code>optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];</code>
     * @return Whether the overlayRestoreBrowserTabs field is set.
     */
    boolean hasOverlayRestoreBrowserTabs();
    /**
     * <code>optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];</code>
     * @return The overlayRestoreBrowserTabs.
     */
    boolean getOverlayRestoreBrowserTabs();

    /**
     * <code>optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmoothScrollWebViews", (.setting_default_bool) = true];</code>
     * @return Whether the smoothScrollWebviews field is set.
     */
    boolean hasSmoothScrollWebviews();
    /**
     * <code>optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmoothScrollWebViews", (.setting_default_bool) = true];</code>
     * @return The smoothScrollWebviews.
     */
    boolean getSmoothScrollWebviews();

    /**
     * <code>optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableGpuAcceleratedWebviews field is set.
     */
    boolean hasEnableGpuAcceleratedWebviews();
    /**
     * <code>optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableGpuAcceleratedWebviews.
     */
    boolean getEnableGpuAcceleratedWebviews();

    /**
     * <code>optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableHardwareVideoDecoding field is set.
     */
    boolean hasEnableHardwareVideoDecoding();
    /**
     * <code>optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableHardwareVideoDecoding.
     */
    boolean getEnableHardwareVideoDecoding();

    /**
     * <code>optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the runAtStartup field is set.
     */
    boolean hasRunAtStartup();
    /**
     * <code>optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The runAtStartup.
     */
    boolean getRunAtStartup();

    /**
     * <code>optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableDpiScaling field is set.
     */
    boolean hasEnableDpiScaling();
    /**
     * <code>optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableDpiScaling.
     */
    boolean getEnableDpiScaling();

    /**
     * <code>optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news&#92;&#92;NotifyAvailableGames", (.setting_default_bool) = true];</code>
     * @return Whether the enableMarketingMessages field is set.
     */
    boolean hasEnableMarketingMessages();
    /**
     * <code>optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news&#92;&#92;NotifyAvailableGames", (.setting_default_bool) = true];</code>
     * @return The enableMarketingMessages.
     */
    boolean getEnableMarketingMessages();

    /**
     * <code>optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the startInBigPictureMode field is set.
     */
    boolean hasStartInBigPictureMode();
    /**
     * <code>optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The startInBigPictureMode.
     */
    boolean getStartInBigPictureMode();

    /**
     * <code>optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;JumplistSettings", (.setting_default_uint) = 77680];</code>
     * @return Whether the jumplistFlags field is set.
     */
    boolean hasJumplistFlags();
    /**
     * <code>optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;JumplistSettings", (.setting_default_uint) = 77680];</code>
     * @return The jumplistFlags.
     */
    int getJumplistFlags();

    /**
     * <code>optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableUISounds", (.setting_default_bool) = true];</code>
     * @return Whether the enableUiSounds field is set.
     */
    boolean hasEnableUiSounds();
    /**
     * <code>optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableUISounds", (.setting_default_bool) = true];</code>
     * @return The enableUiSounds.
     */
    boolean getEnableUiSounds();

    /**
     * <code>optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];</code>
     * @return Whether the disableAllToasts field is set.
     */
    boolean hasDisableAllToasts();
    /**
     * <code>optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];</code>
     * @return The disableAllToasts.
     */
    boolean getDisableAllToasts();

    /**
     * <code>optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];</code>
     * @return Whether the disableToastsInGame field is set.
     */
    boolean hasDisableToastsInGame();
    /**
     * <code>optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];</code>
     * @return The disableToastsInGame.
     */
    boolean getDisableToastsInGame();

    /**
     * <code>optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];</code>
     * @return Whether the playSoundOnToast field is set.
     */
    boolean hasPlaySoundOnToast();
    /**
     * <code>optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];</code>
     * @return The playSoundOnToast.
     */
    boolean getPlaySoundOnToast();

    /**
     * <code>optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];</code>
     * @return Whether the libraryDisplaySize field is set.
     */
    boolean hasLibraryDisplaySize();
    /**
     * <code>optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];</code>
     * @return The libraryDisplaySize.
     */
    int getLibraryDisplaySize();

    /**
     * <code>optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];</code>
     * @return Whether the libraryWhatsNewShowOnlyProductUpdates field is set.
     */
    boolean hasLibraryWhatsNewShowOnlyProductUpdates();
    /**
     * <code>optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];</code>
     * @return The libraryWhatsNewShowOnlyProductUpdates.
     */
    boolean getLibraryWhatsNewShowOnlyProductUpdates();

    /**
     * <code>optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];</code>
     * @return Whether the showStoreContentOnHome field is set.
     */
    boolean hasShowStoreContentOnHome();
    /**
     * <code>optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];</code>
     * @return The showStoreContentOnHome.
     */
    boolean getShowStoreContentOnHome();

    /**
     * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the startPage field is set.
     */
    boolean hasStartPage();
    /**
     * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The startPage.
     */
    java.lang.String getStartPage();
    /**
     * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for startPage.
     */
    com.google.protobuf.ByteString
        getStartPageBytes();

    /**
     * <code>optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];</code>
     * @return Whether the libraryLowBandwidthMode field is set.
     */
    boolean hasLibraryLowBandwidthMode();
    /**
     * <code>optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];</code>
     * @return The libraryLowBandwidthMode.
     */
    boolean getLibraryLowBandwidthMode();

    /**
     * <code>optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];</code>
     * @return Whether the libraryLowPerfMode field is set.
     */
    boolean hasLibraryLowPerfMode();
    /**
     * <code>optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];</code>
     * @return The libraryLowPerfMode.
     */
    boolean getLibraryLowPerfMode();

    /**
     * <code>optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];</code>
     * @return Whether the libraryDisableCommunityContent field is set.
     */
    boolean hasLibraryDisableCommunityContent();
    /**
     * <code>optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];</code>
     * @return The libraryDisableCommunityContent.
     */
    boolean getLibraryDisableCommunityContent();

    /**
     * <code>optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];</code>
     * @return Whether the libraryDisplayIconInGameList field is set.
     */
    boolean hasLibraryDisplayIconInGameList();
    /**
     * <code>optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];</code>
     * @return The libraryDisplayIconInGameList.
     */
    boolean getLibraryDisplayIconInGameList();

    /**
     * <code>optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];</code>
     * @return Whether the readyToPlayIncludesStreaming field is set.
     */
    boolean hasReadyToPlayIncludesStreaming();
    /**
     * <code>optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];</code>
     * @return The readyToPlayIncludesStreaming.
     */
    boolean getReadyToPlayIncludesStreaming();

    /**
     * <code>optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];</code>
     * @return Whether the showSteamDeckInfo field is set.
     */
    boolean hasShowSteamDeckInfo();
    /**
     * <code>optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];</code>
     * @return The showSteamDeckInfo.
     */
    boolean getShowSteamDeckInfo();

    /**
     * <code>optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableShaderPrecache field is set.
     */
    boolean hasEnableShaderPrecache();
    /**
     * <code>optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableShaderPrecache.
     */
    boolean getEnableShaderPrecache();

    /**
     * <code>optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableShaderBackgroundProcessing field is set.
     */
    boolean hasEnableShaderBackgroundProcessing();
    /**
     * <code>optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableShaderBackgroundProcessing.
     */
    boolean getEnableShaderBackgroundProcessing();

    /**
     * <code>optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
     * @return Whether the shaderPrecachedSize field is set.
     */
    boolean hasShaderPrecachedSize();
    /**
     * <code>optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
     * @return The shaderPrecachedSize.
     */
    long getShaderPrecachedSize();

    /**
     * <code>optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
     * @return Whether the needsSteamServiceRepair field is set.
     */
    boolean hasNeedsSteamServiceRepair();
    /**
     * <code>optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
     * @return The needsSteamServiceRepair.
     */
    boolean getNeedsSteamServiceRepair();

    /**
     * <code>optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadPeerContent field is set.
     */
    boolean hasDownloadPeerContent();
    /**
     * <code>optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadPeerContent.
     */
    int getDownloadPeerContent();

    /**
     * <code>optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadRateBitsPerS field is set.
     */
    boolean hasDownloadRateBitsPerS();
    /**
     * <code>optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadRateBitsPerS.
     */
    boolean getDownloadRateBitsPerS();

    /**
     * <code>optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the restrictAutoUpdates field is set.
     */
    boolean hasRestrictAutoUpdates();
    /**
     * <code>optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The restrictAutoUpdates.
     */
    boolean getRestrictAutoUpdates();

    /**
     * <code>optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the restrictAutoUpdatesStart field is set.
     */
    boolean hasRestrictAutoUpdatesStart();
    /**
     * <code>optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The restrictAutoUpdatesStart.
     */
    int getRestrictAutoUpdatesStart();

    /**
     * <code>optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the restrictAutoUpdatesEnd field is set.
     */
    boolean hasRestrictAutoUpdatesEnd();
    /**
     * <code>optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The restrictAutoUpdatesEnd.
     */
    int getRestrictAutoUpdatesEnd();

    /**
     * <code>optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadRegion field is set.
     */
    boolean hasDownloadRegion();
    /**
     * <code>optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadRegion.
     */
    int getDownloadRegion();

    /**
     * <code>optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadWhileAppRunning field is set.
     */
    boolean hasDownloadWhileAppRunning();
    /**
     * <code>optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadWhileAppRunning.
     */
    boolean getDownloadWhileAppRunning();

    /**
     * <code>optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadThrottleWhileStreaming field is set.
     */
    boolean hasDownloadThrottleWhileStreaming();
    /**
     * <code>optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadThrottleWhileStreaming.
     */
    boolean getDownloadThrottleWhileStreaming();

    /**
     * <code>optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadThrottleRate field is set.
     */
    boolean hasDownloadThrottleRate();
    /**
     * <code>optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadThrottleRate.
     */
    int getDownloadThrottleRate();

    /**
     * <code>optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the cloudEnabled field is set.
     */
    boolean hasCloudEnabled();
    /**
     * <code>optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The cloudEnabled.
     */
    boolean getCloudEnabled();

    /**
     * <code>optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ShowScreenshotManager"];</code>
     * @return Whether the showScreenshotManager field is set.
     */
    boolean hasShowScreenshotManager();
    /**
     * <code>optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ShowScreenshotManager"];</code>
     * @return The showScreenshotManager.
     */
    boolean getShowScreenshotManager();

    /**
     * <code>optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the musicVolume field is set.
     */
    boolean hasMusicVolume();
    /**
     * <code>optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The musicVolume.
     */
    int getMusicVolume();

    /**
     * <code>optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnAppStartedProcess"];</code>
     * @return Whether the musicPauseOnAppStart field is set.
     */
    boolean hasMusicPauseOnAppStart();
    /**
     * <code>optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnAppStartedProcess"];</code>
     * @return The musicPauseOnAppStart.
     */
    boolean getMusicPauseOnAppStart();

    /**
     * <code>optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnVoiceChat"];</code>
     * @return Whether the musicPauseOnVoiceChat field is set.
     */
    boolean hasMusicPauseOnVoiceChat();
    /**
     * <code>optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnVoiceChat"];</code>
     * @return The musicPauseOnVoiceChat.
     */
    boolean getMusicPauseOnVoiceChat();

    /**
     * <code>optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;DownloadHighQualityAudioSoundtracks"];</code>
     * @return Whether the musicDownloadHighQuality field is set.
     */
    boolean hasMusicDownloadHighQuality();
    /**
     * <code>optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;DownloadHighQualityAudioSoundtracks"];</code>
     * @return The musicDownloadHighQuality.
     */
    boolean getMusicDownloadHighQuality();

    /**
     * <code>optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PlaylistNowPlayingNotification"];</code>
     * @return Whether the musicPlaylistNotification field is set.
     */
    boolean hasMusicPlaylistNotification();
    /**
     * <code>optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PlaylistNowPlayingNotification"];</code>
     * @return The musicPlaylistNotification.
     */
    boolean getMusicPlaylistNotification();

    /**
     * <code>optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;Permissions", (.setting_default_int) = 1];</code>
     * @return Whether the broadcastPermissions field is set.
     */
    boolean hasBroadcastPermissions();
    /**
     * <code>optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;Permissions", (.setting_default_int) = 1];</code>
     * @return The broadcastPermissions.
     */
    Enums.EBroadcastPermission getBroadcastPermissions();

    /**
     * <code>optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputWidth"];</code>
     * @return Whether the broadcastOutputWidth field is set.
     */
    boolean hasBroadcastOutputWidth();
    /**
     * <code>optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputWidth"];</code>
     * @return The broadcastOutputWidth.
     */
    int getBroadcastOutputWidth();

    /**
     * <code>optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputHeight"];</code>
     * @return Whether the broadcastOutputHeight field is set.
     */
    boolean hasBroadcastOutputHeight();
    /**
     * <code>optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputHeight"];</code>
     * @return The broadcastOutputHeight.
     */
    int getBroadcastOutputHeight();

    /**
     * <code>optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;MaxKbps"];</code>
     * @return Whether the broadcastBitrate field is set.
     */
    boolean hasBroadcastBitrate();
    /**
     * <code>optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;MaxKbps"];</code>
     * @return The broadcastBitrate.
     */
    int getBroadcastBitrate();

    /**
     * <code>optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;EncoderSetting"];</code>
     * @return Whether the broadcastEncodingOption field is set.
     */
    boolean hasBroadcastEncodingOption();
    /**
     * <code>optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;EncoderSetting"];</code>
     * @return The broadcastEncodingOption.
     */
    Enums.EBroadcastEncoderSetting getBroadcastEncodingOption();

    /**
     * <code>optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;IncludeDesktop"];</code>
     * @return Whether the broadcastRecordAllVideo field is set.
     */
    boolean hasBroadcastRecordAllVideo();
    /**
     * <code>optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;IncludeDesktop"];</code>
     * @return The broadcastRecordAllVideo.
     */
    boolean getBroadcastRecordAllVideo();

    /**
     * <code>optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordSystemAudio"];</code>
     * @return Whether the broadcastRecordAllAudio field is set.
     */
    boolean hasBroadcastRecordAllAudio();
    /**
     * <code>optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordSystemAudio"];</code>
     * @return The broadcastRecordAllAudio.
     */
    boolean getBroadcastRecordAllAudio();

    /**
     * <code>optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordMic"];</code>
     * @return Whether the broadcastRecordMicrophone field is set.
     */
    boolean hasBroadcastRecordMicrophone();
    /**
     * <code>optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordMic"];</code>
     * @return The broadcastRecordMicrophone.
     */
    boolean getBroadcastRecordMicrophone();

    /**
     * <code>optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowDebugInfo"];</code>
     * @return Whether the broadcastShowUploadStats field is set.
     */
    boolean hasBroadcastShowUploadStats();
    /**
     * <code>optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowDebugInfo"];</code>
     * @return The broadcastShowUploadStats.
     */
    boolean getBroadcastShowUploadStats();

    /**
     * <code>optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowReminder", (.setting_default_bool) = true];</code>
     * @return Whether the broadcastShowLiveReminder field is set.
     */
    boolean hasBroadcastShowLiveReminder();
    /**
     * <code>optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowReminder", (.setting_default_bool) = true];</code>
     * @return The broadcastShowLiveReminder.
     */
    boolean getBroadcastShowLiveReminder();

    /**
     * <code>optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowChat", (.setting_default_int) = 1];</code>
     * @return Whether the broadcastChatCorner field is set.
     */
    boolean hasBroadcastChatCorner();
    /**
     * <code>optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowChat", (.setting_default_int) = 1];</code>
     * @return The broadcastChatCorner.
     */
    int getBroadcastChatCorner();

    /**
     * <code>optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];</code>
     * @return Whether the steamInputConfiguratorErrorMsgEnable field is set.
     */
    boolean hasSteamInputConfiguratorErrorMsgEnable();
    /**
     * <code>optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];</code>
     * @return The steamInputConfiguratorErrorMsgEnable.
     */
    boolean getSteamInputConfiguratorErrorMsgEnable();

    /**
     * <code>optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];</code>
     * @return Whether the controllerGuideButtonFocusSteam field is set.
     */
    boolean hasControllerGuideButtonFocusSteam();
    /**
     * <code>optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];</code>
     * @return The controllerGuideButtonFocusSteam.
     */
    boolean getControllerGuideButtonFocusSteam();

    /**
     * <code>optional int32 controller_ps_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];</code>
     * @return Whether the controllerPsSupport field is set.
     */
    boolean hasControllerPsSupport();
    /**
     * <code>optional int32 controller_ps_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];</code>
     * @return The controllerPsSupport.
     */
    int getControllerPsSupport();

    /**
     * <code>optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];</code>
     * @return Whether the controllerXboxSupport field is set.
     */
    boolean hasControllerXboxSupport();
    /**
     * <code>optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];</code>
     * @return The controllerXboxSupport.
     */
    boolean getControllerXboxSupport();

    /**
     * <code>optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];</code>
     * @return Whether the controllerXboxDriver field is set.
     */
    boolean hasControllerXboxDriver();
    /**
     * <code>optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];</code>
     * @return The controllerXboxDriver.
     */
    boolean getControllerXboxDriver();

    /**
     * <code>optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];</code>
     * @return Whether the controllerSwitchSupport field is set.
     */
    boolean hasControllerSwitchSupport();
    /**
     * <code>optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];</code>
     * @return The controllerSwitchSupport.
     */
    boolean getControllerSwitchSupport();

    /**
     * <code>optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];</code>
     * @return Whether the controllerGenericSupport field is set.
     */
    boolean hasControllerGenericSupport();
    /**
     * <code>optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];</code>
     * @return The controllerGenericSupport.
     */
    boolean getControllerGenericSupport();

    /**
     * <code>optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];</code>
     * @return Whether the controllerPowerOffTimeout field is set.
     */
    boolean hasControllerPowerOffTimeout();
    /**
     * <code>optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];</code>
     * @return The controllerPowerOffTimeout.
     */
    int getControllerPowerOffTimeout();

    /**
     * <code>optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];</code>
     * @return Whether the turnOffControllerOnExit field is set.
     */
    boolean hasTurnOffControllerOnExit();
    /**
     * <code>optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];</code>
     * @return The turnOffControllerOnExit.
     */
    boolean getTurnOffControllerOnExit();

    /**
     * <code>optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the controllerCombineNintendoJoycons field is set.
     */
    boolean hasControllerCombineNintendoJoycons();
    /**
     * <code>optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The controllerCombineNintendoJoycons.
     */
    boolean getControllerCombineNintendoJoycons();

    /**
     * <code>optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];</code>
     * @return Whether the startupMovieId field is set.
     */
    boolean hasStartupMovieId();
    /**
     * <code>optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];</code>
     * @return The startupMovieId.
     */
    long getStartupMovieId();

    /**
     * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
     * @return Whether the startupMovieLocalPath field is set.
     */
    boolean hasStartupMovieLocalPath();
    /**
     * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
     * @return The startupMovieLocalPath.
     */
    java.lang.String getStartupMovieLocalPath();
    /**
     * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
     * @return The bytes for startupMovieLocalPath.
     */
    com.google.protobuf.ByteString
        getStartupMovieLocalPathBytes();

    /**
     * <code>optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];</code>
     * @return Whether the startupMovieShuffle field is set.
     */
    boolean hasStartupMovieShuffle();
    /**
     * <code>optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];</code>
     * @return The startupMovieShuffle.
     */
    boolean getStartupMovieShuffle();

    /**
     * <code>optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];</code>
     * @return Whether the startupMovieUsedForResume field is set.
     */
    boolean hasStartupMovieUsedForResume();
    /**
     * <code>optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];</code>
     * @return The startupMovieUsedForResume.
     */
    boolean getStartupMovieUsedForResume();

    /**
     * <code>optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];</code>
     * @return Whether the gameNotesEnableSpellcheck field is set.
     */
    boolean hasGameNotesEnableSpellcheck();
    /**
     * <code>optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];</code>
     * @return The gameNotesEnableSpellcheck.
     */
    boolean getGameNotesEnableSpellcheck();

    /**
     * <code>optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];</code>
     * @return Whether the screenshotItemsPerRow field is set.
     */
    boolean hasScreenshotItemsPerRow();
    /**
     * <code>optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];</code>
     * @return The screenshotItemsPerRow.
     */
    int getScreenshotItemsPerRow();

    /**
     * <code>optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundEnabled field is set.
     */
    boolean hasGBackgroundEnabled();
    /**
     * <code>optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundEnabled.
     */
    boolean getGBackgroundEnabled();

    /**
     * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundPath field is set.
     */
    boolean hasGBackgroundPath();
    /**
     * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundPath.
     */
    java.lang.String getGBackgroundPath();
    /**
     * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for gBackgroundPath.
     */
    com.google.protobuf.ByteString
        getGBackgroundPathBytes();

    /**
     * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundMaxKeep field is set.
     */
    boolean hasGBackgroundMaxKeep();
    /**
     * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundMaxKeep.
     */
    java.lang.String getGBackgroundMaxKeep();
    /**
     * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for gBackgroundMaxKeep.
     */
    com.google.protobuf.ByteString
        getGBackgroundMaxKeepBytes();

    /**
     * <code>optional int32 g_background_time_resolution = 18203 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundTimeResolution field is set.
     */
    boolean hasGBackgroundTimeResolution();
    /**
     * <code>optional int32 g_background_time_resolution = 18203 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundTimeResolution.
     */
    int getGBackgroundTimeResolution();

    /**
     * <code>optional bool g_background_devmode = 18206 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundDevmode field is set.
     */
    boolean hasGBackgroundDevmode();
    /**
     * <code>optional bool g_background_devmode = 18206 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundDevmode.
     */
    boolean getGBackgroundDevmode();

    /**
     * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundMk field is set.
     */
    boolean hasGBackgroundMk();
    /**
     * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundMk.
     */
    SteammessagesClientsettings.CMsgHotkey getGBackgroundMk();
    /**
     * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     */
    SteammessagesClientsettings.CMsgHotkeyOrBuilder getGBackgroundMkOrBuilder();

    /**
     * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundTg field is set.
     */
    boolean hasGBackgroundTg();
    /**
     * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundTg.
     */
    SteammessagesClientsettings.CMsgHotkey getGBackgroundTg();
    /**
     * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     */
    SteammessagesClientsettings.CMsgHotkeyOrBuilder getGBackgroundTgOrBuilder();

    /**
     * <code>optional bool g_background_a_m = 18209 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundAM field is set.
     */
    boolean hasGBackgroundAM();
    /**
     * <code>optional bool g_background_a_m = 18209 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundAM.
     */
    boolean getGBackgroundAM();

    /**
     * <code>optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer&#92;&#92;ShowTimestampsInConsole"];</code>
     * @return Whether the showTimestampsInConsole field is set.
     */
    boolean hasShowTimestampsInConsole();
    /**
     * <code>optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer&#92;&#92;ShowTimestampsInConsole"];</code>
     * @return The showTimestampsInConsole.
     */
    boolean getShowTimestampsInConsole();

    /**
     * <code>optional bool force_oobe = 20001 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ForceOOBE"];</code>
     * @return Whether the forceOobe field is set.
     */
    boolean hasForceOobe();
    /**
     * <code>optional bool force_oobe = 20001 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ForceOOBE"];</code>
     * @return The forceOobe.
     */
    boolean getForceOobe();

    /**
     * <code>optional int32 override_browser_composer_mode = 20002 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the overrideBrowserComposerMode field is set.
     */
    boolean hasOverrideBrowserComposerMode();
    /**
     * <code>optional int32 override_browser_composer_mode = 20002 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The overrideBrowserComposerMode.
     */
    int getOverrideBrowserComposerMode();

    /**
     * <code>optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the cefRemoteDebuggingEnabled field is set.
     */
    boolean hasCefRemoteDebuggingEnabled();
    /**
     * <code>optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The cefRemoteDebuggingEnabled.
     */
    boolean getCefRemoteDebuggingEnabled();

    /**
     * <code>optional bool force_deck_perf_tab = 20004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];</code>
     * @return Whether the forceDeckPerfTab field is set.
     */
    boolean hasForceDeckPerfTab();
    /**
     * <code>optional bool force_deck_perf_tab = 20004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];</code>
     * @return The forceDeckPerfTab.
     */
    boolean getForceDeckPerfTab();

    /**
     * <code>optional bool force_fake_mandatory_update = 20005 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];</code>
     * @return Whether the forceFakeMandatoryUpdate field is set.
     */
    boolean hasForceFakeMandatoryUpdate();
    /**
     * <code>optional bool force_fake_mandatory_update = 20005 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];</code>
     * @return The forceFakeMandatoryUpdate.
     */
    boolean getForceFakeMandatoryUpdate();

    /**
     * <code>optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = k_EHDRVisualization_None, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];</code>
     * @return Whether the gamescopeHdrVisualization field is set.
     */
    boolean hasGamescopeHdrVisualization();
    /**
     * <code>optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = k_EHDRVisualization_None, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];</code>
     * @return The gamescopeHdrVisualization.
     */
    Enums.EHDRVisualization getGamescopeHdrVisualization();

    /**
     * <code>optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return Whether the gamescopeAppTargetFramerate field is set.
     */
    boolean hasGamescopeAppTargetFramerate();
    /**
     * <code>optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return The gamescopeAppTargetFramerate.
     */
    int getGamescopeAppTargetFramerate();

    /**
     * <code>optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];</code>
     * @return Whether the gamescopeEnableAppTargetFramerate field is set.
     */
    boolean hasGamescopeEnableAppTargetFramerate();
    /**
     * <code>optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];</code>
     * @return The gamescopeEnableAppTargetFramerate.
     */
    boolean getGamescopeEnableAppTargetFramerate();

    /**
     * <code>optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return Whether the gamescopeDisableFramelimit field is set.
     */
    boolean hasGamescopeDisableFramelimit();
    /**
     * <code>optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return The gamescopeDisableFramelimit.
     */
    boolean getGamescopeDisableFramelimit();

    /**
     * <code>optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return Whether the gamescopeDisplayRefreshRate field is set.
     */
    boolean hasGamescopeDisplayRefreshRate();
    /**
     * <code>optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return The gamescopeDisplayRefreshRate.
     */
    int getGamescopeDisplayRefreshRate();

    /**
     * <code>optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];</code>
     * @return Whether the gamescopeUseGameRefreshRateInSteam field is set.
     */
    boolean hasGamescopeUseGameRefreshRateInSteam();
    /**
     * <code>optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];</code>
     * @return The gamescopeUseGameRefreshRateInSteam.
     */
    boolean getGamescopeUseGameRefreshRateInSteam();

    /**
     * <code>optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];</code>
     * @return Whether the steamosStatusLedBrightness field is set.
     */
    boolean hasSteamosStatusLedBrightness();
    /**
     * <code>optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];</code>
     * @return The steamosStatusLedBrightness.
     */
    int getSteamosStatusLedBrightness();
  }
  /**
   * Protobuf type {@code CMsgClientSettings}
   */
  public static final class CMsgClientSettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CMsgClientSettings)
      CMsgClientSettingsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMsgClientSettings.newBuilder() to construct.
    private CMsgClientSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMsgClientSettings() {
      preferredMonitor_ = "";
      displayName_ = "";
      screenshotsPath_ = "";
      webBrowserHome_ = "";
      voiceMicDeviceName_ = "";
      overlayTabs_ = "";
      startPage_ = "";
      broadcastPermissions_ = 0;
      broadcastEncodingOption_ = 0;
      startupMovieLocalPath_ = "";
      gBackgroundPath_ = "";
      gBackgroundMaxKeep_ = "";
      gamescopeHdrVisualization_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CMsgClientSettings();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return SteammessagesClientsettings.internal_static_CMsgClientSettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return SteammessagesClientsettings.internal_static_CMsgClientSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SteammessagesClientsettings.CMsgClientSettings.class, SteammessagesClientsettings.CMsgClientSettings.Builder.class);
    }

    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    private int bitField3_;
    private int bitField4_;
    public static final int NO_SAVE_PERSONAL_INFO_FIELD_NUMBER = 1;
    private boolean noSavePersonalInfo_ = false;
    /**
     * <code>optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;NoSavePersonalInfo"];</code>
     * @return Whether the noSavePersonalInfo field is set.
     */
    @java.lang.Override
    public boolean hasNoSavePersonalInfo() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;NoSavePersonalInfo"];</code>
     * @return The noSavePersonalInfo.
     */
    @java.lang.Override
    public boolean getNoSavePersonalInfo() {
      return noSavePersonalInfo_;
    }

    public static final int OOBE_TEST_MODE_ENABLED_FIELD_NUMBER = 2;
    private boolean oobeTestModeEnabled_ = false;
    /**
     * <code>optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OOBETestModeEnabled"];</code>
     * @return Whether the oobeTestModeEnabled field is set.
     */
    @java.lang.Override
    public boolean hasOobeTestModeEnabled() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OOBETestModeEnabled"];</code>
     * @return The oobeTestModeEnabled.
     */
    @java.lang.Override
    public boolean getOobeTestModeEnabled() {
      return oobeTestModeEnabled_;
    }

    public static final int IN_CLIENT_BETA_FIELD_NUMBER = 3;
    private boolean inClientBeta_ = false;
    /**
     * <code>optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
     * @return Whether the inClientBeta field is set.
     */
    @java.lang.Override
    public boolean hasInClientBeta() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
     * @return The inClientBeta.
     */
    @java.lang.Override
    public boolean getInClientBeta() {
      return inClientBeta_;
    }

    public static final int IS_STEAM_SIDELOADED_FIELD_NUMBER = 4;
    private boolean isSteamSideloaded_ = false;
    /**
     * <code>optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
     * @return Whether the isSteamSideloaded field is set.
     */
    @java.lang.Override
    public boolean hasIsSteamSideloaded() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
     * @return The isSteamSideloaded.
     */
    @java.lang.Override
    public boolean getIsSteamSideloaded() {
      return isSteamSideloaded_;
    }

    public static final int PREFERRED_MONITOR_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile java.lang.Object preferredMonitor_ = "";
    /**
     * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
     * @return Whether the preferredMonitor field is set.
     */
    @java.lang.Override
    public boolean hasPreferredMonitor() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
     * @return The preferredMonitor.
     */
    @java.lang.Override
    public java.lang.String getPreferredMonitor() {
      java.lang.Object ref = preferredMonitor_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          preferredMonitor_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
     * @return The bytes for preferredMonitor.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPreferredMonitorBytes() {
      java.lang.Object ref = preferredMonitor_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        preferredMonitor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STEAM_CEF_GPU_BLOCKLIST_DISABLED_FIELD_NUMBER = 6;
    private boolean steamCefGpuBlocklistDisabled_ = false;
    /**
     * <code>optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;CEFGPUBlocklistDisabled"];</code>
     * @return Whether the steamCefGpuBlocklistDisabled field is set.
     */
    @java.lang.Override
    public boolean hasSteamCefGpuBlocklistDisabled() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;CEFGPUBlocklistDisabled"];</code>
     * @return The steamCefGpuBlocklistDisabled.
     */
    @java.lang.Override
    public boolean getSteamCefGpuBlocklistDisabled() {
      return steamCefGpuBlocklistDisabled_;
    }

    public static final int BIGPICTURE_WINDOWED_FIELD_NUMBER = 7;
    private boolean bigpictureWindowed_ = false;
    /**
     * <code>optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];</code>
     * @return Whether the bigpictureWindowed field is set.
     */
    @java.lang.Override
    public boolean hasBigpictureWindowed() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];</code>
     * @return The bigpictureWindowed.
     */
    @java.lang.Override
    public boolean getBigpictureWindowed() {
      return bigpictureWindowed_;
    }

    public static final int DISPLAY_NAME_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private volatile java.lang.Object displayName_ = "";
    /**
     * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
     * @return Whether the displayName field is set.
     */
    @java.lang.Override
    public boolean hasDisplayName() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
     * @return The displayName.
     */
    @java.lang.Override
    public java.lang.String getDisplayName() {
      java.lang.Object ref = displayName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          displayName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
     * @return The bytes for displayName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDisplayNameBytes() {
      java.lang.Object ref = displayName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        displayName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IS_EXTERNAL_DISPLAY_FIELD_NUMBER = 9;
    private boolean isExternalDisplay_ = false;
    /**
     * <code>optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];</code>
     * @return Whether the isExternalDisplay field is set.
     */
    @java.lang.Override
    public boolean hasIsExternalDisplay() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];</code>
     * @return The isExternalDisplay.
     */
    @java.lang.Override
    public boolean getIsExternalDisplay() {
      return isExternalDisplay_;
    }

    public static final int STEAM_OS_UNDERSCAN_LEVEL_FIELD_NUMBER = 10;
    private float steamOsUnderscanLevel_ = 0F;
    /**
     * <code>optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];</code>
     * @return Whether the steamOsUnderscanLevel field is set.
     */
    @java.lang.Override
    public boolean hasSteamOsUnderscanLevel() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];</code>
     * @return The steamOsUnderscanLevel.
     */
    @java.lang.Override
    public float getSteamOsUnderscanLevel() {
      return steamOsUnderscanLevel_;
    }

    public static final int STEAM_OS_UNDERSCAN_ENABLED_FIELD_NUMBER = 11;
    private boolean steamOsUnderscanEnabled_ = false;
    /**
     * <code>optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];</code>
     * @return Whether the steamOsUnderscanEnabled field is set.
     */
    @java.lang.Override
    public boolean hasSteamOsUnderscanEnabled() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];</code>
     * @return The steamOsUnderscanEnabled.
     */
    @java.lang.Override
    public boolean getSteamOsUnderscanEnabled() {
      return steamOsUnderscanEnabled_;
    }

    public static final int MIN_SCALE_FACTOR_FIELD_NUMBER = 12;
    private float minScaleFactor_ = 0F;
    /**
     * <code>optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];</code>
     * @return Whether the minScaleFactor field is set.
     */
    @java.lang.Override
    public boolean hasMinScaleFactor() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];</code>
     * @return The minScaleFactor.
     */
    @java.lang.Override
    public float getMinScaleFactor() {
      return minScaleFactor_;
    }

    public static final int MAX_SCALE_FACTOR_FIELD_NUMBER = 13;
    private float maxScaleFactor_ = 0F;
    /**
     * <code>optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];</code>
     * @return Whether the maxScaleFactor field is set.
     */
    @java.lang.Override
    public boolean hasMaxScaleFactor() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <code>optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];</code>
     * @return The maxScaleFactor.
     */
    @java.lang.Override
    public float getMaxScaleFactor() {
      return maxScaleFactor_;
    }

    public static final int AUTO_SCALE_FACTOR_FIELD_NUMBER = 14;
    private float autoScaleFactor_ = 0F;
    /**
     * <code>optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];</code>
     * @return Whether the autoScaleFactor field is set.
     */
    @java.lang.Override
    public boolean hasAutoScaleFactor() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <code>optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];</code>
     * @return The autoScaleFactor.
     */
    @java.lang.Override
    public float getAutoScaleFactor() {
      return autoScaleFactor_;
    }

    public static final int SMALL_MODE_FIELD_NUMBER = 16;
    private boolean smallMode_ = false;
    /**
     * <code>optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmallMode"];</code>
     * @return Whether the smallMode field is set.
     */
    @java.lang.Override
    public boolean hasSmallMode() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <code>optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmallMode"];</code>
     * @return The smallMode.
     */
    @java.lang.Override
    public boolean getSmallMode() {
      return smallMode_;
    }

    public static final int SKIP_STEAMVR_INSTALL_DIALOG_FIELD_NUMBER = 19;
    private boolean skipSteamvrInstallDialog_ = false;
    /**
     * <code>optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;SteamVRHMDVGUIWarning"];</code>
     * @return Whether the skipSteamvrInstallDialog field is set.
     */
    @java.lang.Override
    public boolean hasSkipSteamvrInstallDialog() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <code>optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;SteamVRHMDVGUIWarning"];</code>
     * @return The skipSteamvrInstallDialog.
     */
    @java.lang.Override
    public boolean getSkipSteamvrInstallDialog() {
      return skipSteamvrInstallDialog_;
    }

    public static final int ALWAYS_SHOW_USER_CHOOSER_FIELD_NUMBER = 20;
    private boolean alwaysShowUserChooser_ = false;
    /**
     * <code>optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage&#92;&#92;Auth&#92;&#92;AlwaysShowUserChooser"];</code>
     * @return Whether the alwaysShowUserChooser field is set.
     */
    @java.lang.Override
    public boolean hasAlwaysShowUserChooser() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <code>optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage&#92;&#92;Auth&#92;&#92;AlwaysShowUserChooser"];</code>
     * @return The alwaysShowUserChooser.
     */
    @java.lang.Override
    public boolean getAlwaysShowUserChooser() {
      return alwaysShowUserChooser_;
    }

    public static final int SHOW_FAMILY_SHARING_NOTIFICATIONS_FIELD_NUMBER = 3000;
    private boolean showFamilySharingNotifications_ = false;
    /**
     * <code>optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the showFamilySharingNotifications field is set.
     */
    @java.lang.Override
    public boolean hasShowFamilySharingNotifications() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <code>optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The showFamilySharingNotifications.
     */
    @java.lang.Override
    public boolean getShowFamilySharingNotifications() {
      return showFamilySharingNotifications_;
    }

    public static final int OVERLAY_FPS_COUNTER_CORNER_FIELD_NUMBER = 4000;
    private int overlayFpsCounterCorner_ = 0;
    /**
     * <code>optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSCorner"];</code>
     * @return Whether the overlayFpsCounterCorner field is set.
     */
    @java.lang.Override
    public boolean hasOverlayFpsCounterCorner() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <code>optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSCorner"];</code>
     * @return The overlayFpsCounterCorner.
     */
    @java.lang.Override
    public int getOverlayFpsCounterCorner() {
      return overlayFpsCounterCorner_;
    }

    public static final int OVERLAY_FPS_COUNTER_HIGH_CONTRAST_FIELD_NUMBER = 4001;
    private boolean overlayFpsCounterHighContrast_ = false;
    /**
     * <code>optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSContrast"];</code>
     * @return Whether the overlayFpsCounterHighContrast field is set.
     */
    @java.lang.Override
    public boolean hasOverlayFpsCounterHighContrast() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <code>optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSContrast"];</code>
     * @return The overlayFpsCounterHighContrast.
     */
    @java.lang.Override
    public boolean getOverlayFpsCounterHighContrast() {
      return overlayFpsCounterHighContrast_;
    }

    public static final int OVERLAY_KEY_FIELD_NUMBER = 4002;
    private SteammessagesClientsettings.CMsgHotkey overlayKey_;
    /**
     * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
     * @return Whether the overlayKey field is set.
     */
    @java.lang.Override
    public boolean hasOverlayKey() {
      return ((bitField0_ & 0x00100000) != 0);
    }
    /**
     * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
     * @return The overlayKey.
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkey getOverlayKey() {
      return overlayKey_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : overlayKey_;
    }
    /**
     * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkeyOrBuilder getOverlayKeyOrBuilder() {
      return overlayKey_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : overlayKey_;
    }

    public static final int SCREENSHOT_KEY_FIELD_NUMBER = 4003;
    private SteammessagesClientsettings.CMsgHotkey screenshotKey_;
    /**
     * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
     * @return Whether the screenshotKey field is set.
     */
    @java.lang.Override
    public boolean hasScreenshotKey() {
      return ((bitField0_ & 0x00200000) != 0);
    }
    /**
     * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
     * @return The screenshotKey.
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkey getScreenshotKey() {
      return screenshotKey_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : screenshotKey_;
    }
    /**
     * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkeyOrBuilder getScreenshotKeyOrBuilder() {
      return screenshotKey_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : screenshotKey_;
    }

    public static final int ENABLE_OVERLAY_FIELD_NUMBER = 4004;
    private boolean enableOverlay_ = false;
    /**
     * <code>optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableGameOverlay"];</code>
     * @return Whether the enableOverlay field is set.
     */
    @java.lang.Override
    public boolean hasEnableOverlay() {
      return ((bitField0_ & 0x00400000) != 0);
    }
    /**
     * <code>optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableGameOverlay"];</code>
     * @return The enableOverlay.
     */
    @java.lang.Override
    public boolean getEnableOverlay() {
      return enableOverlay_;
    }

    public static final int ENABLE_SCREENSHOT_NOTIFICATION_FIELD_NUMBER = 4006;
    private boolean enableScreenshotNotification_ = false;
    /**
     * <code>optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotNotification", (.setting_default_bool) = true];</code>
     * @return Whether the enableScreenshotNotification field is set.
     */
    @java.lang.Override
    public boolean hasEnableScreenshotNotification() {
      return ((bitField0_ & 0x00800000) != 0);
    }
    /**
     * <code>optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotNotification", (.setting_default_bool) = true];</code>
     * @return The enableScreenshotNotification.
     */
    @java.lang.Override
    public boolean getEnableScreenshotNotification() {
      return enableScreenshotNotification_;
    }

    public static final int ENABLE_SCREENSHOT_SOUND_FIELD_NUMBER = 4007;
    private boolean enableScreenshotSound_ = false;
    /**
     * <code>optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];</code>
     * @return Whether the enableScreenshotSound field is set.
     */
    @java.lang.Override
    public boolean hasEnableScreenshotSound() {
      return ((bitField0_ & 0x01000000) != 0);
    }
    /**
     * <code>optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];</code>
     * @return The enableScreenshotSound.
     */
    @java.lang.Override
    public boolean getEnableScreenshotSound() {
      return enableScreenshotSound_;
    }

    public static final int SAVE_UNCOMPRESSED_SCREENSHOTS_FIELD_NUMBER = 4008;
    private boolean saveUncompressedScreenshots_ = false;
    /**
     * <code>optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotSaveUncompressed"];</code>
     * @return Whether the saveUncompressedScreenshots field is set.
     */
    @java.lang.Override
    public boolean hasSaveUncompressedScreenshots() {
      return ((bitField0_ & 0x02000000) != 0);
    }
    /**
     * <code>optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotSaveUncompressed"];</code>
     * @return The saveUncompressedScreenshots.
     */
    @java.lang.Override
    public boolean getSaveUncompressedScreenshots() {
      return saveUncompressedScreenshots_;
    }

    public static final int SCREENSHOTS_PATH_FIELD_NUMBER = 4009;
    @SuppressWarnings("serial")
    private volatile java.lang.Object screenshotsPath_ = "";
    /**
     * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the screenshotsPath field is set.
     */
    @java.lang.Override
    public boolean hasScreenshotsPath() {
      return ((bitField0_ & 0x04000000) != 0);
    }
    /**
     * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The screenshotsPath.
     */
    @java.lang.Override
    public java.lang.String getScreenshotsPath() {
      java.lang.Object ref = screenshotsPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          screenshotsPath_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for screenshotsPath.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getScreenshotsPathBytes() {
      java.lang.Object ref = screenshotsPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        screenshotsPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEFAULT_PING_RATE_FIELD_NUMBER = 4010;
    private int defaultPingRate_ = 0;
    /**
     * <code>optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];</code>
     * @return Whether the defaultPingRate field is set.
     */
    @java.lang.Override
    public boolean hasDefaultPingRate() {
      return ((bitField0_ & 0x08000000) != 0);
    }
    /**
     * <code>optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];</code>
     * @return The defaultPingRate.
     */
    @java.lang.Override
    public int getDefaultPingRate() {
      return defaultPingRate_;
    }

    public static final int SERVER_PING_RATE_FIELD_NUMBER = 4011;
    private int serverPingRate_ = 0;
    /**
     * <code>optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the serverPingRate field is set.
     */
    @java.lang.Override
    public boolean hasServerPingRate() {
      return ((bitField0_ & 0x10000000) != 0);
    }
    /**
     * <code>optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The serverPingRate.
     */
    @java.lang.Override
    public int getServerPingRate() {
      return serverPingRate_;
    }

    public static final int STEAM_NETWORKING_SHARE_IP_FIELD_NUMBER = 4012;
    private int steamNetworkingShareIp_ = 0;
    /**
     * <code>optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the steamNetworkingShareIp field is set.
     */
    @java.lang.Override
    public boolean hasSteamNetworkingShareIp() {
      return ((bitField0_ & 0x20000000) != 0);
    }
    /**
     * <code>optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The steamNetworkingShareIp.
     */
    @java.lang.Override
    public int getSteamNetworkingShareIp() {
      return steamNetworkingShareIp_;
    }

    public static final int WEB_BROWSER_HOME_FIELD_NUMBER = 4013;
    @SuppressWarnings("serial")
    private volatile java.lang.Object webBrowserHome_ = "";
    /**
     * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the webBrowserHome field is set.
     */
    @java.lang.Override
    public boolean hasWebBrowserHome() {
      return ((bitField0_ & 0x40000000) != 0);
    }
    /**
     * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The webBrowserHome.
     */
    @java.lang.Override
    public java.lang.String getWebBrowserHome() {
      java.lang.Object ref = webBrowserHome_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          webBrowserHome_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for webBrowserHome.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getWebBrowserHomeBytes() {
      java.lang.Object ref = webBrowserHome_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        webBrowserHome_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VOICE_MIC_DEVICE_NAME_FIELD_NUMBER = 4014;
    @SuppressWarnings("serial")
    private volatile java.lang.Object voiceMicDeviceName_ = "";
    /**
     * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voiceMicDeviceName field is set.
     */
    @java.lang.Override
    public boolean hasVoiceMicDeviceName() {
      return ((bitField0_ & 0x80000000) != 0);
    }
    /**
     * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voiceMicDeviceName.
     */
    @java.lang.Override
    public java.lang.String getVoiceMicDeviceName() {
      java.lang.Object ref = voiceMicDeviceName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          voiceMicDeviceName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for voiceMicDeviceName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVoiceMicDeviceNameBytes() {
      java.lang.Object ref = voiceMicDeviceName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        voiceMicDeviceName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VOICE_MIC_INPUT_GAIN_FIELD_NUMBER = 4015;
    private float voiceMicInputGain_ = 0F;
    /**
     * <code>optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voiceMicInputGain field is set.
     */
    @java.lang.Override
    public boolean hasVoiceMicInputGain() {
      return ((bitField1_ & 0x00000001) != 0);
    }
    /**
     * <code>optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voiceMicInputGain.
     */
    @java.lang.Override
    public float getVoiceMicInputGain() {
      return voiceMicInputGain_;
    }

    public static final int VOICE_SPEAKER_OUTPUT_GAIN_FIELD_NUMBER = 4016;
    private float voiceSpeakerOutputGain_ = 0F;
    /**
     * <code>optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voiceSpeakerOutputGain field is set.
     */
    @java.lang.Override
    public boolean hasVoiceSpeakerOutputGain() {
      return ((bitField1_ & 0x00000002) != 0);
    }
    /**
     * <code>optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voiceSpeakerOutputGain.
     */
    @java.lang.Override
    public float getVoiceSpeakerOutputGain() {
      return voiceSpeakerOutputGain_;
    }

    public static final int VOICE_PUSH_TO_TALK_SETTING_FIELD_NUMBER = 4017;
    private int voicePushToTalkSetting_ = 0;
    /**
     * <code>optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voicePushToTalkSetting field is set.
     */
    @java.lang.Override
    public boolean hasVoicePushToTalkSetting() {
      return ((bitField1_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voicePushToTalkSetting.
     */
    @java.lang.Override
    public int getVoicePushToTalkSetting() {
      return voicePushToTalkSetting_;
    }

    public static final int VOICE_PUSH_TO_TALK_KEY_FIELD_NUMBER = 4018;
    private SteammessagesClientsettings.CMsgHotkey voicePushToTalkKey_;
    /**
     * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the voicePushToTalkKey field is set.
     */
    @java.lang.Override
    public boolean hasVoicePushToTalkKey() {
      return ((bitField1_ & 0x00000008) != 0);
    }
    /**
     * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The voicePushToTalkKey.
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkey getVoicePushToTalkKey() {
      return voicePushToTalkKey_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : voicePushToTalkKey_;
    }
    /**
     * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkeyOrBuilder getVoicePushToTalkKeyOrBuilder() {
      return voicePushToTalkKey_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : voicePushToTalkKey_;
    }

    public static final int OVERLAY_TOOLBAR_LIST_VIEW_FIELD_NUMBER = 4019;
    private boolean overlayToolbarListView_ = false;
    /**
     * <code>optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];</code>
     * @return Whether the overlayToolbarListView field is set.
     */
    @java.lang.Override
    public boolean hasOverlayToolbarListView() {
      return ((bitField1_ & 0x00000010) != 0);
    }
    /**
     * <code>optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];</code>
     * @return The overlayToolbarListView.
     */
    @java.lang.Override
    public boolean getOverlayToolbarListView() {
      return overlayToolbarListView_;
    }

    public static final int ALWAYS_USE_GAMEPADUI_OVERLAY_FIELD_NUMBER = 4020;
    private boolean alwaysUseGamepaduiOverlay_ = false;
    /**
     * <code>optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableSCTenFootOverlayCheckNew"];</code>
     * @return Whether the alwaysUseGamepaduiOverlay field is set.
     */
    @java.lang.Override
    public boolean hasAlwaysUseGamepaduiOverlay() {
      return ((bitField1_ & 0x00000020) != 0);
    }
    /**
     * <code>optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableSCTenFootOverlayCheckNew"];</code>
     * @return The alwaysUseGamepaduiOverlay.
     */
    @java.lang.Override
    public boolean getAlwaysUseGamepaduiOverlay() {
      return alwaysUseGamepaduiOverlay_;
    }

    public static final int OVERLAY_TABS_FIELD_NUMBER = 4021;
    @SuppressWarnings("serial")
    private volatile java.lang.Object overlayTabs_ = "";
    /**
     * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
     * @return Whether the overlayTabs field is set.
     */
    @java.lang.Override
    public boolean hasOverlayTabs() {
      return ((bitField1_ & 0x00000040) != 0);
    }
    /**
     * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
     * @return The overlayTabs.
     */
    @java.lang.Override
    public java.lang.String getOverlayTabs() {
      java.lang.Object ref = overlayTabs_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          overlayTabs_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
     * @return The bytes for overlayTabs.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOverlayTabsBytes() {
      java.lang.Object ref = overlayTabs_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        overlayTabs_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OVERLAY_SCALE_INTERFACE_FIELD_NUMBER = 4022;
    private boolean overlayScaleInterface_ = false;
    /**
     * <code>optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OverlayScaleInterface", (.setting_default_bool) = true];</code>
     * @return Whether the overlayScaleInterface field is set.
     */
    @java.lang.Override
    public boolean hasOverlayScaleInterface() {
      return ((bitField1_ & 0x00000080) != 0);
    }
    /**
     * <code>optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OverlayScaleInterface", (.setting_default_bool) = true];</code>
     * @return The overlayScaleInterface.
     */
    @java.lang.Override
    public boolean getOverlayScaleInterface() {
      return overlayScaleInterface_;
    }

    public static final int OVERLAY_RESTORE_BROWSER_TABS_FIELD_NUMBER = 4023;
    private boolean overlayRestoreBrowserTabs_ = false;
    /**
     * <code>optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];</code>
     * @return Whether the overlayRestoreBrowserTabs field is set.
     */
    @java.lang.Override
    public boolean hasOverlayRestoreBrowserTabs() {
      return ((bitField1_ & 0x00000100) != 0);
    }
    /**
     * <code>optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];</code>
     * @return The overlayRestoreBrowserTabs.
     */
    @java.lang.Override
    public boolean getOverlayRestoreBrowserTabs() {
      return overlayRestoreBrowserTabs_;
    }

    public static final int SMOOTH_SCROLL_WEBVIEWS_FIELD_NUMBER = 5000;
    private boolean smoothScrollWebviews_ = false;
    /**
     * <code>optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmoothScrollWebViews", (.setting_default_bool) = true];</code>
     * @return Whether the smoothScrollWebviews field is set.
     */
    @java.lang.Override
    public boolean hasSmoothScrollWebviews() {
      return ((bitField1_ & 0x00000200) != 0);
    }
    /**
     * <code>optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmoothScrollWebViews", (.setting_default_bool) = true];</code>
     * @return The smoothScrollWebviews.
     */
    @java.lang.Override
    public boolean getSmoothScrollWebviews() {
      return smoothScrollWebviews_;
    }

    public static final int ENABLE_GPU_ACCELERATED_WEBVIEWS_FIELD_NUMBER = 5001;
    private boolean enableGpuAcceleratedWebviews_ = false;
    /**
     * <code>optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableGpuAcceleratedWebviews field is set.
     */
    @java.lang.Override
    public boolean hasEnableGpuAcceleratedWebviews() {
      return ((bitField1_ & 0x00000400) != 0);
    }
    /**
     * <code>optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableGpuAcceleratedWebviews.
     */
    @java.lang.Override
    public boolean getEnableGpuAcceleratedWebviews() {
      return enableGpuAcceleratedWebviews_;
    }

    public static final int ENABLE_HARDWARE_VIDEO_DECODING_FIELD_NUMBER = 5003;
    private boolean enableHardwareVideoDecoding_ = false;
    /**
     * <code>optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableHardwareVideoDecoding field is set.
     */
    @java.lang.Override
    public boolean hasEnableHardwareVideoDecoding() {
      return ((bitField1_ & 0x00000800) != 0);
    }
    /**
     * <code>optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableHardwareVideoDecoding.
     */
    @java.lang.Override
    public boolean getEnableHardwareVideoDecoding() {
      return enableHardwareVideoDecoding_;
    }

    public static final int RUN_AT_STARTUP_FIELD_NUMBER = 5004;
    private boolean runAtStartup_ = false;
    /**
     * <code>optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the runAtStartup field is set.
     */
    @java.lang.Override
    public boolean hasRunAtStartup() {
      return ((bitField1_ & 0x00001000) != 0);
    }
    /**
     * <code>optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The runAtStartup.
     */
    @java.lang.Override
    public boolean getRunAtStartup() {
      return runAtStartup_;
    }

    public static final int ENABLE_DPI_SCALING_FIELD_NUMBER = 5005;
    private boolean enableDpiScaling_ = false;
    /**
     * <code>optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableDpiScaling field is set.
     */
    @java.lang.Override
    public boolean hasEnableDpiScaling() {
      return ((bitField1_ & 0x00002000) != 0);
    }
    /**
     * <code>optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableDpiScaling.
     */
    @java.lang.Override
    public boolean getEnableDpiScaling() {
      return enableDpiScaling_;
    }

    public static final int ENABLE_MARKETING_MESSAGES_FIELD_NUMBER = 5006;
    private boolean enableMarketingMessages_ = false;
    /**
     * <code>optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news&#92;&#92;NotifyAvailableGames", (.setting_default_bool) = true];</code>
     * @return Whether the enableMarketingMessages field is set.
     */
    @java.lang.Override
    public boolean hasEnableMarketingMessages() {
      return ((bitField1_ & 0x00004000) != 0);
    }
    /**
     * <code>optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news&#92;&#92;NotifyAvailableGames", (.setting_default_bool) = true];</code>
     * @return The enableMarketingMessages.
     */
    @java.lang.Override
    public boolean getEnableMarketingMessages() {
      return enableMarketingMessages_;
    }

    public static final int START_IN_BIG_PICTURE_MODE_FIELD_NUMBER = 5007;
    private boolean startInBigPictureMode_ = false;
    /**
     * <code>optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the startInBigPictureMode field is set.
     */
    @java.lang.Override
    public boolean hasStartInBigPictureMode() {
      return ((bitField1_ & 0x00008000) != 0);
    }
    /**
     * <code>optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The startInBigPictureMode.
     */
    @java.lang.Override
    public boolean getStartInBigPictureMode() {
      return startInBigPictureMode_;
    }

    public static final int JUMPLIST_FLAGS_FIELD_NUMBER = 5008;
    private int jumplistFlags_ = 0;
    /**
     * <code>optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;JumplistSettings", (.setting_default_uint) = 77680];</code>
     * @return Whether the jumplistFlags field is set.
     */
    @java.lang.Override
    public boolean hasJumplistFlags() {
      return ((bitField1_ & 0x00010000) != 0);
    }
    /**
     * <code>optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;JumplistSettings", (.setting_default_uint) = 77680];</code>
     * @return The jumplistFlags.
     */
    @java.lang.Override
    public int getJumplistFlags() {
      return jumplistFlags_;
    }

    public static final int ENABLE_UI_SOUNDS_FIELD_NUMBER = 5009;
    private boolean enableUiSounds_ = false;
    /**
     * <code>optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableUISounds", (.setting_default_bool) = true];</code>
     * @return Whether the enableUiSounds field is set.
     */
    @java.lang.Override
    public boolean hasEnableUiSounds() {
      return ((bitField1_ & 0x00020000) != 0);
    }
    /**
     * <code>optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableUISounds", (.setting_default_bool) = true];</code>
     * @return The enableUiSounds.
     */
    @java.lang.Override
    public boolean getEnableUiSounds() {
      return enableUiSounds_;
    }

    public static final int DISABLE_ALL_TOASTS_FIELD_NUMBER = 6000;
    private boolean disableAllToasts_ = false;
    /**
     * <code>optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];</code>
     * @return Whether the disableAllToasts field is set.
     */
    @java.lang.Override
    public boolean hasDisableAllToasts() {
      return ((bitField1_ & 0x00040000) != 0);
    }
    /**
     * <code>optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];</code>
     * @return The disableAllToasts.
     */
    @java.lang.Override
    public boolean getDisableAllToasts() {
      return disableAllToasts_;
    }

    public static final int DISABLE_TOASTS_IN_GAME_FIELD_NUMBER = 6001;
    private boolean disableToastsInGame_ = false;
    /**
     * <code>optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];</code>
     * @return Whether the disableToastsInGame field is set.
     */
    @java.lang.Override
    public boolean hasDisableToastsInGame() {
      return ((bitField1_ & 0x00080000) != 0);
    }
    /**
     * <code>optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];</code>
     * @return The disableToastsInGame.
     */
    @java.lang.Override
    public boolean getDisableToastsInGame() {
      return disableToastsInGame_;
    }

    public static final int PLAY_SOUND_ON_TOAST_FIELD_NUMBER = 6002;
    private boolean playSoundOnToast_ = false;
    /**
     * <code>optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];</code>
     * @return Whether the playSoundOnToast field is set.
     */
    @java.lang.Override
    public boolean hasPlaySoundOnToast() {
      return ((bitField1_ & 0x00100000) != 0);
    }
    /**
     * <code>optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];</code>
     * @return The playSoundOnToast.
     */
    @java.lang.Override
    public boolean getPlaySoundOnToast() {
      return playSoundOnToast_;
    }

    public static final int LIBRARY_DISPLAY_SIZE_FIELD_NUMBER = 7000;
    private int libraryDisplaySize_ = 0;
    /**
     * <code>optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];</code>
     * @return Whether the libraryDisplaySize field is set.
     */
    @java.lang.Override
    public boolean hasLibraryDisplaySize() {
      return ((bitField1_ & 0x00200000) != 0);
    }
    /**
     * <code>optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];</code>
     * @return The libraryDisplaySize.
     */
    @java.lang.Override
    public int getLibraryDisplaySize() {
      return libraryDisplaySize_;
    }

    public static final int LIBRARY_WHATS_NEW_SHOW_ONLY_PRODUCT_UPDATES_FIELD_NUMBER = 7001;
    private boolean libraryWhatsNewShowOnlyProductUpdates_ = false;
    /**
     * <code>optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];</code>
     * @return Whether the libraryWhatsNewShowOnlyProductUpdates field is set.
     */
    @java.lang.Override
    public boolean hasLibraryWhatsNewShowOnlyProductUpdates() {
      return ((bitField1_ & 0x00400000) != 0);
    }
    /**
     * <code>optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];</code>
     * @return The libraryWhatsNewShowOnlyProductUpdates.
     */
    @java.lang.Override
    public boolean getLibraryWhatsNewShowOnlyProductUpdates() {
      return libraryWhatsNewShowOnlyProductUpdates_;
    }

    public static final int SHOW_STORE_CONTENT_ON_HOME_FIELD_NUMBER = 7002;
    private boolean showStoreContentOnHome_ = false;
    /**
     * <code>optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];</code>
     * @return Whether the showStoreContentOnHome field is set.
     */
    @java.lang.Override
    public boolean hasShowStoreContentOnHome() {
      return ((bitField1_ & 0x00800000) != 0);
    }
    /**
     * <code>optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];</code>
     * @return The showStoreContentOnHome.
     */
    @java.lang.Override
    public boolean getShowStoreContentOnHome() {
      return showStoreContentOnHome_;
    }

    public static final int START_PAGE_FIELD_NUMBER = 7003;
    @SuppressWarnings("serial")
    private volatile java.lang.Object startPage_ = "";
    /**
     * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the startPage field is set.
     */
    @java.lang.Override
    public boolean hasStartPage() {
      return ((bitField1_ & 0x01000000) != 0);
    }
    /**
     * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The startPage.
     */
    @java.lang.Override
    public java.lang.String getStartPage() {
      java.lang.Object ref = startPage_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startPage_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for startPage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStartPageBytes() {
      java.lang.Object ref = startPage_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startPage_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LIBRARY_LOW_BANDWIDTH_MODE_FIELD_NUMBER = 7004;
    private boolean libraryLowBandwidthMode_ = false;
    /**
     * <code>optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];</code>
     * @return Whether the libraryLowBandwidthMode field is set.
     */
    @java.lang.Override
    public boolean hasLibraryLowBandwidthMode() {
      return ((bitField1_ & 0x02000000) != 0);
    }
    /**
     * <code>optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];</code>
     * @return The libraryLowBandwidthMode.
     */
    @java.lang.Override
    public boolean getLibraryLowBandwidthMode() {
      return libraryLowBandwidthMode_;
    }

    public static final int LIBRARY_LOW_PERF_MODE_FIELD_NUMBER = 7005;
    private boolean libraryLowPerfMode_ = false;
    /**
     * <code>optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];</code>
     * @return Whether the libraryLowPerfMode field is set.
     */
    @java.lang.Override
    public boolean hasLibraryLowPerfMode() {
      return ((bitField1_ & 0x04000000) != 0);
    }
    /**
     * <code>optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];</code>
     * @return The libraryLowPerfMode.
     */
    @java.lang.Override
    public boolean getLibraryLowPerfMode() {
      return libraryLowPerfMode_;
    }

    public static final int LIBRARY_DISABLE_COMMUNITY_CONTENT_FIELD_NUMBER = 7006;
    private boolean libraryDisableCommunityContent_ = false;
    /**
     * <code>optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];</code>
     * @return Whether the libraryDisableCommunityContent field is set.
     */
    @java.lang.Override
    public boolean hasLibraryDisableCommunityContent() {
      return ((bitField1_ & 0x08000000) != 0);
    }
    /**
     * <code>optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];</code>
     * @return The libraryDisableCommunityContent.
     */
    @java.lang.Override
    public boolean getLibraryDisableCommunityContent() {
      return libraryDisableCommunityContent_;
    }

    public static final int LIBRARY_DISPLAY_ICON_IN_GAME_LIST_FIELD_NUMBER = 7007;
    private boolean libraryDisplayIconInGameList_ = false;
    /**
     * <code>optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];</code>
     * @return Whether the libraryDisplayIconInGameList field is set.
     */
    @java.lang.Override
    public boolean hasLibraryDisplayIconInGameList() {
      return ((bitField1_ & 0x10000000) != 0);
    }
    /**
     * <code>optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];</code>
     * @return The libraryDisplayIconInGameList.
     */
    @java.lang.Override
    public boolean getLibraryDisplayIconInGameList() {
      return libraryDisplayIconInGameList_;
    }

    public static final int READY_TO_PLAY_INCLUDES_STREAMING_FIELD_NUMBER = 7008;
    private boolean readyToPlayIncludesStreaming_ = false;
    /**
     * <code>optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];</code>
     * @return Whether the readyToPlayIncludesStreaming field is set.
     */
    @java.lang.Override
    public boolean hasReadyToPlayIncludesStreaming() {
      return ((bitField1_ & 0x20000000) != 0);
    }
    /**
     * <code>optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];</code>
     * @return The readyToPlayIncludesStreaming.
     */
    @java.lang.Override
    public boolean getReadyToPlayIncludesStreaming() {
      return readyToPlayIncludesStreaming_;
    }

    public static final int SHOW_STEAM_DECK_INFO_FIELD_NUMBER = 7009;
    private boolean showSteamDeckInfo_ = false;
    /**
     * <code>optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];</code>
     * @return Whether the showSteamDeckInfo field is set.
     */
    @java.lang.Override
    public boolean hasShowSteamDeckInfo() {
      return ((bitField1_ & 0x40000000) != 0);
    }
    /**
     * <code>optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];</code>
     * @return The showSteamDeckInfo.
     */
    @java.lang.Override
    public boolean getShowSteamDeckInfo() {
      return showSteamDeckInfo_;
    }

    public static final int ENABLE_SHADER_PRECACHE_FIELD_NUMBER = 8000;
    private boolean enableShaderPrecache_ = false;
    /**
     * <code>optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableShaderPrecache field is set.
     */
    @java.lang.Override
    public boolean hasEnableShaderPrecache() {
      return ((bitField1_ & 0x80000000) != 0);
    }
    /**
     * <code>optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableShaderPrecache.
     */
    @java.lang.Override
    public boolean getEnableShaderPrecache() {
      return enableShaderPrecache_;
    }

    public static final int ENABLE_SHADER_BACKGROUND_PROCESSING_FIELD_NUMBER = 8001;
    private boolean enableShaderBackgroundProcessing_ = false;
    /**
     * <code>optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the enableShaderBackgroundProcessing field is set.
     */
    @java.lang.Override
    public boolean hasEnableShaderBackgroundProcessing() {
      return ((bitField2_ & 0x00000001) != 0);
    }
    /**
     * <code>optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The enableShaderBackgroundProcessing.
     */
    @java.lang.Override
    public boolean getEnableShaderBackgroundProcessing() {
      return enableShaderBackgroundProcessing_;
    }

    public static final int SHADER_PRECACHED_SIZE_FIELD_NUMBER = 8002;
    private long shaderPrecachedSize_ = 0L;
    /**
     * <code>optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
     * @return Whether the shaderPrecachedSize field is set.
     */
    @java.lang.Override
    public boolean hasShaderPrecachedSize() {
      return ((bitField2_ & 0x00000002) != 0);
    }
    /**
     * <code>optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
     * @return The shaderPrecachedSize.
     */
    @java.lang.Override
    public long getShaderPrecachedSize() {
      return shaderPrecachedSize_;
    }

    public static final int NEEDS_STEAM_SERVICE_REPAIR_FIELD_NUMBER = 8003;
    private boolean needsSteamServiceRepair_ = false;
    /**
     * <code>optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
     * @return Whether the needsSteamServiceRepair field is set.
     */
    @java.lang.Override
    public boolean hasNeedsSteamServiceRepair() {
      return ((bitField2_ & 0x00000004) != 0);
    }
    /**
     * <code>optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
     * @return The needsSteamServiceRepair.
     */
    @java.lang.Override
    public boolean getNeedsSteamServiceRepair() {
      return needsSteamServiceRepair_;
    }

    public static final int DOWNLOAD_PEER_CONTENT_FIELD_NUMBER = 8004;
    private int downloadPeerContent_ = 0;
    /**
     * <code>optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadPeerContent field is set.
     */
    @java.lang.Override
    public boolean hasDownloadPeerContent() {
      return ((bitField2_ & 0x00000008) != 0);
    }
    /**
     * <code>optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadPeerContent.
     */
    @java.lang.Override
    public int getDownloadPeerContent() {
      return downloadPeerContent_;
    }

    public static final int DOWNLOAD_RATE_BITS_PER_S_FIELD_NUMBER = 8005;
    private boolean downloadRateBitsPerS_ = false;
    /**
     * <code>optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadRateBitsPerS field is set.
     */
    @java.lang.Override
    public boolean hasDownloadRateBitsPerS() {
      return ((bitField2_ & 0x00000010) != 0);
    }
    /**
     * <code>optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadRateBitsPerS.
     */
    @java.lang.Override
    public boolean getDownloadRateBitsPerS() {
      return downloadRateBitsPerS_;
    }

    public static final int RESTRICT_AUTO_UPDATES_FIELD_NUMBER = 8006;
    private boolean restrictAutoUpdates_ = false;
    /**
     * <code>optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the restrictAutoUpdates field is set.
     */
    @java.lang.Override
    public boolean hasRestrictAutoUpdates() {
      return ((bitField2_ & 0x00000020) != 0);
    }
    /**
     * <code>optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The restrictAutoUpdates.
     */
    @java.lang.Override
    public boolean getRestrictAutoUpdates() {
      return restrictAutoUpdates_;
    }

    public static final int RESTRICT_AUTO_UPDATES_START_FIELD_NUMBER = 8007;
    private int restrictAutoUpdatesStart_ = 0;
    /**
     * <code>optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the restrictAutoUpdatesStart field is set.
     */
    @java.lang.Override
    public boolean hasRestrictAutoUpdatesStart() {
      return ((bitField2_ & 0x00000040) != 0);
    }
    /**
     * <code>optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The restrictAutoUpdatesStart.
     */
    @java.lang.Override
    public int getRestrictAutoUpdatesStart() {
      return restrictAutoUpdatesStart_;
    }

    public static final int RESTRICT_AUTO_UPDATES_END_FIELD_NUMBER = 8008;
    private int restrictAutoUpdatesEnd_ = 0;
    /**
     * <code>optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the restrictAutoUpdatesEnd field is set.
     */
    @java.lang.Override
    public boolean hasRestrictAutoUpdatesEnd() {
      return ((bitField2_ & 0x00000080) != 0);
    }
    /**
     * <code>optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The restrictAutoUpdatesEnd.
     */
    @java.lang.Override
    public int getRestrictAutoUpdatesEnd() {
      return restrictAutoUpdatesEnd_;
    }

    public static final int DOWNLOAD_REGION_FIELD_NUMBER = 8009;
    private int downloadRegion_ = 0;
    /**
     * <code>optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadRegion field is set.
     */
    @java.lang.Override
    public boolean hasDownloadRegion() {
      return ((bitField2_ & 0x00000100) != 0);
    }
    /**
     * <code>optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadRegion.
     */
    @java.lang.Override
    public int getDownloadRegion() {
      return downloadRegion_;
    }

    public static final int DOWNLOAD_WHILE_APP_RUNNING_FIELD_NUMBER = 8010;
    private boolean downloadWhileAppRunning_ = false;
    /**
     * <code>optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadWhileAppRunning field is set.
     */
    @java.lang.Override
    public boolean hasDownloadWhileAppRunning() {
      return ((bitField2_ & 0x00000200) != 0);
    }
    /**
     * <code>optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadWhileAppRunning.
     */
    @java.lang.Override
    public boolean getDownloadWhileAppRunning() {
      return downloadWhileAppRunning_;
    }

    public static final int DOWNLOAD_THROTTLE_WHILE_STREAMING_FIELD_NUMBER = 8011;
    private boolean downloadThrottleWhileStreaming_ = false;
    /**
     * <code>optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadThrottleWhileStreaming field is set.
     */
    @java.lang.Override
    public boolean hasDownloadThrottleWhileStreaming() {
      return ((bitField2_ & 0x00000400) != 0);
    }
    /**
     * <code>optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadThrottleWhileStreaming.
     */
    @java.lang.Override
    public boolean getDownloadThrottleWhileStreaming() {
      return downloadThrottleWhileStreaming_;
    }

    public static final int DOWNLOAD_THROTTLE_RATE_FIELD_NUMBER = 8012;
    private int downloadThrottleRate_ = 0;
    /**
     * <code>optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the downloadThrottleRate field is set.
     */
    @java.lang.Override
    public boolean hasDownloadThrottleRate() {
      return ((bitField2_ & 0x00000800) != 0);
    }
    /**
     * <code>optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The downloadThrottleRate.
     */
    @java.lang.Override
    public int getDownloadThrottleRate() {
      return downloadThrottleRate_;
    }

    public static final int CLOUD_ENABLED_FIELD_NUMBER = 10000;
    private boolean cloudEnabled_ = false;
    /**
     * <code>optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the cloudEnabled field is set.
     */
    @java.lang.Override
    public boolean hasCloudEnabled() {
      return ((bitField2_ & 0x00001000) != 0);
    }
    /**
     * <code>optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The cloudEnabled.
     */
    @java.lang.Override
    public boolean getCloudEnabled() {
      return cloudEnabled_;
    }

    public static final int SHOW_SCREENSHOT_MANAGER_FIELD_NUMBER = 10001;
    private boolean showScreenshotManager_ = false;
    /**
     * <code>optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ShowScreenshotManager"];</code>
     * @return Whether the showScreenshotManager field is set.
     */
    @java.lang.Override
    public boolean hasShowScreenshotManager() {
      return ((bitField2_ & 0x00002000) != 0);
    }
    /**
     * <code>optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ShowScreenshotManager"];</code>
     * @return The showScreenshotManager.
     */
    @java.lang.Override
    public boolean getShowScreenshotManager() {
      return showScreenshotManager_;
    }

    public static final int MUSIC_VOLUME_FIELD_NUMBER = 11000;
    private int musicVolume_ = 0;
    /**
     * <code>optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the musicVolume field is set.
     */
    @java.lang.Override
    public boolean hasMusicVolume() {
      return ((bitField2_ & 0x00004000) != 0);
    }
    /**
     * <code>optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The musicVolume.
     */
    @java.lang.Override
    public int getMusicVolume() {
      return musicVolume_;
    }

    public static final int MUSIC_PAUSE_ON_APP_START_FIELD_NUMBER = 11001;
    private boolean musicPauseOnAppStart_ = false;
    /**
     * <code>optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnAppStartedProcess"];</code>
     * @return Whether the musicPauseOnAppStart field is set.
     */
    @java.lang.Override
    public boolean hasMusicPauseOnAppStart() {
      return ((bitField2_ & 0x00008000) != 0);
    }
    /**
     * <code>optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnAppStartedProcess"];</code>
     * @return The musicPauseOnAppStart.
     */
    @java.lang.Override
    public boolean getMusicPauseOnAppStart() {
      return musicPauseOnAppStart_;
    }

    public static final int MUSIC_PAUSE_ON_VOICE_CHAT_FIELD_NUMBER = 11002;
    private boolean musicPauseOnVoiceChat_ = false;
    /**
     * <code>optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnVoiceChat"];</code>
     * @return Whether the musicPauseOnVoiceChat field is set.
     */
    @java.lang.Override
    public boolean hasMusicPauseOnVoiceChat() {
      return ((bitField2_ & 0x00010000) != 0);
    }
    /**
     * <code>optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnVoiceChat"];</code>
     * @return The musicPauseOnVoiceChat.
     */
    @java.lang.Override
    public boolean getMusicPauseOnVoiceChat() {
      return musicPauseOnVoiceChat_;
    }

    public static final int MUSIC_DOWNLOAD_HIGH_QUALITY_FIELD_NUMBER = 11003;
    private boolean musicDownloadHighQuality_ = false;
    /**
     * <code>optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;DownloadHighQualityAudioSoundtracks"];</code>
     * @return Whether the musicDownloadHighQuality field is set.
     */
    @java.lang.Override
    public boolean hasMusicDownloadHighQuality() {
      return ((bitField2_ & 0x00020000) != 0);
    }
    /**
     * <code>optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;DownloadHighQualityAudioSoundtracks"];</code>
     * @return The musicDownloadHighQuality.
     */
    @java.lang.Override
    public boolean getMusicDownloadHighQuality() {
      return musicDownloadHighQuality_;
    }

    public static final int MUSIC_PLAYLIST_NOTIFICATION_FIELD_NUMBER = 11004;
    private boolean musicPlaylistNotification_ = false;
    /**
     * <code>optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PlaylistNowPlayingNotification"];</code>
     * @return Whether the musicPlaylistNotification field is set.
     */
    @java.lang.Override
    public boolean hasMusicPlaylistNotification() {
      return ((bitField2_ & 0x00040000) != 0);
    }
    /**
     * <code>optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PlaylistNowPlayingNotification"];</code>
     * @return The musicPlaylistNotification.
     */
    @java.lang.Override
    public boolean getMusicPlaylistNotification() {
      return musicPlaylistNotification_;
    }

    public static final int BROADCAST_PERMISSIONS_FIELD_NUMBER = 12000;
    private int broadcastPermissions_ = 0;
    /**
     * <code>optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;Permissions", (.setting_default_int) = 1];</code>
     * @return Whether the broadcastPermissions field is set.
     */
    @java.lang.Override public boolean hasBroadcastPermissions() {
      return ((bitField2_ & 0x00080000) != 0);
    }
    /**
     * <code>optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;Permissions", (.setting_default_int) = 1];</code>
     * @return The broadcastPermissions.
     */
    @java.lang.Override public Enums.EBroadcastPermission getBroadcastPermissions() {
      Enums.EBroadcastPermission result = Enums.EBroadcastPermission.forNumber(broadcastPermissions_);
      return result == null ? Enums.EBroadcastPermission.k_EBroadcastPermissionDisabled : result;
    }

    public static final int BROADCAST_OUTPUT_WIDTH_FIELD_NUMBER = 12001;
    private int broadcastOutputWidth_ = 0;
    /**
     * <code>optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputWidth"];</code>
     * @return Whether the broadcastOutputWidth field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastOutputWidth() {
      return ((bitField2_ & 0x00100000) != 0);
    }
    /**
     * <code>optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputWidth"];</code>
     * @return The broadcastOutputWidth.
     */
    @java.lang.Override
    public int getBroadcastOutputWidth() {
      return broadcastOutputWidth_;
    }

    public static final int BROADCAST_OUTPUT_HEIGHT_FIELD_NUMBER = 12002;
    private int broadcastOutputHeight_ = 0;
    /**
     * <code>optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputHeight"];</code>
     * @return Whether the broadcastOutputHeight field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastOutputHeight() {
      return ((bitField2_ & 0x00200000) != 0);
    }
    /**
     * <code>optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputHeight"];</code>
     * @return The broadcastOutputHeight.
     */
    @java.lang.Override
    public int getBroadcastOutputHeight() {
      return broadcastOutputHeight_;
    }

    public static final int BROADCAST_BITRATE_FIELD_NUMBER = 12003;
    private int broadcastBitrate_ = 0;
    /**
     * <code>optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;MaxKbps"];</code>
     * @return Whether the broadcastBitrate field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastBitrate() {
      return ((bitField2_ & 0x00400000) != 0);
    }
    /**
     * <code>optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;MaxKbps"];</code>
     * @return The broadcastBitrate.
     */
    @java.lang.Override
    public int getBroadcastBitrate() {
      return broadcastBitrate_;
    }

    public static final int BROADCAST_ENCODING_OPTION_FIELD_NUMBER = 12004;
    private int broadcastEncodingOption_ = 0;
    /**
     * <code>optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;EncoderSetting"];</code>
     * @return Whether the broadcastEncodingOption field is set.
     */
    @java.lang.Override public boolean hasBroadcastEncodingOption() {
      return ((bitField2_ & 0x00800000) != 0);
    }
    /**
     * <code>optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;EncoderSetting"];</code>
     * @return The broadcastEncodingOption.
     */
    @java.lang.Override public Enums.EBroadcastEncoderSetting getBroadcastEncodingOption() {
      Enums.EBroadcastEncoderSetting result = Enums.EBroadcastEncoderSetting.forNumber(broadcastEncodingOption_);
      return result == null ? Enums.EBroadcastEncoderSetting.k_EBroadcastEncoderBestQuality : result;
    }

    public static final int BROADCAST_RECORD_ALL_VIDEO_FIELD_NUMBER = 12005;
    private boolean broadcastRecordAllVideo_ = false;
    /**
     * <code>optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;IncludeDesktop"];</code>
     * @return Whether the broadcastRecordAllVideo field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastRecordAllVideo() {
      return ((bitField2_ & 0x01000000) != 0);
    }
    /**
     * <code>optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;IncludeDesktop"];</code>
     * @return The broadcastRecordAllVideo.
     */
    @java.lang.Override
    public boolean getBroadcastRecordAllVideo() {
      return broadcastRecordAllVideo_;
    }

    public static final int BROADCAST_RECORD_ALL_AUDIO_FIELD_NUMBER = 12006;
    private boolean broadcastRecordAllAudio_ = false;
    /**
     * <code>optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordSystemAudio"];</code>
     * @return Whether the broadcastRecordAllAudio field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastRecordAllAudio() {
      return ((bitField2_ & 0x02000000) != 0);
    }
    /**
     * <code>optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordSystemAudio"];</code>
     * @return The broadcastRecordAllAudio.
     */
    @java.lang.Override
    public boolean getBroadcastRecordAllAudio() {
      return broadcastRecordAllAudio_;
    }

    public static final int BROADCAST_RECORD_MICROPHONE_FIELD_NUMBER = 12007;
    private boolean broadcastRecordMicrophone_ = false;
    /**
     * <code>optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordMic"];</code>
     * @return Whether the broadcastRecordMicrophone field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastRecordMicrophone() {
      return ((bitField2_ & 0x04000000) != 0);
    }
    /**
     * <code>optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordMic"];</code>
     * @return The broadcastRecordMicrophone.
     */
    @java.lang.Override
    public boolean getBroadcastRecordMicrophone() {
      return broadcastRecordMicrophone_;
    }

    public static final int BROADCAST_SHOW_UPLOAD_STATS_FIELD_NUMBER = 12008;
    private boolean broadcastShowUploadStats_ = false;
    /**
     * <code>optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowDebugInfo"];</code>
     * @return Whether the broadcastShowUploadStats field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastShowUploadStats() {
      return ((bitField2_ & 0x08000000) != 0);
    }
    /**
     * <code>optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowDebugInfo"];</code>
     * @return The broadcastShowUploadStats.
     */
    @java.lang.Override
    public boolean getBroadcastShowUploadStats() {
      return broadcastShowUploadStats_;
    }

    public static final int BROADCAST_SHOW_LIVE_REMINDER_FIELD_NUMBER = 12009;
    private boolean broadcastShowLiveReminder_ = false;
    /**
     * <code>optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowReminder", (.setting_default_bool) = true];</code>
     * @return Whether the broadcastShowLiveReminder field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastShowLiveReminder() {
      return ((bitField2_ & 0x10000000) != 0);
    }
    /**
     * <code>optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowReminder", (.setting_default_bool) = true];</code>
     * @return The broadcastShowLiveReminder.
     */
    @java.lang.Override
    public boolean getBroadcastShowLiveReminder() {
      return broadcastShowLiveReminder_;
    }

    public static final int BROADCAST_CHAT_CORNER_FIELD_NUMBER = 12010;
    private int broadcastChatCorner_ = 0;
    /**
     * <code>optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowChat", (.setting_default_int) = 1];</code>
     * @return Whether the broadcastChatCorner field is set.
     */
    @java.lang.Override
    public boolean hasBroadcastChatCorner() {
      return ((bitField2_ & 0x20000000) != 0);
    }
    /**
     * <code>optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowChat", (.setting_default_int) = 1];</code>
     * @return The broadcastChatCorner.
     */
    @java.lang.Override
    public int getBroadcastChatCorner() {
      return broadcastChatCorner_;
    }

    public static final int STEAM_INPUT_CONFIGURATOR_ERROR_MSG_ENABLE_FIELD_NUMBER = 14001;
    private boolean steamInputConfiguratorErrorMsgEnable_ = false;
    /**
     * <code>optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];</code>
     * @return Whether the steamInputConfiguratorErrorMsgEnable field is set.
     */
    @java.lang.Override
    public boolean hasSteamInputConfiguratorErrorMsgEnable() {
      return ((bitField2_ & 0x40000000) != 0);
    }
    /**
     * <code>optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];</code>
     * @return The steamInputConfiguratorErrorMsgEnable.
     */
    @java.lang.Override
    public boolean getSteamInputConfiguratorErrorMsgEnable() {
      return steamInputConfiguratorErrorMsgEnable_;
    }

    public static final int CONTROLLER_GUIDE_BUTTON_FOCUS_STEAM_FIELD_NUMBER = 14002;
    private boolean controllerGuideButtonFocusSteam_ = false;
    /**
     * <code>optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];</code>
     * @return Whether the controllerGuideButtonFocusSteam field is set.
     */
    @java.lang.Override
    public boolean hasControllerGuideButtonFocusSteam() {
      return ((bitField2_ & 0x80000000) != 0);
    }
    /**
     * <code>optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];</code>
     * @return The controllerGuideButtonFocusSteam.
     */
    @java.lang.Override
    public boolean getControllerGuideButtonFocusSteam() {
      return controllerGuideButtonFocusSteam_;
    }

    public static final int CONTROLLER_PS_SUPPORT_FIELD_NUMBER = 14003;
    private int controllerPsSupport_ = 0;
    /**
     * <code>optional int32 controller_ps_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];</code>
     * @return Whether the controllerPsSupport field is set.
     */
    @java.lang.Override
    public boolean hasControllerPsSupport() {
      return ((bitField3_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 controller_ps_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];</code>
     * @return The controllerPsSupport.
     */
    @java.lang.Override
    public int getControllerPsSupport() {
      return controllerPsSupport_;
    }

    public static final int CONTROLLER_XBOX_SUPPORT_FIELD_NUMBER = 14004;
    private boolean controllerXboxSupport_ = false;
    /**
     * <code>optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];</code>
     * @return Whether the controllerXboxSupport field is set.
     */
    @java.lang.Override
    public boolean hasControllerXboxSupport() {
      return ((bitField3_ & 0x00000002) != 0);
    }
    /**
     * <code>optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];</code>
     * @return The controllerXboxSupport.
     */
    @java.lang.Override
    public boolean getControllerXboxSupport() {
      return controllerXboxSupport_;
    }

    public static final int CONTROLLER_XBOX_DRIVER_FIELD_NUMBER = 14005;
    private boolean controllerXboxDriver_ = false;
    /**
     * <code>optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];</code>
     * @return Whether the controllerXboxDriver field is set.
     */
    @java.lang.Override
    public boolean hasControllerXboxDriver() {
      return ((bitField3_ & 0x00000004) != 0);
    }
    /**
     * <code>optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];</code>
     * @return The controllerXboxDriver.
     */
    @java.lang.Override
    public boolean getControllerXboxDriver() {
      return controllerXboxDriver_;
    }

    public static final int CONTROLLER_SWITCH_SUPPORT_FIELD_NUMBER = 14006;
    private boolean controllerSwitchSupport_ = false;
    /**
     * <code>optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];</code>
     * @return Whether the controllerSwitchSupport field is set.
     */
    @java.lang.Override
    public boolean hasControllerSwitchSupport() {
      return ((bitField3_ & 0x00000008) != 0);
    }
    /**
     * <code>optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];</code>
     * @return The controllerSwitchSupport.
     */
    @java.lang.Override
    public boolean getControllerSwitchSupport() {
      return controllerSwitchSupport_;
    }

    public static final int CONTROLLER_GENERIC_SUPPORT_FIELD_NUMBER = 14007;
    private boolean controllerGenericSupport_ = false;
    /**
     * <code>optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];</code>
     * @return Whether the controllerGenericSupport field is set.
     */
    @java.lang.Override
    public boolean hasControllerGenericSupport() {
      return ((bitField3_ & 0x00000010) != 0);
    }
    /**
     * <code>optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];</code>
     * @return The controllerGenericSupport.
     */
    @java.lang.Override
    public boolean getControllerGenericSupport() {
      return controllerGenericSupport_;
    }

    public static final int CONTROLLER_POWER_OFF_TIMEOUT_FIELD_NUMBER = 14008;
    private int controllerPowerOffTimeout_ = 0;
    /**
     * <code>optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];</code>
     * @return Whether the controllerPowerOffTimeout field is set.
     */
    @java.lang.Override
    public boolean hasControllerPowerOffTimeout() {
      return ((bitField3_ & 0x00000020) != 0);
    }
    /**
     * <code>optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];</code>
     * @return The controllerPowerOffTimeout.
     */
    @java.lang.Override
    public int getControllerPowerOffTimeout() {
      return controllerPowerOffTimeout_;
    }

    public static final int TURN_OFF_CONTROLLER_ON_EXIT_FIELD_NUMBER = 14009;
    private boolean turnOffControllerOnExit_ = false;
    /**
     * <code>optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];</code>
     * @return Whether the turnOffControllerOnExit field is set.
     */
    @java.lang.Override
    public boolean hasTurnOffControllerOnExit() {
      return ((bitField3_ & 0x00000040) != 0);
    }
    /**
     * <code>optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];</code>
     * @return The turnOffControllerOnExit.
     */
    @java.lang.Override
    public boolean getTurnOffControllerOnExit() {
      return turnOffControllerOnExit_;
    }

    public static final int CONTROLLER_COMBINE_NINTENDO_JOYCONS_FIELD_NUMBER = 14010;
    private boolean controllerCombineNintendoJoycons_ = false;
    /**
     * <code>optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the controllerCombineNintendoJoycons field is set.
     */
    @java.lang.Override
    public boolean hasControllerCombineNintendoJoycons() {
      return ((bitField3_ & 0x00000080) != 0);
    }
    /**
     * <code>optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The controllerCombineNintendoJoycons.
     */
    @java.lang.Override
    public boolean getControllerCombineNintendoJoycons() {
      return controllerCombineNintendoJoycons_;
    }

    public static final int STARTUP_MOVIE_ID_FIELD_NUMBER = 16000;
    private long startupMovieId_ = 0L;
    /**
     * <code>optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];</code>
     * @return Whether the startupMovieId field is set.
     */
    @java.lang.Override
    public boolean hasStartupMovieId() {
      return ((bitField3_ & 0x00000100) != 0);
    }
    /**
     * <code>optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];</code>
     * @return The startupMovieId.
     */
    @java.lang.Override
    public long getStartupMovieId() {
      return startupMovieId_;
    }

    public static final int STARTUP_MOVIE_LOCAL_PATH_FIELD_NUMBER = 16001;
    @SuppressWarnings("serial")
    private volatile java.lang.Object startupMovieLocalPath_ = "";
    /**
     * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
     * @return Whether the startupMovieLocalPath field is set.
     */
    @java.lang.Override
    public boolean hasStartupMovieLocalPath() {
      return ((bitField3_ & 0x00000200) != 0);
    }
    /**
     * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
     * @return The startupMovieLocalPath.
     */
    @java.lang.Override
    public java.lang.String getStartupMovieLocalPath() {
      java.lang.Object ref = startupMovieLocalPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          startupMovieLocalPath_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
     * @return The bytes for startupMovieLocalPath.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStartupMovieLocalPathBytes() {
      java.lang.Object ref = startupMovieLocalPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        startupMovieLocalPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STARTUP_MOVIE_SHUFFLE_FIELD_NUMBER = 16002;
    private boolean startupMovieShuffle_ = false;
    /**
     * <code>optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];</code>
     * @return Whether the startupMovieShuffle field is set.
     */
    @java.lang.Override
    public boolean hasStartupMovieShuffle() {
      return ((bitField3_ & 0x00000400) != 0);
    }
    /**
     * <code>optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];</code>
     * @return The startupMovieShuffle.
     */
    @java.lang.Override
    public boolean getStartupMovieShuffle() {
      return startupMovieShuffle_;
    }

    public static final int STARTUP_MOVIE_USED_FOR_RESUME_FIELD_NUMBER = 16003;
    private boolean startupMovieUsedForResume_ = false;
    /**
     * <code>optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];</code>
     * @return Whether the startupMovieUsedForResume field is set.
     */
    @java.lang.Override
    public boolean hasStartupMovieUsedForResume() {
      return ((bitField3_ & 0x00000800) != 0);
    }
    /**
     * <code>optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];</code>
     * @return The startupMovieUsedForResume.
     */
    @java.lang.Override
    public boolean getStartupMovieUsedForResume() {
      return startupMovieUsedForResume_;
    }

    public static final int GAME_NOTES_ENABLE_SPELLCHECK_FIELD_NUMBER = 17001;
    private boolean gameNotesEnableSpellcheck_ = false;
    /**
     * <code>optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];</code>
     * @return Whether the gameNotesEnableSpellcheck field is set.
     */
    @java.lang.Override
    public boolean hasGameNotesEnableSpellcheck() {
      return ((bitField3_ & 0x00001000) != 0);
    }
    /**
     * <code>optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];</code>
     * @return The gameNotesEnableSpellcheck.
     */
    @java.lang.Override
    public boolean getGameNotesEnableSpellcheck() {
      return gameNotesEnableSpellcheck_;
    }

    public static final int SCREENSHOT_ITEMS_PER_ROW_FIELD_NUMBER = 18000;
    private int screenshotItemsPerRow_ = 0;
    /**
     * <code>optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];</code>
     * @return Whether the screenshotItemsPerRow field is set.
     */
    @java.lang.Override
    public boolean hasScreenshotItemsPerRow() {
      return ((bitField3_ & 0x00002000) != 0);
    }
    /**
     * <code>optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];</code>
     * @return The screenshotItemsPerRow.
     */
    @java.lang.Override
    public int getScreenshotItemsPerRow() {
      return screenshotItemsPerRow_;
    }

    public static final int G_BACKGROUND_ENABLED_FIELD_NUMBER = 18200;
    private boolean gBackgroundEnabled_ = false;
    /**
     * <code>optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundEnabled field is set.
     */
    @java.lang.Override
    public boolean hasGBackgroundEnabled() {
      return ((bitField3_ & 0x00004000) != 0);
    }
    /**
     * <code>optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundEnabled.
     */
    @java.lang.Override
    public boolean getGBackgroundEnabled() {
      return gBackgroundEnabled_;
    }

    public static final int G_BACKGROUND_PATH_FIELD_NUMBER = 18201;
    @SuppressWarnings("serial")
    private volatile java.lang.Object gBackgroundPath_ = "";
    /**
     * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundPath field is set.
     */
    @java.lang.Override
    public boolean hasGBackgroundPath() {
      return ((bitField3_ & 0x00008000) != 0);
    }
    /**
     * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundPath.
     */
    @java.lang.Override
    public java.lang.String getGBackgroundPath() {
      java.lang.Object ref = gBackgroundPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          gBackgroundPath_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for gBackgroundPath.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGBackgroundPathBytes() {
      java.lang.Object ref = gBackgroundPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        gBackgroundPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int G_BACKGROUND_MAX_KEEP_FIELD_NUMBER = 18202;
    @SuppressWarnings("serial")
    private volatile java.lang.Object gBackgroundMaxKeep_ = "";
    /**
     * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundMaxKeep field is set.
     */
    @java.lang.Override
    public boolean hasGBackgroundMaxKeep() {
      return ((bitField3_ & 0x00010000) != 0);
    }
    /**
     * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundMaxKeep.
     */
    @java.lang.Override
    public java.lang.String getGBackgroundMaxKeep() {
      java.lang.Object ref = gBackgroundMaxKeep_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          gBackgroundMaxKeep_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The bytes for gBackgroundMaxKeep.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGBackgroundMaxKeepBytes() {
      java.lang.Object ref = gBackgroundMaxKeep_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        gBackgroundMaxKeep_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int G_BACKGROUND_TIME_RESOLUTION_FIELD_NUMBER = 18203;
    private int gBackgroundTimeResolution_ = 0;
    /**
     * <code>optional int32 g_background_time_resolution = 18203 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundTimeResolution field is set.
     */
    @java.lang.Override
    public boolean hasGBackgroundTimeResolution() {
      return ((bitField3_ & 0x00020000) != 0);
    }
    /**
     * <code>optional int32 g_background_time_resolution = 18203 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundTimeResolution.
     */
    @java.lang.Override
    public int getGBackgroundTimeResolution() {
      return gBackgroundTimeResolution_;
    }

    public static final int G_BACKGROUND_DEVMODE_FIELD_NUMBER = 18206;
    private boolean gBackgroundDevmode_ = false;
    /**
     * <code>optional bool g_background_devmode = 18206 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundDevmode field is set.
     */
    @java.lang.Override
    public boolean hasGBackgroundDevmode() {
      return ((bitField3_ & 0x00040000) != 0);
    }
    /**
     * <code>optional bool g_background_devmode = 18206 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundDevmode.
     */
    @java.lang.Override
    public boolean getGBackgroundDevmode() {
      return gBackgroundDevmode_;
    }

    public static final int G_BACKGROUND_MK_FIELD_NUMBER = 18207;
    private SteammessagesClientsettings.CMsgHotkey gBackgroundMk_;
    /**
     * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundMk field is set.
     */
    @java.lang.Override
    public boolean hasGBackgroundMk() {
      return ((bitField3_ & 0x00080000) != 0);
    }
    /**
     * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundMk.
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkey getGBackgroundMk() {
      return gBackgroundMk_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : gBackgroundMk_;
    }
    /**
     * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkeyOrBuilder getGBackgroundMkOrBuilder() {
      return gBackgroundMk_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : gBackgroundMk_;
    }

    public static final int G_BACKGROUND_TG_FIELD_NUMBER = 18208;
    private SteammessagesClientsettings.CMsgHotkey gBackgroundTg_;
    /**
     * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundTg field is set.
     */
    @java.lang.Override
    public boolean hasGBackgroundTg() {
      return ((bitField3_ & 0x00100000) != 0);
    }
    /**
     * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundTg.
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkey getGBackgroundTg() {
      return gBackgroundTg_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : gBackgroundTg_;
    }
    /**
     * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     */
    @java.lang.Override
    public SteammessagesClientsettings.CMsgHotkeyOrBuilder getGBackgroundTgOrBuilder() {
      return gBackgroundTg_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : gBackgroundTg_;
    }

    public static final int G_BACKGROUND_A_M_FIELD_NUMBER = 18209;
    private boolean gBackgroundAM_ = false;
    /**
     * <code>optional bool g_background_a_m = 18209 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the gBackgroundAM field is set.
     */
    @java.lang.Override
    public boolean hasGBackgroundAM() {
      return ((bitField3_ & 0x00200000) != 0);
    }
    /**
     * <code>optional bool g_background_a_m = 18209 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The gBackgroundAM.
     */
    @java.lang.Override
    public boolean getGBackgroundAM() {
      return gBackgroundAM_;
    }

    public static final int SHOW_TIMESTAMPS_IN_CONSOLE_FIELD_NUMBER = 20000;
    private boolean showTimestampsInConsole_ = false;
    /**
     * <code>optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer&#92;&#92;ShowTimestampsInConsole"];</code>
     * @return Whether the showTimestampsInConsole field is set.
     */
    @java.lang.Override
    public boolean hasShowTimestampsInConsole() {
      return ((bitField3_ & 0x00400000) != 0);
    }
    /**
     * <code>optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer&#92;&#92;ShowTimestampsInConsole"];</code>
     * @return The showTimestampsInConsole.
     */
    @java.lang.Override
    public boolean getShowTimestampsInConsole() {
      return showTimestampsInConsole_;
    }

    public static final int FORCE_OOBE_FIELD_NUMBER = 20001;
    private boolean forceOobe_ = false;
    /**
     * <code>optional bool force_oobe = 20001 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ForceOOBE"];</code>
     * @return Whether the forceOobe field is set.
     */
    @java.lang.Override
    public boolean hasForceOobe() {
      return ((bitField3_ & 0x00800000) != 0);
    }
    /**
     * <code>optional bool force_oobe = 20001 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ForceOOBE"];</code>
     * @return The forceOobe.
     */
    @java.lang.Override
    public boolean getForceOobe() {
      return forceOobe_;
    }

    public static final int OVERRIDE_BROWSER_COMPOSER_MODE_FIELD_NUMBER = 20002;
    private int overrideBrowserComposerMode_ = 0;
    /**
     * <code>optional int32 override_browser_composer_mode = 20002 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the overrideBrowserComposerMode field is set.
     */
    @java.lang.Override
    public boolean hasOverrideBrowserComposerMode() {
      return ((bitField3_ & 0x01000000) != 0);
    }
    /**
     * <code>optional int32 override_browser_composer_mode = 20002 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The overrideBrowserComposerMode.
     */
    @java.lang.Override
    public int getOverrideBrowserComposerMode() {
      return overrideBrowserComposerMode_;
    }

    public static final int CEF_REMOTE_DEBUGGING_ENABLED_FIELD_NUMBER = 20003;
    private boolean cefRemoteDebuggingEnabled_ = false;
    /**
     * <code>optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return Whether the cefRemoteDebuggingEnabled field is set.
     */
    @java.lang.Override
    public boolean hasCefRemoteDebuggingEnabled() {
      return ((bitField3_ & 0x02000000) != 0);
    }
    /**
     * <code>optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
     * @return The cefRemoteDebuggingEnabled.
     */
    @java.lang.Override
    public boolean getCefRemoteDebuggingEnabled() {
      return cefRemoteDebuggingEnabled_;
    }

    public static final int FORCE_DECK_PERF_TAB_FIELD_NUMBER = 20004;
    private boolean forceDeckPerfTab_ = false;
    /**
     * <code>optional bool force_deck_perf_tab = 20004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];</code>
     * @return Whether the forceDeckPerfTab field is set.
     */
    @java.lang.Override
    public boolean hasForceDeckPerfTab() {
      return ((bitField3_ & 0x04000000) != 0);
    }
    /**
     * <code>optional bool force_deck_perf_tab = 20004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];</code>
     * @return The forceDeckPerfTab.
     */
    @java.lang.Override
    public boolean getForceDeckPerfTab() {
      return forceDeckPerfTab_;
    }

    public static final int FORCE_FAKE_MANDATORY_UPDATE_FIELD_NUMBER = 20005;
    private boolean forceFakeMandatoryUpdate_ = false;
    /**
     * <code>optional bool force_fake_mandatory_update = 20005 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];</code>
     * @return Whether the forceFakeMandatoryUpdate field is set.
     */
    @java.lang.Override
    public boolean hasForceFakeMandatoryUpdate() {
      return ((bitField3_ & 0x08000000) != 0);
    }
    /**
     * <code>optional bool force_fake_mandatory_update = 20005 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];</code>
     * @return The forceFakeMandatoryUpdate.
     */
    @java.lang.Override
    public boolean getForceFakeMandatoryUpdate() {
      return forceFakeMandatoryUpdate_;
    }

    public static final int GAMESCOPE_HDR_VISUALIZATION_FIELD_NUMBER = 21001;
    private int gamescopeHdrVisualization_ = 0;
    /**
     * <code>optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = k_EHDRVisualization_None, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];</code>
     * @return Whether the gamescopeHdrVisualization field is set.
     */
    @java.lang.Override public boolean hasGamescopeHdrVisualization() {
      return ((bitField3_ & 0x10000000) != 0);
    }
    /**
     * <code>optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = k_EHDRVisualization_None, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];</code>
     * @return The gamescopeHdrVisualization.
     */
    @java.lang.Override public Enums.EHDRVisualization getGamescopeHdrVisualization() {
      Enums.EHDRVisualization result = Enums.EHDRVisualization.forNumber(gamescopeHdrVisualization_);
      return result == null ? Enums.EHDRVisualization.k_EHDRVisualization_None : result;
    }

    public static final int GAMESCOPE_APP_TARGET_FRAMERATE_FIELD_NUMBER = 21002;
    private int gamescopeAppTargetFramerate_ = 0;
    /**
     * <code>optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return Whether the gamescopeAppTargetFramerate field is set.
     */
    @java.lang.Override
    public boolean hasGamescopeAppTargetFramerate() {
      return ((bitField3_ & 0x20000000) != 0);
    }
    /**
     * <code>optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return The gamescopeAppTargetFramerate.
     */
    @java.lang.Override
    public int getGamescopeAppTargetFramerate() {
      return gamescopeAppTargetFramerate_;
    }

    public static final int GAMESCOPE_ENABLE_APP_TARGET_FRAMERATE_FIELD_NUMBER = 21003;
    private boolean gamescopeEnableAppTargetFramerate_ = false;
    /**
     * <code>optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];</code>
     * @return Whether the gamescopeEnableAppTargetFramerate field is set.
     */
    @java.lang.Override
    public boolean hasGamescopeEnableAppTargetFramerate() {
      return ((bitField3_ & 0x40000000) != 0);
    }
    /**
     * <code>optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];</code>
     * @return The gamescopeEnableAppTargetFramerate.
     */
    @java.lang.Override
    public boolean getGamescopeEnableAppTargetFramerate() {
      return gamescopeEnableAppTargetFramerate_;
    }

    public static final int GAMESCOPE_DISABLE_FRAMELIMIT_FIELD_NUMBER = 21004;
    private boolean gamescopeDisableFramelimit_ = false;
    /**
     * <code>optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return Whether the gamescopeDisableFramelimit field is set.
     */
    @java.lang.Override
    public boolean hasGamescopeDisableFramelimit() {
      return ((bitField3_ & 0x80000000) != 0);
    }
    /**
     * <code>optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return The gamescopeDisableFramelimit.
     */
    @java.lang.Override
    public boolean getGamescopeDisableFramelimit() {
      return gamescopeDisableFramelimit_;
    }

    public static final int GAMESCOPE_DISPLAY_REFRESH_RATE_FIELD_NUMBER = 21005;
    private int gamescopeDisplayRefreshRate_ = 0;
    /**
     * <code>optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return Whether the gamescopeDisplayRefreshRate field is set.
     */
    @java.lang.Override
    public boolean hasGamescopeDisplayRefreshRate() {
      return ((bitField4_ & 0x00000001) != 0);
    }
    /**
     * <code>optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
     * @return The gamescopeDisplayRefreshRate.
     */
    @java.lang.Override
    public int getGamescopeDisplayRefreshRate() {
      return gamescopeDisplayRefreshRate_;
    }

    public static final int GAMESCOPE_USE_GAME_REFRESH_RATE_IN_STEAM_FIELD_NUMBER = 21006;
    private boolean gamescopeUseGameRefreshRateInSteam_ = false;
    /**
     * <code>optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];</code>
     * @return Whether the gamescopeUseGameRefreshRateInSteam field is set.
     */
    @java.lang.Override
    public boolean hasGamescopeUseGameRefreshRateInSteam() {
      return ((bitField4_ & 0x00000002) != 0);
    }
    /**
     * <code>optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];</code>
     * @return The gamescopeUseGameRefreshRateInSteam.
     */
    @java.lang.Override
    public boolean getGamescopeUseGameRefreshRateInSteam() {
      return gamescopeUseGameRefreshRateInSteam_;
    }

    public static final int STEAMOS_STATUS_LED_BRIGHTNESS_FIELD_NUMBER = 22000;
    private int steamosStatusLedBrightness_ = 0;
    /**
     * <code>optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];</code>
     * @return Whether the steamosStatusLedBrightness field is set.
     */
    @java.lang.Override
    public boolean hasSteamosStatusLedBrightness() {
      return ((bitField4_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];</code>
     * @return The steamosStatusLedBrightness.
     */
    @java.lang.Override
    public int getSteamosStatusLedBrightness() {
      return steamosStatusLedBrightness_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, noSavePersonalInfo_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(2, oobeTestModeEnabled_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(3, inClientBeta_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeBool(4, isSteamSideloaded_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, preferredMonitor_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeBool(6, steamCefGpuBlocklistDisabled_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeBool(7, bigpictureWindowed_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, displayName_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeBool(9, isExternalDisplay_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeFloat(10, steamOsUnderscanLevel_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeBool(11, steamOsUnderscanEnabled_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeFloat(12, minScaleFactor_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeFloat(13, maxScaleFactor_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeFloat(14, autoScaleFactor_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        output.writeBool(16, smallMode_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        output.writeBool(19, skipSteamvrInstallDialog_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        output.writeBool(20, alwaysShowUserChooser_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        output.writeBool(3000, showFamilySharingNotifications_);
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        output.writeInt32(4000, overlayFpsCounterCorner_);
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        output.writeBool(4001, overlayFpsCounterHighContrast_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        output.writeMessage(4002, getOverlayKey());
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        output.writeMessage(4003, getScreenshotKey());
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        output.writeBool(4004, enableOverlay_);
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        output.writeBool(4006, enableScreenshotNotification_);
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        output.writeBool(4007, enableScreenshotSound_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        output.writeBool(4008, saveUncompressedScreenshots_);
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4009, screenshotsPath_);
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        output.writeInt32(4010, defaultPingRate_);
      }
      if (((bitField0_ & 0x10000000) != 0)) {
        output.writeInt32(4011, serverPingRate_);
      }
      if (((bitField0_ & 0x20000000) != 0)) {
        output.writeInt32(4012, steamNetworkingShareIp_);
      }
      if (((bitField0_ & 0x40000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4013, webBrowserHome_);
      }
      if (((bitField0_ & 0x80000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4014, voiceMicDeviceName_);
      }
      if (((bitField1_ & 0x00000001) != 0)) {
        output.writeFloat(4015, voiceMicInputGain_);
      }
      if (((bitField1_ & 0x00000002) != 0)) {
        output.writeFloat(4016, voiceSpeakerOutputGain_);
      }
      if (((bitField1_ & 0x00000004) != 0)) {
        output.writeInt32(4017, voicePushToTalkSetting_);
      }
      if (((bitField1_ & 0x00000008) != 0)) {
        output.writeMessage(4018, getVoicePushToTalkKey());
      }
      if (((bitField1_ & 0x00000010) != 0)) {
        output.writeBool(4019, overlayToolbarListView_);
      }
      if (((bitField1_ & 0x00000020) != 0)) {
        output.writeBool(4020, alwaysUseGamepaduiOverlay_);
      }
      if (((bitField1_ & 0x00000040) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4021, overlayTabs_);
      }
      if (((bitField1_ & 0x00000080) != 0)) {
        output.writeBool(4022, overlayScaleInterface_);
      }
      if (((bitField1_ & 0x00000100) != 0)) {
        output.writeBool(4023, overlayRestoreBrowserTabs_);
      }
      if (((bitField1_ & 0x00000200) != 0)) {
        output.writeBool(5000, smoothScrollWebviews_);
      }
      if (((bitField1_ & 0x00000400) != 0)) {
        output.writeBool(5001, enableGpuAcceleratedWebviews_);
      }
      if (((bitField1_ & 0x00000800) != 0)) {
        output.writeBool(5003, enableHardwareVideoDecoding_);
      }
      if (((bitField1_ & 0x00001000) != 0)) {
        output.writeBool(5004, runAtStartup_);
      }
      if (((bitField1_ & 0x00002000) != 0)) {
        output.writeBool(5005, enableDpiScaling_);
      }
      if (((bitField1_ & 0x00004000) != 0)) {
        output.writeBool(5006, enableMarketingMessages_);
      }
      if (((bitField1_ & 0x00008000) != 0)) {
        output.writeBool(5007, startInBigPictureMode_);
      }
      if (((bitField1_ & 0x00010000) != 0)) {
        output.writeUInt32(5008, jumplistFlags_);
      }
      if (((bitField1_ & 0x00020000) != 0)) {
        output.writeBool(5009, enableUiSounds_);
      }
      if (((bitField1_ & 0x00040000) != 0)) {
        output.writeBool(6000, disableAllToasts_);
      }
      if (((bitField1_ & 0x00080000) != 0)) {
        output.writeBool(6001, disableToastsInGame_);
      }
      if (((bitField1_ & 0x00100000) != 0)) {
        output.writeBool(6002, playSoundOnToast_);
      }
      if (((bitField1_ & 0x00200000) != 0)) {
        output.writeInt32(7000, libraryDisplaySize_);
      }
      if (((bitField1_ & 0x00400000) != 0)) {
        output.writeBool(7001, libraryWhatsNewShowOnlyProductUpdates_);
      }
      if (((bitField1_ & 0x00800000) != 0)) {
        output.writeBool(7002, showStoreContentOnHome_);
      }
      if (((bitField1_ & 0x01000000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7003, startPage_);
      }
      if (((bitField1_ & 0x02000000) != 0)) {
        output.writeBool(7004, libraryLowBandwidthMode_);
      }
      if (((bitField1_ & 0x04000000) != 0)) {
        output.writeBool(7005, libraryLowPerfMode_);
      }
      if (((bitField1_ & 0x08000000) != 0)) {
        output.writeBool(7006, libraryDisableCommunityContent_);
      }
      if (((bitField1_ & 0x10000000) != 0)) {
        output.writeBool(7007, libraryDisplayIconInGameList_);
      }
      if (((bitField1_ & 0x20000000) != 0)) {
        output.writeBool(7008, readyToPlayIncludesStreaming_);
      }
      if (((bitField1_ & 0x40000000) != 0)) {
        output.writeBool(7009, showSteamDeckInfo_);
      }
      if (((bitField1_ & 0x80000000) != 0)) {
        output.writeBool(8000, enableShaderPrecache_);
      }
      if (((bitField2_ & 0x00000001) != 0)) {
        output.writeBool(8001, enableShaderBackgroundProcessing_);
      }
      if (((bitField2_ & 0x00000002) != 0)) {
        output.writeUInt64(8002, shaderPrecachedSize_);
      }
      if (((bitField2_ & 0x00000004) != 0)) {
        output.writeBool(8003, needsSteamServiceRepair_);
      }
      if (((bitField2_ & 0x00000008) != 0)) {
        output.writeInt32(8004, downloadPeerContent_);
      }
      if (((bitField2_ & 0x00000010) != 0)) {
        output.writeBool(8005, downloadRateBitsPerS_);
      }
      if (((bitField2_ & 0x00000020) != 0)) {
        output.writeBool(8006, restrictAutoUpdates_);
      }
      if (((bitField2_ & 0x00000040) != 0)) {
        output.writeInt32(8007, restrictAutoUpdatesStart_);
      }
      if (((bitField2_ & 0x00000080) != 0)) {
        output.writeInt32(8008, restrictAutoUpdatesEnd_);
      }
      if (((bitField2_ & 0x00000100) != 0)) {
        output.writeInt32(8009, downloadRegion_);
      }
      if (((bitField2_ & 0x00000200) != 0)) {
        output.writeBool(8010, downloadWhileAppRunning_);
      }
      if (((bitField2_ & 0x00000400) != 0)) {
        output.writeBool(8011, downloadThrottleWhileStreaming_);
      }
      if (((bitField2_ & 0x00000800) != 0)) {
        output.writeInt32(8012, downloadThrottleRate_);
      }
      if (((bitField2_ & 0x00001000) != 0)) {
        output.writeBool(10000, cloudEnabled_);
      }
      if (((bitField2_ & 0x00002000) != 0)) {
        output.writeBool(10001, showScreenshotManager_);
      }
      if (((bitField2_ & 0x00004000) != 0)) {
        output.writeInt32(11000, musicVolume_);
      }
      if (((bitField2_ & 0x00008000) != 0)) {
        output.writeBool(11001, musicPauseOnAppStart_);
      }
      if (((bitField2_ & 0x00010000) != 0)) {
        output.writeBool(11002, musicPauseOnVoiceChat_);
      }
      if (((bitField2_ & 0x00020000) != 0)) {
        output.writeBool(11003, musicDownloadHighQuality_);
      }
      if (((bitField2_ & 0x00040000) != 0)) {
        output.writeBool(11004, musicPlaylistNotification_);
      }
      if (((bitField2_ & 0x00080000) != 0)) {
        output.writeEnum(12000, broadcastPermissions_);
      }
      if (((bitField2_ & 0x00100000) != 0)) {
        output.writeInt32(12001, broadcastOutputWidth_);
      }
      if (((bitField2_ & 0x00200000) != 0)) {
        output.writeInt32(12002, broadcastOutputHeight_);
      }
      if (((bitField2_ & 0x00400000) != 0)) {
        output.writeInt32(12003, broadcastBitrate_);
      }
      if (((bitField2_ & 0x00800000) != 0)) {
        output.writeEnum(12004, broadcastEncodingOption_);
      }
      if (((bitField2_ & 0x01000000) != 0)) {
        output.writeBool(12005, broadcastRecordAllVideo_);
      }
      if (((bitField2_ & 0x02000000) != 0)) {
        output.writeBool(12006, broadcastRecordAllAudio_);
      }
      if (((bitField2_ & 0x04000000) != 0)) {
        output.writeBool(12007, broadcastRecordMicrophone_);
      }
      if (((bitField2_ & 0x08000000) != 0)) {
        output.writeBool(12008, broadcastShowUploadStats_);
      }
      if (((bitField2_ & 0x10000000) != 0)) {
        output.writeBool(12009, broadcastShowLiveReminder_);
      }
      if (((bitField2_ & 0x20000000) != 0)) {
        output.writeInt32(12010, broadcastChatCorner_);
      }
      if (((bitField2_ & 0x40000000) != 0)) {
        output.writeBool(14001, steamInputConfiguratorErrorMsgEnable_);
      }
      if (((bitField2_ & 0x80000000) != 0)) {
        output.writeBool(14002, controllerGuideButtonFocusSteam_);
      }
      if (((bitField3_ & 0x00000001) != 0)) {
        output.writeInt32(14003, controllerPsSupport_);
      }
      if (((bitField3_ & 0x00000002) != 0)) {
        output.writeBool(14004, controllerXboxSupport_);
      }
      if (((bitField3_ & 0x00000004) != 0)) {
        output.writeBool(14005, controllerXboxDriver_);
      }
      if (((bitField3_ & 0x00000008) != 0)) {
        output.writeBool(14006, controllerSwitchSupport_);
      }
      if (((bitField3_ & 0x00000010) != 0)) {
        output.writeBool(14007, controllerGenericSupport_);
      }
      if (((bitField3_ & 0x00000020) != 0)) {
        output.writeInt32(14008, controllerPowerOffTimeout_);
      }
      if (((bitField3_ & 0x00000040) != 0)) {
        output.writeBool(14009, turnOffControllerOnExit_);
      }
      if (((bitField3_ & 0x00000080) != 0)) {
        output.writeBool(14010, controllerCombineNintendoJoycons_);
      }
      if (((bitField3_ & 0x00000100) != 0)) {
        output.writeUInt64(16000, startupMovieId_);
      }
      if (((bitField3_ & 0x00000200) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 16001, startupMovieLocalPath_);
      }
      if (((bitField3_ & 0x00000400) != 0)) {
        output.writeBool(16002, startupMovieShuffle_);
      }
      if (((bitField3_ & 0x00000800) != 0)) {
        output.writeBool(16003, startupMovieUsedForResume_);
      }
      if (((bitField3_ & 0x00001000) != 0)) {
        output.writeBool(17001, gameNotesEnableSpellcheck_);
      }
      if (((bitField3_ & 0x00002000) != 0)) {
        output.writeInt32(18000, screenshotItemsPerRow_);
      }
      if (((bitField3_ & 0x00004000) != 0)) {
        output.writeBool(18200, gBackgroundEnabled_);
      }
      if (((bitField3_ & 0x00008000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 18201, gBackgroundPath_);
      }
      if (((bitField3_ & 0x00010000) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 18202, gBackgroundMaxKeep_);
      }
      if (((bitField3_ & 0x00020000) != 0)) {
        output.writeInt32(18203, gBackgroundTimeResolution_);
      }
      if (((bitField3_ & 0x00040000) != 0)) {
        output.writeBool(18206, gBackgroundDevmode_);
      }
      if (((bitField3_ & 0x00080000) != 0)) {
        output.writeMessage(18207, getGBackgroundMk());
      }
      if (((bitField3_ & 0x00100000) != 0)) {
        output.writeMessage(18208, getGBackgroundTg());
      }
      if (((bitField3_ & 0x00200000) != 0)) {
        output.writeBool(18209, gBackgroundAM_);
      }
      if (((bitField3_ & 0x00400000) != 0)) {
        output.writeBool(20000, showTimestampsInConsole_);
      }
      if (((bitField3_ & 0x00800000) != 0)) {
        output.writeBool(20001, forceOobe_);
      }
      if (((bitField3_ & 0x01000000) != 0)) {
        output.writeInt32(20002, overrideBrowserComposerMode_);
      }
      if (((bitField3_ & 0x02000000) != 0)) {
        output.writeBool(20003, cefRemoteDebuggingEnabled_);
      }
      if (((bitField3_ & 0x04000000) != 0)) {
        output.writeBool(20004, forceDeckPerfTab_);
      }
      if (((bitField3_ & 0x08000000) != 0)) {
        output.writeBool(20005, forceFakeMandatoryUpdate_);
      }
      if (((bitField3_ & 0x10000000) != 0)) {
        output.writeEnum(21001, gamescopeHdrVisualization_);
      }
      if (((bitField3_ & 0x20000000) != 0)) {
        output.writeInt32(21002, gamescopeAppTargetFramerate_);
      }
      if (((bitField3_ & 0x40000000) != 0)) {
        output.writeBool(21003, gamescopeEnableAppTargetFramerate_);
      }
      if (((bitField3_ & 0x80000000) != 0)) {
        output.writeBool(21004, gamescopeDisableFramelimit_);
      }
      if (((bitField4_ & 0x00000001) != 0)) {
        output.writeInt32(21005, gamescopeDisplayRefreshRate_);
      }
      if (((bitField4_ & 0x00000002) != 0)) {
        output.writeBool(21006, gamescopeUseGameRefreshRateInSteam_);
      }
      if (((bitField4_ & 0x00000004) != 0)) {
        output.writeInt32(22000, steamosStatusLedBrightness_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, noSavePersonalInfo_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, oobeTestModeEnabled_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, inClientBeta_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, isSteamSideloaded_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, preferredMonitor_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, steamCefGpuBlocklistDisabled_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, bigpictureWindowed_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, displayName_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isExternalDisplay_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, steamOsUnderscanLevel_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, steamOsUnderscanEnabled_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, minScaleFactor_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, maxScaleFactor_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, autoScaleFactor_);
      }
      if (((bitField0_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, smallMode_);
      }
      if (((bitField0_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, skipSteamvrInstallDialog_);
      }
      if (((bitField0_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20, alwaysShowUserChooser_);
      }
      if (((bitField0_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3000, showFamilySharingNotifications_);
      }
      if (((bitField0_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4000, overlayFpsCounterCorner_);
      }
      if (((bitField0_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4001, overlayFpsCounterHighContrast_);
      }
      if (((bitField0_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4002, getOverlayKey());
      }
      if (((bitField0_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4003, getScreenshotKey());
      }
      if (((bitField0_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4004, enableOverlay_);
      }
      if (((bitField0_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4006, enableScreenshotNotification_);
      }
      if (((bitField0_ & 0x01000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4007, enableScreenshotSound_);
      }
      if (((bitField0_ & 0x02000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4008, saveUncompressedScreenshots_);
      }
      if (((bitField0_ & 0x04000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4009, screenshotsPath_);
      }
      if (((bitField0_ & 0x08000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4010, defaultPingRate_);
      }
      if (((bitField0_ & 0x10000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4011, serverPingRate_);
      }
      if (((bitField0_ & 0x20000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4012, steamNetworkingShareIp_);
      }
      if (((bitField0_ & 0x40000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4013, webBrowserHome_);
      }
      if (((bitField0_ & 0x80000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4014, voiceMicDeviceName_);
      }
      if (((bitField1_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4015, voiceMicInputGain_);
      }
      if (((bitField1_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4016, voiceSpeakerOutputGain_);
      }
      if (((bitField1_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4017, voicePushToTalkSetting_);
      }
      if (((bitField1_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4018, getVoicePushToTalkKey());
      }
      if (((bitField1_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4019, overlayToolbarListView_);
      }
      if (((bitField1_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4020, alwaysUseGamepaduiOverlay_);
      }
      if (((bitField1_ & 0x00000040) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4021, overlayTabs_);
      }
      if (((bitField1_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4022, overlayScaleInterface_);
      }
      if (((bitField1_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4023, overlayRestoreBrowserTabs_);
      }
      if (((bitField1_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5000, smoothScrollWebviews_);
      }
      if (((bitField1_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5001, enableGpuAcceleratedWebviews_);
      }
      if (((bitField1_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5003, enableHardwareVideoDecoding_);
      }
      if (((bitField1_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5004, runAtStartup_);
      }
      if (((bitField1_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5005, enableDpiScaling_);
      }
      if (((bitField1_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5006, enableMarketingMessages_);
      }
      if (((bitField1_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5007, startInBigPictureMode_);
      }
      if (((bitField1_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5008, jumplistFlags_);
      }
      if (((bitField1_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5009, enableUiSounds_);
      }
      if (((bitField1_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6000, disableAllToasts_);
      }
      if (((bitField1_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6001, disableToastsInGame_);
      }
      if (((bitField1_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6002, playSoundOnToast_);
      }
      if (((bitField1_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7000, libraryDisplaySize_);
      }
      if (((bitField1_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7001, libraryWhatsNewShowOnlyProductUpdates_);
      }
      if (((bitField1_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7002, showStoreContentOnHome_);
      }
      if (((bitField1_ & 0x01000000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7003, startPage_);
      }
      if (((bitField1_ & 0x02000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7004, libraryLowBandwidthMode_);
      }
      if (((bitField1_ & 0x04000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7005, libraryLowPerfMode_);
      }
      if (((bitField1_ & 0x08000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7006, libraryDisableCommunityContent_);
      }
      if (((bitField1_ & 0x10000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7007, libraryDisplayIconInGameList_);
      }
      if (((bitField1_ & 0x20000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7008, readyToPlayIncludesStreaming_);
      }
      if (((bitField1_ & 0x40000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7009, showSteamDeckInfo_);
      }
      if (((bitField1_ & 0x80000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8000, enableShaderPrecache_);
      }
      if (((bitField2_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8001, enableShaderBackgroundProcessing_);
      }
      if (((bitField2_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8002, shaderPrecachedSize_);
      }
      if (((bitField2_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8003, needsSteamServiceRepair_);
      }
      if (((bitField2_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8004, downloadPeerContent_);
      }
      if (((bitField2_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8005, downloadRateBitsPerS_);
      }
      if (((bitField2_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8006, restrictAutoUpdates_);
      }
      if (((bitField2_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8007, restrictAutoUpdatesStart_);
      }
      if (((bitField2_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8008, restrictAutoUpdatesEnd_);
      }
      if (((bitField2_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8009, downloadRegion_);
      }
      if (((bitField2_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8010, downloadWhileAppRunning_);
      }
      if (((bitField2_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8011, downloadThrottleWhileStreaming_);
      }
      if (((bitField2_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8012, downloadThrottleRate_);
      }
      if (((bitField2_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10000, cloudEnabled_);
      }
      if (((bitField2_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10001, showScreenshotManager_);
      }
      if (((bitField2_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11000, musicVolume_);
      }
      if (((bitField2_ & 0x00008000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11001, musicPauseOnAppStart_);
      }
      if (((bitField2_ & 0x00010000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11002, musicPauseOnVoiceChat_);
      }
      if (((bitField2_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11003, musicDownloadHighQuality_);
      }
      if (((bitField2_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11004, musicPlaylistNotification_);
      }
      if (((bitField2_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12000, broadcastPermissions_);
      }
      if (((bitField2_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12001, broadcastOutputWidth_);
      }
      if (((bitField2_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12002, broadcastOutputHeight_);
      }
      if (((bitField2_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12003, broadcastBitrate_);
      }
      if (((bitField2_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12004, broadcastEncodingOption_);
      }
      if (((bitField2_ & 0x01000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12005, broadcastRecordAllVideo_);
      }
      if (((bitField2_ & 0x02000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12006, broadcastRecordAllAudio_);
      }
      if (((bitField2_ & 0x04000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12007, broadcastRecordMicrophone_);
      }
      if (((bitField2_ & 0x08000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12008, broadcastShowUploadStats_);
      }
      if (((bitField2_ & 0x10000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12009, broadcastShowLiveReminder_);
      }
      if (((bitField2_ & 0x20000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12010, broadcastChatCorner_);
      }
      if (((bitField2_ & 0x40000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14001, steamInputConfiguratorErrorMsgEnable_);
      }
      if (((bitField2_ & 0x80000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14002, controllerGuideButtonFocusSteam_);
      }
      if (((bitField3_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14003, controllerPsSupport_);
      }
      if (((bitField3_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14004, controllerXboxSupport_);
      }
      if (((bitField3_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14005, controllerXboxDriver_);
      }
      if (((bitField3_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14006, controllerSwitchSupport_);
      }
      if (((bitField3_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14007, controllerGenericSupport_);
      }
      if (((bitField3_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14008, controllerPowerOffTimeout_);
      }
      if (((bitField3_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14009, turnOffControllerOnExit_);
      }
      if (((bitField3_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14010, controllerCombineNintendoJoycons_);
      }
      if (((bitField3_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(16000, startupMovieId_);
      }
      if (((bitField3_ & 0x00000200) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(16001, startupMovieLocalPath_);
      }
      if (((bitField3_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16002, startupMovieShuffle_);
      }
      if (((bitField3_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16003, startupMovieUsedForResume_);
      }
      if (((bitField3_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17001, gameNotesEnableSpellcheck_);
      }
      if (((bitField3_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18000, screenshotItemsPerRow_);
      }
      if (((bitField3_ & 0x00004000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18200, gBackgroundEnabled_);
      }
      if (((bitField3_ & 0x00008000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18201, gBackgroundPath_);
      }
      if (((bitField3_ & 0x00010000) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18202, gBackgroundMaxKeep_);
      }
      if (((bitField3_ & 0x00020000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18203, gBackgroundTimeResolution_);
      }
      if (((bitField3_ & 0x00040000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18206, gBackgroundDevmode_);
      }
      if (((bitField3_ & 0x00080000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18207, getGBackgroundMk());
      }
      if (((bitField3_ & 0x00100000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18208, getGBackgroundTg());
      }
      if (((bitField3_ & 0x00200000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18209, gBackgroundAM_);
      }
      if (((bitField3_ & 0x00400000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20000, showTimestampsInConsole_);
      }
      if (((bitField3_ & 0x00800000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20001, forceOobe_);
      }
      if (((bitField3_ & 0x01000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20002, overrideBrowserComposerMode_);
      }
      if (((bitField3_ & 0x02000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20003, cefRemoteDebuggingEnabled_);
      }
      if (((bitField3_ & 0x04000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20004, forceDeckPerfTab_);
      }
      if (((bitField3_ & 0x08000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20005, forceFakeMandatoryUpdate_);
      }
      if (((bitField3_ & 0x10000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(21001, gamescopeHdrVisualization_);
      }
      if (((bitField3_ & 0x20000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21002, gamescopeAppTargetFramerate_);
      }
      if (((bitField3_ & 0x40000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21003, gamescopeEnableAppTargetFramerate_);
      }
      if (((bitField3_ & 0x80000000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21004, gamescopeDisableFramelimit_);
      }
      if (((bitField4_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21005, gamescopeDisplayRefreshRate_);
      }
      if (((bitField4_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21006, gamescopeUseGameRefreshRateInSteam_);
      }
      if (((bitField4_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22000, steamosStatusLedBrightness_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SteammessagesClientsettings.CMsgClientSettings)) {
        return super.equals(obj);
      }
      SteammessagesClientsettings.CMsgClientSettings other = (SteammessagesClientsettings.CMsgClientSettings) obj;

      if (hasNoSavePersonalInfo() != other.hasNoSavePersonalInfo()) return false;
      if (hasNoSavePersonalInfo()) {
        if (getNoSavePersonalInfo()
            != other.getNoSavePersonalInfo()) return false;
      }
      if (hasOobeTestModeEnabled() != other.hasOobeTestModeEnabled()) return false;
      if (hasOobeTestModeEnabled()) {
        if (getOobeTestModeEnabled()
            != other.getOobeTestModeEnabled()) return false;
      }
      if (hasInClientBeta() != other.hasInClientBeta()) return false;
      if (hasInClientBeta()) {
        if (getInClientBeta()
            != other.getInClientBeta()) return false;
      }
      if (hasIsSteamSideloaded() != other.hasIsSteamSideloaded()) return false;
      if (hasIsSteamSideloaded()) {
        if (getIsSteamSideloaded()
            != other.getIsSteamSideloaded()) return false;
      }
      if (hasPreferredMonitor() != other.hasPreferredMonitor()) return false;
      if (hasPreferredMonitor()) {
        if (!getPreferredMonitor()
            .equals(other.getPreferredMonitor())) return false;
      }
      if (hasSteamCefGpuBlocklistDisabled() != other.hasSteamCefGpuBlocklistDisabled()) return false;
      if (hasSteamCefGpuBlocklistDisabled()) {
        if (getSteamCefGpuBlocklistDisabled()
            != other.getSteamCefGpuBlocklistDisabled()) return false;
      }
      if (hasBigpictureWindowed() != other.hasBigpictureWindowed()) return false;
      if (hasBigpictureWindowed()) {
        if (getBigpictureWindowed()
            != other.getBigpictureWindowed()) return false;
      }
      if (hasDisplayName() != other.hasDisplayName()) return false;
      if (hasDisplayName()) {
        if (!getDisplayName()
            .equals(other.getDisplayName())) return false;
      }
      if (hasIsExternalDisplay() != other.hasIsExternalDisplay()) return false;
      if (hasIsExternalDisplay()) {
        if (getIsExternalDisplay()
            != other.getIsExternalDisplay()) return false;
      }
      if (hasSteamOsUnderscanLevel() != other.hasSteamOsUnderscanLevel()) return false;
      if (hasSteamOsUnderscanLevel()) {
        if (java.lang.Float.floatToIntBits(getSteamOsUnderscanLevel())
            != java.lang.Float.floatToIntBits(
                other.getSteamOsUnderscanLevel())) return false;
      }
      if (hasSteamOsUnderscanEnabled() != other.hasSteamOsUnderscanEnabled()) return false;
      if (hasSteamOsUnderscanEnabled()) {
        if (getSteamOsUnderscanEnabled()
            != other.getSteamOsUnderscanEnabled()) return false;
      }
      if (hasMinScaleFactor() != other.hasMinScaleFactor()) return false;
      if (hasMinScaleFactor()) {
        if (java.lang.Float.floatToIntBits(getMinScaleFactor())
            != java.lang.Float.floatToIntBits(
                other.getMinScaleFactor())) return false;
      }
      if (hasMaxScaleFactor() != other.hasMaxScaleFactor()) return false;
      if (hasMaxScaleFactor()) {
        if (java.lang.Float.floatToIntBits(getMaxScaleFactor())
            != java.lang.Float.floatToIntBits(
                other.getMaxScaleFactor())) return false;
      }
      if (hasAutoScaleFactor() != other.hasAutoScaleFactor()) return false;
      if (hasAutoScaleFactor()) {
        if (java.lang.Float.floatToIntBits(getAutoScaleFactor())
            != java.lang.Float.floatToIntBits(
                other.getAutoScaleFactor())) return false;
      }
      if (hasSmallMode() != other.hasSmallMode()) return false;
      if (hasSmallMode()) {
        if (getSmallMode()
            != other.getSmallMode()) return false;
      }
      if (hasSkipSteamvrInstallDialog() != other.hasSkipSteamvrInstallDialog()) return false;
      if (hasSkipSteamvrInstallDialog()) {
        if (getSkipSteamvrInstallDialog()
            != other.getSkipSteamvrInstallDialog()) return false;
      }
      if (hasAlwaysShowUserChooser() != other.hasAlwaysShowUserChooser()) return false;
      if (hasAlwaysShowUserChooser()) {
        if (getAlwaysShowUserChooser()
            != other.getAlwaysShowUserChooser()) return false;
      }
      if (hasShowFamilySharingNotifications() != other.hasShowFamilySharingNotifications()) return false;
      if (hasShowFamilySharingNotifications()) {
        if (getShowFamilySharingNotifications()
            != other.getShowFamilySharingNotifications()) return false;
      }
      if (hasOverlayFpsCounterCorner() != other.hasOverlayFpsCounterCorner()) return false;
      if (hasOverlayFpsCounterCorner()) {
        if (getOverlayFpsCounterCorner()
            != other.getOverlayFpsCounterCorner()) return false;
      }
      if (hasOverlayFpsCounterHighContrast() != other.hasOverlayFpsCounterHighContrast()) return false;
      if (hasOverlayFpsCounterHighContrast()) {
        if (getOverlayFpsCounterHighContrast()
            != other.getOverlayFpsCounterHighContrast()) return false;
      }
      if (hasOverlayKey() != other.hasOverlayKey()) return false;
      if (hasOverlayKey()) {
        if (!getOverlayKey()
            .equals(other.getOverlayKey())) return false;
      }
      if (hasScreenshotKey() != other.hasScreenshotKey()) return false;
      if (hasScreenshotKey()) {
        if (!getScreenshotKey()
            .equals(other.getScreenshotKey())) return false;
      }
      if (hasEnableOverlay() != other.hasEnableOverlay()) return false;
      if (hasEnableOverlay()) {
        if (getEnableOverlay()
            != other.getEnableOverlay()) return false;
      }
      if (hasEnableScreenshotNotification() != other.hasEnableScreenshotNotification()) return false;
      if (hasEnableScreenshotNotification()) {
        if (getEnableScreenshotNotification()
            != other.getEnableScreenshotNotification()) return false;
      }
      if (hasEnableScreenshotSound() != other.hasEnableScreenshotSound()) return false;
      if (hasEnableScreenshotSound()) {
        if (getEnableScreenshotSound()
            != other.getEnableScreenshotSound()) return false;
      }
      if (hasSaveUncompressedScreenshots() != other.hasSaveUncompressedScreenshots()) return false;
      if (hasSaveUncompressedScreenshots()) {
        if (getSaveUncompressedScreenshots()
            != other.getSaveUncompressedScreenshots()) return false;
      }
      if (hasScreenshotsPath() != other.hasScreenshotsPath()) return false;
      if (hasScreenshotsPath()) {
        if (!getScreenshotsPath()
            .equals(other.getScreenshotsPath())) return false;
      }
      if (hasDefaultPingRate() != other.hasDefaultPingRate()) return false;
      if (hasDefaultPingRate()) {
        if (getDefaultPingRate()
            != other.getDefaultPingRate()) return false;
      }
      if (hasServerPingRate() != other.hasServerPingRate()) return false;
      if (hasServerPingRate()) {
        if (getServerPingRate()
            != other.getServerPingRate()) return false;
      }
      if (hasSteamNetworkingShareIp() != other.hasSteamNetworkingShareIp()) return false;
      if (hasSteamNetworkingShareIp()) {
        if (getSteamNetworkingShareIp()
            != other.getSteamNetworkingShareIp()) return false;
      }
      if (hasWebBrowserHome() != other.hasWebBrowserHome()) return false;
      if (hasWebBrowserHome()) {
        if (!getWebBrowserHome()
            .equals(other.getWebBrowserHome())) return false;
      }
      if (hasVoiceMicDeviceName() != other.hasVoiceMicDeviceName()) return false;
      if (hasVoiceMicDeviceName()) {
        if (!getVoiceMicDeviceName()
            .equals(other.getVoiceMicDeviceName())) return false;
      }
      if (hasVoiceMicInputGain() != other.hasVoiceMicInputGain()) return false;
      if (hasVoiceMicInputGain()) {
        if (java.lang.Float.floatToIntBits(getVoiceMicInputGain())
            != java.lang.Float.floatToIntBits(
                other.getVoiceMicInputGain())) return false;
      }
      if (hasVoiceSpeakerOutputGain() != other.hasVoiceSpeakerOutputGain()) return false;
      if (hasVoiceSpeakerOutputGain()) {
        if (java.lang.Float.floatToIntBits(getVoiceSpeakerOutputGain())
            != java.lang.Float.floatToIntBits(
                other.getVoiceSpeakerOutputGain())) return false;
      }
      if (hasVoicePushToTalkSetting() != other.hasVoicePushToTalkSetting()) return false;
      if (hasVoicePushToTalkSetting()) {
        if (getVoicePushToTalkSetting()
            != other.getVoicePushToTalkSetting()) return false;
      }
      if (hasVoicePushToTalkKey() != other.hasVoicePushToTalkKey()) return false;
      if (hasVoicePushToTalkKey()) {
        if (!getVoicePushToTalkKey()
            .equals(other.getVoicePushToTalkKey())) return false;
      }
      if (hasOverlayToolbarListView() != other.hasOverlayToolbarListView()) return false;
      if (hasOverlayToolbarListView()) {
        if (getOverlayToolbarListView()
            != other.getOverlayToolbarListView()) return false;
      }
      if (hasAlwaysUseGamepaduiOverlay() != other.hasAlwaysUseGamepaduiOverlay()) return false;
      if (hasAlwaysUseGamepaduiOverlay()) {
        if (getAlwaysUseGamepaduiOverlay()
            != other.getAlwaysUseGamepaduiOverlay()) return false;
      }
      if (hasOverlayTabs() != other.hasOverlayTabs()) return false;
      if (hasOverlayTabs()) {
        if (!getOverlayTabs()
            .equals(other.getOverlayTabs())) return false;
      }
      if (hasOverlayScaleInterface() != other.hasOverlayScaleInterface()) return false;
      if (hasOverlayScaleInterface()) {
        if (getOverlayScaleInterface()
            != other.getOverlayScaleInterface()) return false;
      }
      if (hasOverlayRestoreBrowserTabs() != other.hasOverlayRestoreBrowserTabs()) return false;
      if (hasOverlayRestoreBrowserTabs()) {
        if (getOverlayRestoreBrowserTabs()
            != other.getOverlayRestoreBrowserTabs()) return false;
      }
      if (hasSmoothScrollWebviews() != other.hasSmoothScrollWebviews()) return false;
      if (hasSmoothScrollWebviews()) {
        if (getSmoothScrollWebviews()
            != other.getSmoothScrollWebviews()) return false;
      }
      if (hasEnableGpuAcceleratedWebviews() != other.hasEnableGpuAcceleratedWebviews()) return false;
      if (hasEnableGpuAcceleratedWebviews()) {
        if (getEnableGpuAcceleratedWebviews()
            != other.getEnableGpuAcceleratedWebviews()) return false;
      }
      if (hasEnableHardwareVideoDecoding() != other.hasEnableHardwareVideoDecoding()) return false;
      if (hasEnableHardwareVideoDecoding()) {
        if (getEnableHardwareVideoDecoding()
            != other.getEnableHardwareVideoDecoding()) return false;
      }
      if (hasRunAtStartup() != other.hasRunAtStartup()) return false;
      if (hasRunAtStartup()) {
        if (getRunAtStartup()
            != other.getRunAtStartup()) return false;
      }
      if (hasEnableDpiScaling() != other.hasEnableDpiScaling()) return false;
      if (hasEnableDpiScaling()) {
        if (getEnableDpiScaling()
            != other.getEnableDpiScaling()) return false;
      }
      if (hasEnableMarketingMessages() != other.hasEnableMarketingMessages()) return false;
      if (hasEnableMarketingMessages()) {
        if (getEnableMarketingMessages()
            != other.getEnableMarketingMessages()) return false;
      }
      if (hasStartInBigPictureMode() != other.hasStartInBigPictureMode()) return false;
      if (hasStartInBigPictureMode()) {
        if (getStartInBigPictureMode()
            != other.getStartInBigPictureMode()) return false;
      }
      if (hasJumplistFlags() != other.hasJumplistFlags()) return false;
      if (hasJumplistFlags()) {
        if (getJumplistFlags()
            != other.getJumplistFlags()) return false;
      }
      if (hasEnableUiSounds() != other.hasEnableUiSounds()) return false;
      if (hasEnableUiSounds()) {
        if (getEnableUiSounds()
            != other.getEnableUiSounds()) return false;
      }
      if (hasDisableAllToasts() != other.hasDisableAllToasts()) return false;
      if (hasDisableAllToasts()) {
        if (getDisableAllToasts()
            != other.getDisableAllToasts()) return false;
      }
      if (hasDisableToastsInGame() != other.hasDisableToastsInGame()) return false;
      if (hasDisableToastsInGame()) {
        if (getDisableToastsInGame()
            != other.getDisableToastsInGame()) return false;
      }
      if (hasPlaySoundOnToast() != other.hasPlaySoundOnToast()) return false;
      if (hasPlaySoundOnToast()) {
        if (getPlaySoundOnToast()
            != other.getPlaySoundOnToast()) return false;
      }
      if (hasLibraryDisplaySize() != other.hasLibraryDisplaySize()) return false;
      if (hasLibraryDisplaySize()) {
        if (getLibraryDisplaySize()
            != other.getLibraryDisplaySize()) return false;
      }
      if (hasLibraryWhatsNewShowOnlyProductUpdates() != other.hasLibraryWhatsNewShowOnlyProductUpdates()) return false;
      if (hasLibraryWhatsNewShowOnlyProductUpdates()) {
        if (getLibraryWhatsNewShowOnlyProductUpdates()
            != other.getLibraryWhatsNewShowOnlyProductUpdates()) return false;
      }
      if (hasShowStoreContentOnHome() != other.hasShowStoreContentOnHome()) return false;
      if (hasShowStoreContentOnHome()) {
        if (getShowStoreContentOnHome()
            != other.getShowStoreContentOnHome()) return false;
      }
      if (hasStartPage() != other.hasStartPage()) return false;
      if (hasStartPage()) {
        if (!getStartPage()
            .equals(other.getStartPage())) return false;
      }
      if (hasLibraryLowBandwidthMode() != other.hasLibraryLowBandwidthMode()) return false;
      if (hasLibraryLowBandwidthMode()) {
        if (getLibraryLowBandwidthMode()
            != other.getLibraryLowBandwidthMode()) return false;
      }
      if (hasLibraryLowPerfMode() != other.hasLibraryLowPerfMode()) return false;
      if (hasLibraryLowPerfMode()) {
        if (getLibraryLowPerfMode()
            != other.getLibraryLowPerfMode()) return false;
      }
      if (hasLibraryDisableCommunityContent() != other.hasLibraryDisableCommunityContent()) return false;
      if (hasLibraryDisableCommunityContent()) {
        if (getLibraryDisableCommunityContent()
            != other.getLibraryDisableCommunityContent()) return false;
      }
      if (hasLibraryDisplayIconInGameList() != other.hasLibraryDisplayIconInGameList()) return false;
      if (hasLibraryDisplayIconInGameList()) {
        if (getLibraryDisplayIconInGameList()
            != other.getLibraryDisplayIconInGameList()) return false;
      }
      if (hasReadyToPlayIncludesStreaming() != other.hasReadyToPlayIncludesStreaming()) return false;
      if (hasReadyToPlayIncludesStreaming()) {
        if (getReadyToPlayIncludesStreaming()
            != other.getReadyToPlayIncludesStreaming()) return false;
      }
      if (hasShowSteamDeckInfo() != other.hasShowSteamDeckInfo()) return false;
      if (hasShowSteamDeckInfo()) {
        if (getShowSteamDeckInfo()
            != other.getShowSteamDeckInfo()) return false;
      }
      if (hasEnableShaderPrecache() != other.hasEnableShaderPrecache()) return false;
      if (hasEnableShaderPrecache()) {
        if (getEnableShaderPrecache()
            != other.getEnableShaderPrecache()) return false;
      }
      if (hasEnableShaderBackgroundProcessing() != other.hasEnableShaderBackgroundProcessing()) return false;
      if (hasEnableShaderBackgroundProcessing()) {
        if (getEnableShaderBackgroundProcessing()
            != other.getEnableShaderBackgroundProcessing()) return false;
      }
      if (hasShaderPrecachedSize() != other.hasShaderPrecachedSize()) return false;
      if (hasShaderPrecachedSize()) {
        if (getShaderPrecachedSize()
            != other.getShaderPrecachedSize()) return false;
      }
      if (hasNeedsSteamServiceRepair() != other.hasNeedsSteamServiceRepair()) return false;
      if (hasNeedsSteamServiceRepair()) {
        if (getNeedsSteamServiceRepair()
            != other.getNeedsSteamServiceRepair()) return false;
      }
      if (hasDownloadPeerContent() != other.hasDownloadPeerContent()) return false;
      if (hasDownloadPeerContent()) {
        if (getDownloadPeerContent()
            != other.getDownloadPeerContent()) return false;
      }
      if (hasDownloadRateBitsPerS() != other.hasDownloadRateBitsPerS()) return false;
      if (hasDownloadRateBitsPerS()) {
        if (getDownloadRateBitsPerS()
            != other.getDownloadRateBitsPerS()) return false;
      }
      if (hasRestrictAutoUpdates() != other.hasRestrictAutoUpdates()) return false;
      if (hasRestrictAutoUpdates()) {
        if (getRestrictAutoUpdates()
            != other.getRestrictAutoUpdates()) return false;
      }
      if (hasRestrictAutoUpdatesStart() != other.hasRestrictAutoUpdatesStart()) return false;
      if (hasRestrictAutoUpdatesStart()) {
        if (getRestrictAutoUpdatesStart()
            != other.getRestrictAutoUpdatesStart()) return false;
      }
      if (hasRestrictAutoUpdatesEnd() != other.hasRestrictAutoUpdatesEnd()) return false;
      if (hasRestrictAutoUpdatesEnd()) {
        if (getRestrictAutoUpdatesEnd()
            != other.getRestrictAutoUpdatesEnd()) return false;
      }
      if (hasDownloadRegion() != other.hasDownloadRegion()) return false;
      if (hasDownloadRegion()) {
        if (getDownloadRegion()
            != other.getDownloadRegion()) return false;
      }
      if (hasDownloadWhileAppRunning() != other.hasDownloadWhileAppRunning()) return false;
      if (hasDownloadWhileAppRunning()) {
        if (getDownloadWhileAppRunning()
            != other.getDownloadWhileAppRunning()) return false;
      }
      if (hasDownloadThrottleWhileStreaming() != other.hasDownloadThrottleWhileStreaming()) return false;
      if (hasDownloadThrottleWhileStreaming()) {
        if (getDownloadThrottleWhileStreaming()
            != other.getDownloadThrottleWhileStreaming()) return false;
      }
      if (hasDownloadThrottleRate() != other.hasDownloadThrottleRate()) return false;
      if (hasDownloadThrottleRate()) {
        if (getDownloadThrottleRate()
            != other.getDownloadThrottleRate()) return false;
      }
      if (hasCloudEnabled() != other.hasCloudEnabled()) return false;
      if (hasCloudEnabled()) {
        if (getCloudEnabled()
            != other.getCloudEnabled()) return false;
      }
      if (hasShowScreenshotManager() != other.hasShowScreenshotManager()) return false;
      if (hasShowScreenshotManager()) {
        if (getShowScreenshotManager()
            != other.getShowScreenshotManager()) return false;
      }
      if (hasMusicVolume() != other.hasMusicVolume()) return false;
      if (hasMusicVolume()) {
        if (getMusicVolume()
            != other.getMusicVolume()) return false;
      }
      if (hasMusicPauseOnAppStart() != other.hasMusicPauseOnAppStart()) return false;
      if (hasMusicPauseOnAppStart()) {
        if (getMusicPauseOnAppStart()
            != other.getMusicPauseOnAppStart()) return false;
      }
      if (hasMusicPauseOnVoiceChat() != other.hasMusicPauseOnVoiceChat()) return false;
      if (hasMusicPauseOnVoiceChat()) {
        if (getMusicPauseOnVoiceChat()
            != other.getMusicPauseOnVoiceChat()) return false;
      }
      if (hasMusicDownloadHighQuality() != other.hasMusicDownloadHighQuality()) return false;
      if (hasMusicDownloadHighQuality()) {
        if (getMusicDownloadHighQuality()
            != other.getMusicDownloadHighQuality()) return false;
      }
      if (hasMusicPlaylistNotification() != other.hasMusicPlaylistNotification()) return false;
      if (hasMusicPlaylistNotification()) {
        if (getMusicPlaylistNotification()
            != other.getMusicPlaylistNotification()) return false;
      }
      if (hasBroadcastPermissions() != other.hasBroadcastPermissions()) return false;
      if (hasBroadcastPermissions()) {
        if (broadcastPermissions_ != other.broadcastPermissions_) return false;
      }
      if (hasBroadcastOutputWidth() != other.hasBroadcastOutputWidth()) return false;
      if (hasBroadcastOutputWidth()) {
        if (getBroadcastOutputWidth()
            != other.getBroadcastOutputWidth()) return false;
      }
      if (hasBroadcastOutputHeight() != other.hasBroadcastOutputHeight()) return false;
      if (hasBroadcastOutputHeight()) {
        if (getBroadcastOutputHeight()
            != other.getBroadcastOutputHeight()) return false;
      }
      if (hasBroadcastBitrate() != other.hasBroadcastBitrate()) return false;
      if (hasBroadcastBitrate()) {
        if (getBroadcastBitrate()
            != other.getBroadcastBitrate()) return false;
      }
      if (hasBroadcastEncodingOption() != other.hasBroadcastEncodingOption()) return false;
      if (hasBroadcastEncodingOption()) {
        if (broadcastEncodingOption_ != other.broadcastEncodingOption_) return false;
      }
      if (hasBroadcastRecordAllVideo() != other.hasBroadcastRecordAllVideo()) return false;
      if (hasBroadcastRecordAllVideo()) {
        if (getBroadcastRecordAllVideo()
            != other.getBroadcastRecordAllVideo()) return false;
      }
      if (hasBroadcastRecordAllAudio() != other.hasBroadcastRecordAllAudio()) return false;
      if (hasBroadcastRecordAllAudio()) {
        if (getBroadcastRecordAllAudio()
            != other.getBroadcastRecordAllAudio()) return false;
      }
      if (hasBroadcastRecordMicrophone() != other.hasBroadcastRecordMicrophone()) return false;
      if (hasBroadcastRecordMicrophone()) {
        if (getBroadcastRecordMicrophone()
            != other.getBroadcastRecordMicrophone()) return false;
      }
      if (hasBroadcastShowUploadStats() != other.hasBroadcastShowUploadStats()) return false;
      if (hasBroadcastShowUploadStats()) {
        if (getBroadcastShowUploadStats()
            != other.getBroadcastShowUploadStats()) return false;
      }
      if (hasBroadcastShowLiveReminder() != other.hasBroadcastShowLiveReminder()) return false;
      if (hasBroadcastShowLiveReminder()) {
        if (getBroadcastShowLiveReminder()
            != other.getBroadcastShowLiveReminder()) return false;
      }
      if (hasBroadcastChatCorner() != other.hasBroadcastChatCorner()) return false;
      if (hasBroadcastChatCorner()) {
        if (getBroadcastChatCorner()
            != other.getBroadcastChatCorner()) return false;
      }
      if (hasSteamInputConfiguratorErrorMsgEnable() != other.hasSteamInputConfiguratorErrorMsgEnable()) return false;
      if (hasSteamInputConfiguratorErrorMsgEnable()) {
        if (getSteamInputConfiguratorErrorMsgEnable()
            != other.getSteamInputConfiguratorErrorMsgEnable()) return false;
      }
      if (hasControllerGuideButtonFocusSteam() != other.hasControllerGuideButtonFocusSteam()) return false;
      if (hasControllerGuideButtonFocusSteam()) {
        if (getControllerGuideButtonFocusSteam()
            != other.getControllerGuideButtonFocusSteam()) return false;
      }
      if (hasControllerPsSupport() != other.hasControllerPsSupport()) return false;
      if (hasControllerPsSupport()) {
        if (getControllerPsSupport()
            != other.getControllerPsSupport()) return false;
      }
      if (hasControllerXboxSupport() != other.hasControllerXboxSupport()) return false;
      if (hasControllerXboxSupport()) {
        if (getControllerXboxSupport()
            != other.getControllerXboxSupport()) return false;
      }
      if (hasControllerXboxDriver() != other.hasControllerXboxDriver()) return false;
      if (hasControllerXboxDriver()) {
        if (getControllerXboxDriver()
            != other.getControllerXboxDriver()) return false;
      }
      if (hasControllerSwitchSupport() != other.hasControllerSwitchSupport()) return false;
      if (hasControllerSwitchSupport()) {
        if (getControllerSwitchSupport()
            != other.getControllerSwitchSupport()) return false;
      }
      if (hasControllerGenericSupport() != other.hasControllerGenericSupport()) return false;
      if (hasControllerGenericSupport()) {
        if (getControllerGenericSupport()
            != other.getControllerGenericSupport()) return false;
      }
      if (hasControllerPowerOffTimeout() != other.hasControllerPowerOffTimeout()) return false;
      if (hasControllerPowerOffTimeout()) {
        if (getControllerPowerOffTimeout()
            != other.getControllerPowerOffTimeout()) return false;
      }
      if (hasTurnOffControllerOnExit() != other.hasTurnOffControllerOnExit()) return false;
      if (hasTurnOffControllerOnExit()) {
        if (getTurnOffControllerOnExit()
            != other.getTurnOffControllerOnExit()) return false;
      }
      if (hasControllerCombineNintendoJoycons() != other.hasControllerCombineNintendoJoycons()) return false;
      if (hasControllerCombineNintendoJoycons()) {
        if (getControllerCombineNintendoJoycons()
            != other.getControllerCombineNintendoJoycons()) return false;
      }
      if (hasStartupMovieId() != other.hasStartupMovieId()) return false;
      if (hasStartupMovieId()) {
        if (getStartupMovieId()
            != other.getStartupMovieId()) return false;
      }
      if (hasStartupMovieLocalPath() != other.hasStartupMovieLocalPath()) return false;
      if (hasStartupMovieLocalPath()) {
        if (!getStartupMovieLocalPath()
            .equals(other.getStartupMovieLocalPath())) return false;
      }
      if (hasStartupMovieShuffle() != other.hasStartupMovieShuffle()) return false;
      if (hasStartupMovieShuffle()) {
        if (getStartupMovieShuffle()
            != other.getStartupMovieShuffle()) return false;
      }
      if (hasStartupMovieUsedForResume() != other.hasStartupMovieUsedForResume()) return false;
      if (hasStartupMovieUsedForResume()) {
        if (getStartupMovieUsedForResume()
            != other.getStartupMovieUsedForResume()) return false;
      }
      if (hasGameNotesEnableSpellcheck() != other.hasGameNotesEnableSpellcheck()) return false;
      if (hasGameNotesEnableSpellcheck()) {
        if (getGameNotesEnableSpellcheck()
            != other.getGameNotesEnableSpellcheck()) return false;
      }
      if (hasScreenshotItemsPerRow() != other.hasScreenshotItemsPerRow()) return false;
      if (hasScreenshotItemsPerRow()) {
        if (getScreenshotItemsPerRow()
            != other.getScreenshotItemsPerRow()) return false;
      }
      if (hasGBackgroundEnabled() != other.hasGBackgroundEnabled()) return false;
      if (hasGBackgroundEnabled()) {
        if (getGBackgroundEnabled()
            != other.getGBackgroundEnabled()) return false;
      }
      if (hasGBackgroundPath() != other.hasGBackgroundPath()) return false;
      if (hasGBackgroundPath()) {
        if (!getGBackgroundPath()
            .equals(other.getGBackgroundPath())) return false;
      }
      if (hasGBackgroundMaxKeep() != other.hasGBackgroundMaxKeep()) return false;
      if (hasGBackgroundMaxKeep()) {
        if (!getGBackgroundMaxKeep()
            .equals(other.getGBackgroundMaxKeep())) return false;
      }
      if (hasGBackgroundTimeResolution() != other.hasGBackgroundTimeResolution()) return false;
      if (hasGBackgroundTimeResolution()) {
        if (getGBackgroundTimeResolution()
            != other.getGBackgroundTimeResolution()) return false;
      }
      if (hasGBackgroundDevmode() != other.hasGBackgroundDevmode()) return false;
      if (hasGBackgroundDevmode()) {
        if (getGBackgroundDevmode()
            != other.getGBackgroundDevmode()) return false;
      }
      if (hasGBackgroundMk() != other.hasGBackgroundMk()) return false;
      if (hasGBackgroundMk()) {
        if (!getGBackgroundMk()
            .equals(other.getGBackgroundMk())) return false;
      }
      if (hasGBackgroundTg() != other.hasGBackgroundTg()) return false;
      if (hasGBackgroundTg()) {
        if (!getGBackgroundTg()
            .equals(other.getGBackgroundTg())) return false;
      }
      if (hasGBackgroundAM() != other.hasGBackgroundAM()) return false;
      if (hasGBackgroundAM()) {
        if (getGBackgroundAM()
            != other.getGBackgroundAM()) return false;
      }
      if (hasShowTimestampsInConsole() != other.hasShowTimestampsInConsole()) return false;
      if (hasShowTimestampsInConsole()) {
        if (getShowTimestampsInConsole()
            != other.getShowTimestampsInConsole()) return false;
      }
      if (hasForceOobe() != other.hasForceOobe()) return false;
      if (hasForceOobe()) {
        if (getForceOobe()
            != other.getForceOobe()) return false;
      }
      if (hasOverrideBrowserComposerMode() != other.hasOverrideBrowserComposerMode()) return false;
      if (hasOverrideBrowserComposerMode()) {
        if (getOverrideBrowserComposerMode()
            != other.getOverrideBrowserComposerMode()) return false;
      }
      if (hasCefRemoteDebuggingEnabled() != other.hasCefRemoteDebuggingEnabled()) return false;
      if (hasCefRemoteDebuggingEnabled()) {
        if (getCefRemoteDebuggingEnabled()
            != other.getCefRemoteDebuggingEnabled()) return false;
      }
      if (hasForceDeckPerfTab() != other.hasForceDeckPerfTab()) return false;
      if (hasForceDeckPerfTab()) {
        if (getForceDeckPerfTab()
            != other.getForceDeckPerfTab()) return false;
      }
      if (hasForceFakeMandatoryUpdate() != other.hasForceFakeMandatoryUpdate()) return false;
      if (hasForceFakeMandatoryUpdate()) {
        if (getForceFakeMandatoryUpdate()
            != other.getForceFakeMandatoryUpdate()) return false;
      }
      if (hasGamescopeHdrVisualization() != other.hasGamescopeHdrVisualization()) return false;
      if (hasGamescopeHdrVisualization()) {
        if (gamescopeHdrVisualization_ != other.gamescopeHdrVisualization_) return false;
      }
      if (hasGamescopeAppTargetFramerate() != other.hasGamescopeAppTargetFramerate()) return false;
      if (hasGamescopeAppTargetFramerate()) {
        if (getGamescopeAppTargetFramerate()
            != other.getGamescopeAppTargetFramerate()) return false;
      }
      if (hasGamescopeEnableAppTargetFramerate() != other.hasGamescopeEnableAppTargetFramerate()) return false;
      if (hasGamescopeEnableAppTargetFramerate()) {
        if (getGamescopeEnableAppTargetFramerate()
            != other.getGamescopeEnableAppTargetFramerate()) return false;
      }
      if (hasGamescopeDisableFramelimit() != other.hasGamescopeDisableFramelimit()) return false;
      if (hasGamescopeDisableFramelimit()) {
        if (getGamescopeDisableFramelimit()
            != other.getGamescopeDisableFramelimit()) return false;
      }
      if (hasGamescopeDisplayRefreshRate() != other.hasGamescopeDisplayRefreshRate()) return false;
      if (hasGamescopeDisplayRefreshRate()) {
        if (getGamescopeDisplayRefreshRate()
            != other.getGamescopeDisplayRefreshRate()) return false;
      }
      if (hasGamescopeUseGameRefreshRateInSteam() != other.hasGamescopeUseGameRefreshRateInSteam()) return false;
      if (hasGamescopeUseGameRefreshRateInSteam()) {
        if (getGamescopeUseGameRefreshRateInSteam()
            != other.getGamescopeUseGameRefreshRateInSteam()) return false;
      }
      if (hasSteamosStatusLedBrightness() != other.hasSteamosStatusLedBrightness()) return false;
      if (hasSteamosStatusLedBrightness()) {
        if (getSteamosStatusLedBrightness()
            != other.getSteamosStatusLedBrightness()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasNoSavePersonalInfo()) {
        hash = (37 * hash) + NO_SAVE_PERSONAL_INFO_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNoSavePersonalInfo());
      }
      if (hasOobeTestModeEnabled()) {
        hash = (37 * hash) + OOBE_TEST_MODE_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOobeTestModeEnabled());
      }
      if (hasInClientBeta()) {
        hash = (37 * hash) + IN_CLIENT_BETA_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getInClientBeta());
      }
      if (hasIsSteamSideloaded()) {
        hash = (37 * hash) + IS_STEAM_SIDELOADED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsSteamSideloaded());
      }
      if (hasPreferredMonitor()) {
        hash = (37 * hash) + PREFERRED_MONITOR_FIELD_NUMBER;
        hash = (53 * hash) + getPreferredMonitor().hashCode();
      }
      if (hasSteamCefGpuBlocklistDisabled()) {
        hash = (37 * hash) + STEAM_CEF_GPU_BLOCKLIST_DISABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSteamCefGpuBlocklistDisabled());
      }
      if (hasBigpictureWindowed()) {
        hash = (37 * hash) + BIGPICTURE_WINDOWED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBigpictureWindowed());
      }
      if (hasDisplayName()) {
        hash = (37 * hash) + DISPLAY_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getDisplayName().hashCode();
      }
      if (hasIsExternalDisplay()) {
        hash = (37 * hash) + IS_EXTERNAL_DISPLAY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsExternalDisplay());
      }
      if (hasSteamOsUnderscanLevel()) {
        hash = (37 * hash) + STEAM_OS_UNDERSCAN_LEVEL_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSteamOsUnderscanLevel());
      }
      if (hasSteamOsUnderscanEnabled()) {
        hash = (37 * hash) + STEAM_OS_UNDERSCAN_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSteamOsUnderscanEnabled());
      }
      if (hasMinScaleFactor()) {
        hash = (37 * hash) + MIN_SCALE_FACTOR_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinScaleFactor());
      }
      if (hasMaxScaleFactor()) {
        hash = (37 * hash) + MAX_SCALE_FACTOR_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMaxScaleFactor());
      }
      if (hasAutoScaleFactor()) {
        hash = (37 * hash) + AUTO_SCALE_FACTOR_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getAutoScaleFactor());
      }
      if (hasSmallMode()) {
        hash = (37 * hash) + SMALL_MODE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSmallMode());
      }
      if (hasSkipSteamvrInstallDialog()) {
        hash = (37 * hash) + SKIP_STEAMVR_INSTALL_DIALOG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSkipSteamvrInstallDialog());
      }
      if (hasAlwaysShowUserChooser()) {
        hash = (37 * hash) + ALWAYS_SHOW_USER_CHOOSER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAlwaysShowUserChooser());
      }
      if (hasShowFamilySharingNotifications()) {
        hash = (37 * hash) + SHOW_FAMILY_SHARING_NOTIFICATIONS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getShowFamilySharingNotifications());
      }
      if (hasOverlayFpsCounterCorner()) {
        hash = (37 * hash) + OVERLAY_FPS_COUNTER_CORNER_FIELD_NUMBER;
        hash = (53 * hash) + getOverlayFpsCounterCorner();
      }
      if (hasOverlayFpsCounterHighContrast()) {
        hash = (37 * hash) + OVERLAY_FPS_COUNTER_HIGH_CONTRAST_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOverlayFpsCounterHighContrast());
      }
      if (hasOverlayKey()) {
        hash = (37 * hash) + OVERLAY_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getOverlayKey().hashCode();
      }
      if (hasScreenshotKey()) {
        hash = (37 * hash) + SCREENSHOT_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getScreenshotKey().hashCode();
      }
      if (hasEnableOverlay()) {
        hash = (37 * hash) + ENABLE_OVERLAY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableOverlay());
      }
      if (hasEnableScreenshotNotification()) {
        hash = (37 * hash) + ENABLE_SCREENSHOT_NOTIFICATION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableScreenshotNotification());
      }
      if (hasEnableScreenshotSound()) {
        hash = (37 * hash) + ENABLE_SCREENSHOT_SOUND_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableScreenshotSound());
      }
      if (hasSaveUncompressedScreenshots()) {
        hash = (37 * hash) + SAVE_UNCOMPRESSED_SCREENSHOTS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSaveUncompressedScreenshots());
      }
      if (hasScreenshotsPath()) {
        hash = (37 * hash) + SCREENSHOTS_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getScreenshotsPath().hashCode();
      }
      if (hasDefaultPingRate()) {
        hash = (37 * hash) + DEFAULT_PING_RATE_FIELD_NUMBER;
        hash = (53 * hash) + getDefaultPingRate();
      }
      if (hasServerPingRate()) {
        hash = (37 * hash) + SERVER_PING_RATE_FIELD_NUMBER;
        hash = (53 * hash) + getServerPingRate();
      }
      if (hasSteamNetworkingShareIp()) {
        hash = (37 * hash) + STEAM_NETWORKING_SHARE_IP_FIELD_NUMBER;
        hash = (53 * hash) + getSteamNetworkingShareIp();
      }
      if (hasWebBrowserHome()) {
        hash = (37 * hash) + WEB_BROWSER_HOME_FIELD_NUMBER;
        hash = (53 * hash) + getWebBrowserHome().hashCode();
      }
      if (hasVoiceMicDeviceName()) {
        hash = (37 * hash) + VOICE_MIC_DEVICE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getVoiceMicDeviceName().hashCode();
      }
      if (hasVoiceMicInputGain()) {
        hash = (37 * hash) + VOICE_MIC_INPUT_GAIN_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getVoiceMicInputGain());
      }
      if (hasVoiceSpeakerOutputGain()) {
        hash = (37 * hash) + VOICE_SPEAKER_OUTPUT_GAIN_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getVoiceSpeakerOutputGain());
      }
      if (hasVoicePushToTalkSetting()) {
        hash = (37 * hash) + VOICE_PUSH_TO_TALK_SETTING_FIELD_NUMBER;
        hash = (53 * hash) + getVoicePushToTalkSetting();
      }
      if (hasVoicePushToTalkKey()) {
        hash = (37 * hash) + VOICE_PUSH_TO_TALK_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getVoicePushToTalkKey().hashCode();
      }
      if (hasOverlayToolbarListView()) {
        hash = (37 * hash) + OVERLAY_TOOLBAR_LIST_VIEW_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOverlayToolbarListView());
      }
      if (hasAlwaysUseGamepaduiOverlay()) {
        hash = (37 * hash) + ALWAYS_USE_GAMEPADUI_OVERLAY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAlwaysUseGamepaduiOverlay());
      }
      if (hasOverlayTabs()) {
        hash = (37 * hash) + OVERLAY_TABS_FIELD_NUMBER;
        hash = (53 * hash) + getOverlayTabs().hashCode();
      }
      if (hasOverlayScaleInterface()) {
        hash = (37 * hash) + OVERLAY_SCALE_INTERFACE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOverlayScaleInterface());
      }
      if (hasOverlayRestoreBrowserTabs()) {
        hash = (37 * hash) + OVERLAY_RESTORE_BROWSER_TABS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getOverlayRestoreBrowserTabs());
      }
      if (hasSmoothScrollWebviews()) {
        hash = (37 * hash) + SMOOTH_SCROLL_WEBVIEWS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSmoothScrollWebviews());
      }
      if (hasEnableGpuAcceleratedWebviews()) {
        hash = (37 * hash) + ENABLE_GPU_ACCELERATED_WEBVIEWS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableGpuAcceleratedWebviews());
      }
      if (hasEnableHardwareVideoDecoding()) {
        hash = (37 * hash) + ENABLE_HARDWARE_VIDEO_DECODING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableHardwareVideoDecoding());
      }
      if (hasRunAtStartup()) {
        hash = (37 * hash) + RUN_AT_STARTUP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getRunAtStartup());
      }
      if (hasEnableDpiScaling()) {
        hash = (37 * hash) + ENABLE_DPI_SCALING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableDpiScaling());
      }
      if (hasEnableMarketingMessages()) {
        hash = (37 * hash) + ENABLE_MARKETING_MESSAGES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableMarketingMessages());
      }
      if (hasStartInBigPictureMode()) {
        hash = (37 * hash) + START_IN_BIG_PICTURE_MODE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getStartInBigPictureMode());
      }
      if (hasJumplistFlags()) {
        hash = (37 * hash) + JUMPLIST_FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getJumplistFlags();
      }
      if (hasEnableUiSounds()) {
        hash = (37 * hash) + ENABLE_UI_SOUNDS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableUiSounds());
      }
      if (hasDisableAllToasts()) {
        hash = (37 * hash) + DISABLE_ALL_TOASTS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDisableAllToasts());
      }
      if (hasDisableToastsInGame()) {
        hash = (37 * hash) + DISABLE_TOASTS_IN_GAME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDisableToastsInGame());
      }
      if (hasPlaySoundOnToast()) {
        hash = (37 * hash) + PLAY_SOUND_ON_TOAST_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getPlaySoundOnToast());
      }
      if (hasLibraryDisplaySize()) {
        hash = (37 * hash) + LIBRARY_DISPLAY_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getLibraryDisplaySize();
      }
      if (hasLibraryWhatsNewShowOnlyProductUpdates()) {
        hash = (37 * hash) + LIBRARY_WHATS_NEW_SHOW_ONLY_PRODUCT_UPDATES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLibraryWhatsNewShowOnlyProductUpdates());
      }
      if (hasShowStoreContentOnHome()) {
        hash = (37 * hash) + SHOW_STORE_CONTENT_ON_HOME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getShowStoreContentOnHome());
      }
      if (hasStartPage()) {
        hash = (37 * hash) + START_PAGE_FIELD_NUMBER;
        hash = (53 * hash) + getStartPage().hashCode();
      }
      if (hasLibraryLowBandwidthMode()) {
        hash = (37 * hash) + LIBRARY_LOW_BANDWIDTH_MODE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLibraryLowBandwidthMode());
      }
      if (hasLibraryLowPerfMode()) {
        hash = (37 * hash) + LIBRARY_LOW_PERF_MODE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLibraryLowPerfMode());
      }
      if (hasLibraryDisableCommunityContent()) {
        hash = (37 * hash) + LIBRARY_DISABLE_COMMUNITY_CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLibraryDisableCommunityContent());
      }
      if (hasLibraryDisplayIconInGameList()) {
        hash = (37 * hash) + LIBRARY_DISPLAY_ICON_IN_GAME_LIST_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getLibraryDisplayIconInGameList());
      }
      if (hasReadyToPlayIncludesStreaming()) {
        hash = (37 * hash) + READY_TO_PLAY_INCLUDES_STREAMING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getReadyToPlayIncludesStreaming());
      }
      if (hasShowSteamDeckInfo()) {
        hash = (37 * hash) + SHOW_STEAM_DECK_INFO_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getShowSteamDeckInfo());
      }
      if (hasEnableShaderPrecache()) {
        hash = (37 * hash) + ENABLE_SHADER_PRECACHE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableShaderPrecache());
      }
      if (hasEnableShaderBackgroundProcessing()) {
        hash = (37 * hash) + ENABLE_SHADER_BACKGROUND_PROCESSING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getEnableShaderBackgroundProcessing());
      }
      if (hasShaderPrecachedSize()) {
        hash = (37 * hash) + SHADER_PRECACHED_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getShaderPrecachedSize());
      }
      if (hasNeedsSteamServiceRepair()) {
        hash = (37 * hash) + NEEDS_STEAM_SERVICE_REPAIR_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getNeedsSteamServiceRepair());
      }
      if (hasDownloadPeerContent()) {
        hash = (37 * hash) + DOWNLOAD_PEER_CONTENT_FIELD_NUMBER;
        hash = (53 * hash) + getDownloadPeerContent();
      }
      if (hasDownloadRateBitsPerS()) {
        hash = (37 * hash) + DOWNLOAD_RATE_BITS_PER_S_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDownloadRateBitsPerS());
      }
      if (hasRestrictAutoUpdates()) {
        hash = (37 * hash) + RESTRICT_AUTO_UPDATES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getRestrictAutoUpdates());
      }
      if (hasRestrictAutoUpdatesStart()) {
        hash = (37 * hash) + RESTRICT_AUTO_UPDATES_START_FIELD_NUMBER;
        hash = (53 * hash) + getRestrictAutoUpdatesStart();
      }
      if (hasRestrictAutoUpdatesEnd()) {
        hash = (37 * hash) + RESTRICT_AUTO_UPDATES_END_FIELD_NUMBER;
        hash = (53 * hash) + getRestrictAutoUpdatesEnd();
      }
      if (hasDownloadRegion()) {
        hash = (37 * hash) + DOWNLOAD_REGION_FIELD_NUMBER;
        hash = (53 * hash) + getDownloadRegion();
      }
      if (hasDownloadWhileAppRunning()) {
        hash = (37 * hash) + DOWNLOAD_WHILE_APP_RUNNING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDownloadWhileAppRunning());
      }
      if (hasDownloadThrottleWhileStreaming()) {
        hash = (37 * hash) + DOWNLOAD_THROTTLE_WHILE_STREAMING_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDownloadThrottleWhileStreaming());
      }
      if (hasDownloadThrottleRate()) {
        hash = (37 * hash) + DOWNLOAD_THROTTLE_RATE_FIELD_NUMBER;
        hash = (53 * hash) + getDownloadThrottleRate();
      }
      if (hasCloudEnabled()) {
        hash = (37 * hash) + CLOUD_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getCloudEnabled());
      }
      if (hasShowScreenshotManager()) {
        hash = (37 * hash) + SHOW_SCREENSHOT_MANAGER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getShowScreenshotManager());
      }
      if (hasMusicVolume()) {
        hash = (37 * hash) + MUSIC_VOLUME_FIELD_NUMBER;
        hash = (53 * hash) + getMusicVolume();
      }
      if (hasMusicPauseOnAppStart()) {
        hash = (37 * hash) + MUSIC_PAUSE_ON_APP_START_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getMusicPauseOnAppStart());
      }
      if (hasMusicPauseOnVoiceChat()) {
        hash = (37 * hash) + MUSIC_PAUSE_ON_VOICE_CHAT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getMusicPauseOnVoiceChat());
      }
      if (hasMusicDownloadHighQuality()) {
        hash = (37 * hash) + MUSIC_DOWNLOAD_HIGH_QUALITY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getMusicDownloadHighQuality());
      }
      if (hasMusicPlaylistNotification()) {
        hash = (37 * hash) + MUSIC_PLAYLIST_NOTIFICATION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getMusicPlaylistNotification());
      }
      if (hasBroadcastPermissions()) {
        hash = (37 * hash) + BROADCAST_PERMISSIONS_FIELD_NUMBER;
        hash = (53 * hash) + broadcastPermissions_;
      }
      if (hasBroadcastOutputWidth()) {
        hash = (37 * hash) + BROADCAST_OUTPUT_WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + getBroadcastOutputWidth();
      }
      if (hasBroadcastOutputHeight()) {
        hash = (37 * hash) + BROADCAST_OUTPUT_HEIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getBroadcastOutputHeight();
      }
      if (hasBroadcastBitrate()) {
        hash = (37 * hash) + BROADCAST_BITRATE_FIELD_NUMBER;
        hash = (53 * hash) + getBroadcastBitrate();
      }
      if (hasBroadcastEncodingOption()) {
        hash = (37 * hash) + BROADCAST_ENCODING_OPTION_FIELD_NUMBER;
        hash = (53 * hash) + broadcastEncodingOption_;
      }
      if (hasBroadcastRecordAllVideo()) {
        hash = (37 * hash) + BROADCAST_RECORD_ALL_VIDEO_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBroadcastRecordAllVideo());
      }
      if (hasBroadcastRecordAllAudio()) {
        hash = (37 * hash) + BROADCAST_RECORD_ALL_AUDIO_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBroadcastRecordAllAudio());
      }
      if (hasBroadcastRecordMicrophone()) {
        hash = (37 * hash) + BROADCAST_RECORD_MICROPHONE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBroadcastRecordMicrophone());
      }
      if (hasBroadcastShowUploadStats()) {
        hash = (37 * hash) + BROADCAST_SHOW_UPLOAD_STATS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBroadcastShowUploadStats());
      }
      if (hasBroadcastShowLiveReminder()) {
        hash = (37 * hash) + BROADCAST_SHOW_LIVE_REMINDER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getBroadcastShowLiveReminder());
      }
      if (hasBroadcastChatCorner()) {
        hash = (37 * hash) + BROADCAST_CHAT_CORNER_FIELD_NUMBER;
        hash = (53 * hash) + getBroadcastChatCorner();
      }
      if (hasSteamInputConfiguratorErrorMsgEnable()) {
        hash = (37 * hash) + STEAM_INPUT_CONFIGURATOR_ERROR_MSG_ENABLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSteamInputConfiguratorErrorMsgEnable());
      }
      if (hasControllerGuideButtonFocusSteam()) {
        hash = (37 * hash) + CONTROLLER_GUIDE_BUTTON_FOCUS_STEAM_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getControllerGuideButtonFocusSteam());
      }
      if (hasControllerPsSupport()) {
        hash = (37 * hash) + CONTROLLER_PS_SUPPORT_FIELD_NUMBER;
        hash = (53 * hash) + getControllerPsSupport();
      }
      if (hasControllerXboxSupport()) {
        hash = (37 * hash) + CONTROLLER_XBOX_SUPPORT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getControllerXboxSupport());
      }
      if (hasControllerXboxDriver()) {
        hash = (37 * hash) + CONTROLLER_XBOX_DRIVER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getControllerXboxDriver());
      }
      if (hasControllerSwitchSupport()) {
        hash = (37 * hash) + CONTROLLER_SWITCH_SUPPORT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getControllerSwitchSupport());
      }
      if (hasControllerGenericSupport()) {
        hash = (37 * hash) + CONTROLLER_GENERIC_SUPPORT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getControllerGenericSupport());
      }
      if (hasControllerPowerOffTimeout()) {
        hash = (37 * hash) + CONTROLLER_POWER_OFF_TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getControllerPowerOffTimeout();
      }
      if (hasTurnOffControllerOnExit()) {
        hash = (37 * hash) + TURN_OFF_CONTROLLER_ON_EXIT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTurnOffControllerOnExit());
      }
      if (hasControllerCombineNintendoJoycons()) {
        hash = (37 * hash) + CONTROLLER_COMBINE_NINTENDO_JOYCONS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getControllerCombineNintendoJoycons());
      }
      if (hasStartupMovieId()) {
        hash = (37 * hash) + STARTUP_MOVIE_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getStartupMovieId());
      }
      if (hasStartupMovieLocalPath()) {
        hash = (37 * hash) + STARTUP_MOVIE_LOCAL_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getStartupMovieLocalPath().hashCode();
      }
      if (hasStartupMovieShuffle()) {
        hash = (37 * hash) + STARTUP_MOVIE_SHUFFLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getStartupMovieShuffle());
      }
      if (hasStartupMovieUsedForResume()) {
        hash = (37 * hash) + STARTUP_MOVIE_USED_FOR_RESUME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getStartupMovieUsedForResume());
      }
      if (hasGameNotesEnableSpellcheck()) {
        hash = (37 * hash) + GAME_NOTES_ENABLE_SPELLCHECK_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getGameNotesEnableSpellcheck());
      }
      if (hasScreenshotItemsPerRow()) {
        hash = (37 * hash) + SCREENSHOT_ITEMS_PER_ROW_FIELD_NUMBER;
        hash = (53 * hash) + getScreenshotItemsPerRow();
      }
      if (hasGBackgroundEnabled()) {
        hash = (37 * hash) + G_BACKGROUND_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getGBackgroundEnabled());
      }
      if (hasGBackgroundPath()) {
        hash = (37 * hash) + G_BACKGROUND_PATH_FIELD_NUMBER;
        hash = (53 * hash) + getGBackgroundPath().hashCode();
      }
      if (hasGBackgroundMaxKeep()) {
        hash = (37 * hash) + G_BACKGROUND_MAX_KEEP_FIELD_NUMBER;
        hash = (53 * hash) + getGBackgroundMaxKeep().hashCode();
      }
      if (hasGBackgroundTimeResolution()) {
        hash = (37 * hash) + G_BACKGROUND_TIME_RESOLUTION_FIELD_NUMBER;
        hash = (53 * hash) + getGBackgroundTimeResolution();
      }
      if (hasGBackgroundDevmode()) {
        hash = (37 * hash) + G_BACKGROUND_DEVMODE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getGBackgroundDevmode());
      }
      if (hasGBackgroundMk()) {
        hash = (37 * hash) + G_BACKGROUND_MK_FIELD_NUMBER;
        hash = (53 * hash) + getGBackgroundMk().hashCode();
      }
      if (hasGBackgroundTg()) {
        hash = (37 * hash) + G_BACKGROUND_TG_FIELD_NUMBER;
        hash = (53 * hash) + getGBackgroundTg().hashCode();
      }
      if (hasGBackgroundAM()) {
        hash = (37 * hash) + G_BACKGROUND_A_M_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getGBackgroundAM());
      }
      if (hasShowTimestampsInConsole()) {
        hash = (37 * hash) + SHOW_TIMESTAMPS_IN_CONSOLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getShowTimestampsInConsole());
      }
      if (hasForceOobe()) {
        hash = (37 * hash) + FORCE_OOBE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getForceOobe());
      }
      if (hasOverrideBrowserComposerMode()) {
        hash = (37 * hash) + OVERRIDE_BROWSER_COMPOSER_MODE_FIELD_NUMBER;
        hash = (53 * hash) + getOverrideBrowserComposerMode();
      }
      if (hasCefRemoteDebuggingEnabled()) {
        hash = (37 * hash) + CEF_REMOTE_DEBUGGING_ENABLED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getCefRemoteDebuggingEnabled());
      }
      if (hasForceDeckPerfTab()) {
        hash = (37 * hash) + FORCE_DECK_PERF_TAB_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getForceDeckPerfTab());
      }
      if (hasForceFakeMandatoryUpdate()) {
        hash = (37 * hash) + FORCE_FAKE_MANDATORY_UPDATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getForceFakeMandatoryUpdate());
      }
      if (hasGamescopeHdrVisualization()) {
        hash = (37 * hash) + GAMESCOPE_HDR_VISUALIZATION_FIELD_NUMBER;
        hash = (53 * hash) + gamescopeHdrVisualization_;
      }
      if (hasGamescopeAppTargetFramerate()) {
        hash = (37 * hash) + GAMESCOPE_APP_TARGET_FRAMERATE_FIELD_NUMBER;
        hash = (53 * hash) + getGamescopeAppTargetFramerate();
      }
      if (hasGamescopeEnableAppTargetFramerate()) {
        hash = (37 * hash) + GAMESCOPE_ENABLE_APP_TARGET_FRAMERATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getGamescopeEnableAppTargetFramerate());
      }
      if (hasGamescopeDisableFramelimit()) {
        hash = (37 * hash) + GAMESCOPE_DISABLE_FRAMELIMIT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getGamescopeDisableFramelimit());
      }
      if (hasGamescopeDisplayRefreshRate()) {
        hash = (37 * hash) + GAMESCOPE_DISPLAY_REFRESH_RATE_FIELD_NUMBER;
        hash = (53 * hash) + getGamescopeDisplayRefreshRate();
      }
      if (hasGamescopeUseGameRefreshRateInSteam()) {
        hash = (37 * hash) + GAMESCOPE_USE_GAME_REFRESH_RATE_IN_STEAM_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getGamescopeUseGameRefreshRateInSteam());
      }
      if (hasSteamosStatusLedBrightness()) {
        hash = (37 * hash) + STEAMOS_STATUS_LED_BRIGHTNESS_FIELD_NUMBER;
        hash = (53 * hash) + getSteamosStatusLedBrightness();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static SteammessagesClientsettings.CMsgClientSettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static SteammessagesClientsettings.CMsgClientSettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SteammessagesClientsettings.CMsgClientSettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SteammessagesClientsettings.CMsgClientSettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CMsgClientSettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CMsgClientSettings)
        SteammessagesClientsettings.CMsgClientSettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return SteammessagesClientsettings.internal_static_CMsgClientSettings_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return SteammessagesClientsettings.internal_static_CMsgClientSettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SteammessagesClientsettings.CMsgClientSettings.class, SteammessagesClientsettings.CMsgClientSettings.Builder.class);
      }

      // Construct using SteammessagesClientsettings.CMsgClientSettings.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getOverlayKeyFieldBuilder();
          getScreenshotKeyFieldBuilder();
          getVoicePushToTalkKeyFieldBuilder();
          getGBackgroundMkFieldBuilder();
          getGBackgroundTgFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        bitField1_ = 0;
        bitField2_ = 0;
        bitField3_ = 0;
        bitField4_ = 0;
        noSavePersonalInfo_ = false;
        oobeTestModeEnabled_ = false;
        inClientBeta_ = false;
        isSteamSideloaded_ = false;
        preferredMonitor_ = "";
        steamCefGpuBlocklistDisabled_ = false;
        bigpictureWindowed_ = false;
        displayName_ = "";
        isExternalDisplay_ = false;
        steamOsUnderscanLevel_ = 0F;
        steamOsUnderscanEnabled_ = false;
        minScaleFactor_ = 0F;
        maxScaleFactor_ = 0F;
        autoScaleFactor_ = 0F;
        smallMode_ = false;
        skipSteamvrInstallDialog_ = false;
        alwaysShowUserChooser_ = false;
        showFamilySharingNotifications_ = false;
        overlayFpsCounterCorner_ = 0;
        overlayFpsCounterHighContrast_ = false;
        overlayKey_ = null;
        if (overlayKeyBuilder_ != null) {
          overlayKeyBuilder_.dispose();
          overlayKeyBuilder_ = null;
        }
        screenshotKey_ = null;
        if (screenshotKeyBuilder_ != null) {
          screenshotKeyBuilder_.dispose();
          screenshotKeyBuilder_ = null;
        }
        enableOverlay_ = false;
        enableScreenshotNotification_ = false;
        enableScreenshotSound_ = false;
        saveUncompressedScreenshots_ = false;
        screenshotsPath_ = "";
        defaultPingRate_ = 0;
        serverPingRate_ = 0;
        steamNetworkingShareIp_ = 0;
        webBrowserHome_ = "";
        voiceMicDeviceName_ = "";
        voiceMicInputGain_ = 0F;
        voiceSpeakerOutputGain_ = 0F;
        voicePushToTalkSetting_ = 0;
        voicePushToTalkKey_ = null;
        if (voicePushToTalkKeyBuilder_ != null) {
          voicePushToTalkKeyBuilder_.dispose();
          voicePushToTalkKeyBuilder_ = null;
        }
        overlayToolbarListView_ = false;
        alwaysUseGamepaduiOverlay_ = false;
        overlayTabs_ = "";
        overlayScaleInterface_ = false;
        overlayRestoreBrowserTabs_ = false;
        smoothScrollWebviews_ = false;
        enableGpuAcceleratedWebviews_ = false;
        enableHardwareVideoDecoding_ = false;
        runAtStartup_ = false;
        enableDpiScaling_ = false;
        enableMarketingMessages_ = false;
        startInBigPictureMode_ = false;
        jumplistFlags_ = 0;
        enableUiSounds_ = false;
        disableAllToasts_ = false;
        disableToastsInGame_ = false;
        playSoundOnToast_ = false;
        libraryDisplaySize_ = 0;
        libraryWhatsNewShowOnlyProductUpdates_ = false;
        showStoreContentOnHome_ = false;
        startPage_ = "";
        libraryLowBandwidthMode_ = false;
        libraryLowPerfMode_ = false;
        libraryDisableCommunityContent_ = false;
        libraryDisplayIconInGameList_ = false;
        readyToPlayIncludesStreaming_ = false;
        showSteamDeckInfo_ = false;
        enableShaderPrecache_ = false;
        enableShaderBackgroundProcessing_ = false;
        shaderPrecachedSize_ = 0L;
        needsSteamServiceRepair_ = false;
        downloadPeerContent_ = 0;
        downloadRateBitsPerS_ = false;
        restrictAutoUpdates_ = false;
        restrictAutoUpdatesStart_ = 0;
        restrictAutoUpdatesEnd_ = 0;
        downloadRegion_ = 0;
        downloadWhileAppRunning_ = false;
        downloadThrottleWhileStreaming_ = false;
        downloadThrottleRate_ = 0;
        cloudEnabled_ = false;
        showScreenshotManager_ = false;
        musicVolume_ = 0;
        musicPauseOnAppStart_ = false;
        musicPauseOnVoiceChat_ = false;
        musicDownloadHighQuality_ = false;
        musicPlaylistNotification_ = false;
        broadcastPermissions_ = 0;
        broadcastOutputWidth_ = 0;
        broadcastOutputHeight_ = 0;
        broadcastBitrate_ = 0;
        broadcastEncodingOption_ = 0;
        broadcastRecordAllVideo_ = false;
        broadcastRecordAllAudio_ = false;
        broadcastRecordMicrophone_ = false;
        broadcastShowUploadStats_ = false;
        broadcastShowLiveReminder_ = false;
        broadcastChatCorner_ = 0;
        steamInputConfiguratorErrorMsgEnable_ = false;
        controllerGuideButtonFocusSteam_ = false;
        controllerPsSupport_ = 0;
        controllerXboxSupport_ = false;
        controllerXboxDriver_ = false;
        controllerSwitchSupport_ = false;
        controllerGenericSupport_ = false;
        controllerPowerOffTimeout_ = 0;
        turnOffControllerOnExit_ = false;
        controllerCombineNintendoJoycons_ = false;
        startupMovieId_ = 0L;
        startupMovieLocalPath_ = "";
        startupMovieShuffle_ = false;
        startupMovieUsedForResume_ = false;
        gameNotesEnableSpellcheck_ = false;
        screenshotItemsPerRow_ = 0;
        gBackgroundEnabled_ = false;
        gBackgroundPath_ = "";
        gBackgroundMaxKeep_ = "";
        gBackgroundTimeResolution_ = 0;
        gBackgroundDevmode_ = false;
        gBackgroundMk_ = null;
        if (gBackgroundMkBuilder_ != null) {
          gBackgroundMkBuilder_.dispose();
          gBackgroundMkBuilder_ = null;
        }
        gBackgroundTg_ = null;
        if (gBackgroundTgBuilder_ != null) {
          gBackgroundTgBuilder_.dispose();
          gBackgroundTgBuilder_ = null;
        }
        gBackgroundAM_ = false;
        showTimestampsInConsole_ = false;
        forceOobe_ = false;
        overrideBrowserComposerMode_ = 0;
        cefRemoteDebuggingEnabled_ = false;
        forceDeckPerfTab_ = false;
        forceFakeMandatoryUpdate_ = false;
        gamescopeHdrVisualization_ = 0;
        gamescopeAppTargetFramerate_ = 0;
        gamescopeEnableAppTargetFramerate_ = false;
        gamescopeDisableFramelimit_ = false;
        gamescopeDisplayRefreshRate_ = 0;
        gamescopeUseGameRefreshRateInSteam_ = false;
        steamosStatusLedBrightness_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return SteammessagesClientsettings.internal_static_CMsgClientSettings_descriptor;
      }

      @java.lang.Override
      public SteammessagesClientsettings.CMsgClientSettings getDefaultInstanceForType() {
        return SteammessagesClientsettings.CMsgClientSettings.getDefaultInstance();
      }

      @java.lang.Override
      public SteammessagesClientsettings.CMsgClientSettings build() {
        SteammessagesClientsettings.CMsgClientSettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public SteammessagesClientsettings.CMsgClientSettings buildPartial() {
        SteammessagesClientsettings.CMsgClientSettings result = new SteammessagesClientsettings.CMsgClientSettings(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        if (bitField1_ != 0) { buildPartial1(result); }
        if (bitField2_ != 0) { buildPartial2(result); }
        if (bitField3_ != 0) { buildPartial3(result); }
        if (bitField4_ != 0) { buildPartial4(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(SteammessagesClientsettings.CMsgClientSettings result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.noSavePersonalInfo_ = noSavePersonalInfo_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.oobeTestModeEnabled_ = oobeTestModeEnabled_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.inClientBeta_ = inClientBeta_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.isSteamSideloaded_ = isSteamSideloaded_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.preferredMonitor_ = preferredMonitor_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.steamCefGpuBlocklistDisabled_ = steamCefGpuBlocklistDisabled_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.bigpictureWindowed_ = bigpictureWindowed_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.displayName_ = displayName_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.isExternalDisplay_ = isExternalDisplay_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.steamOsUnderscanLevel_ = steamOsUnderscanLevel_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.steamOsUnderscanEnabled_ = steamOsUnderscanEnabled_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.minScaleFactor_ = minScaleFactor_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.maxScaleFactor_ = maxScaleFactor_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.autoScaleFactor_ = autoScaleFactor_;
          to_bitField0_ |= 0x00002000;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.smallMode_ = smallMode_;
          to_bitField0_ |= 0x00004000;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.skipSteamvrInstallDialog_ = skipSteamvrInstallDialog_;
          to_bitField0_ |= 0x00008000;
        }
        if (((from_bitField0_ & 0x00010000) != 0)) {
          result.alwaysShowUserChooser_ = alwaysShowUserChooser_;
          to_bitField0_ |= 0x00010000;
        }
        if (((from_bitField0_ & 0x00020000) != 0)) {
          result.showFamilySharingNotifications_ = showFamilySharingNotifications_;
          to_bitField0_ |= 0x00020000;
        }
        if (((from_bitField0_ & 0x00040000) != 0)) {
          result.overlayFpsCounterCorner_ = overlayFpsCounterCorner_;
          to_bitField0_ |= 0x00040000;
        }
        if (((from_bitField0_ & 0x00080000) != 0)) {
          result.overlayFpsCounterHighContrast_ = overlayFpsCounterHighContrast_;
          to_bitField0_ |= 0x00080000;
        }
        if (((from_bitField0_ & 0x00100000) != 0)) {
          result.overlayKey_ = overlayKeyBuilder_ == null
              ? overlayKey_
              : overlayKeyBuilder_.build();
          to_bitField0_ |= 0x00100000;
        }
        if (((from_bitField0_ & 0x00200000) != 0)) {
          result.screenshotKey_ = screenshotKeyBuilder_ == null
              ? screenshotKey_
              : screenshotKeyBuilder_.build();
          to_bitField0_ |= 0x00200000;
        }
        if (((from_bitField0_ & 0x00400000) != 0)) {
          result.enableOverlay_ = enableOverlay_;
          to_bitField0_ |= 0x00400000;
        }
        if (((from_bitField0_ & 0x00800000) != 0)) {
          result.enableScreenshotNotification_ = enableScreenshotNotification_;
          to_bitField0_ |= 0x00800000;
        }
        if (((from_bitField0_ & 0x01000000) != 0)) {
          result.enableScreenshotSound_ = enableScreenshotSound_;
          to_bitField0_ |= 0x01000000;
        }
        if (((from_bitField0_ & 0x02000000) != 0)) {
          result.saveUncompressedScreenshots_ = saveUncompressedScreenshots_;
          to_bitField0_ |= 0x02000000;
        }
        if (((from_bitField0_ & 0x04000000) != 0)) {
          result.screenshotsPath_ = screenshotsPath_;
          to_bitField0_ |= 0x04000000;
        }
        if (((from_bitField0_ & 0x08000000) != 0)) {
          result.defaultPingRate_ = defaultPingRate_;
          to_bitField0_ |= 0x08000000;
        }
        if (((from_bitField0_ & 0x10000000) != 0)) {
          result.serverPingRate_ = serverPingRate_;
          to_bitField0_ |= 0x10000000;
        }
        if (((from_bitField0_ & 0x20000000) != 0)) {
          result.steamNetworkingShareIp_ = steamNetworkingShareIp_;
          to_bitField0_ |= 0x20000000;
        }
        if (((from_bitField0_ & 0x40000000) != 0)) {
          result.webBrowserHome_ = webBrowserHome_;
          to_bitField0_ |= 0x40000000;
        }
        if (((from_bitField0_ & 0x80000000) != 0)) {
          result.voiceMicDeviceName_ = voiceMicDeviceName_;
          to_bitField0_ |= 0x80000000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      private void buildPartial1(SteammessagesClientsettings.CMsgClientSettings result) {
        int from_bitField1_ = bitField1_;
        int to_bitField1_ = 0;
        if (((from_bitField1_ & 0x00000001) != 0)) {
          result.voiceMicInputGain_ = voiceMicInputGain_;
          to_bitField1_ |= 0x00000001;
        }
        if (((from_bitField1_ & 0x00000002) != 0)) {
          result.voiceSpeakerOutputGain_ = voiceSpeakerOutputGain_;
          to_bitField1_ |= 0x00000002;
        }
        if (((from_bitField1_ & 0x00000004) != 0)) {
          result.voicePushToTalkSetting_ = voicePushToTalkSetting_;
          to_bitField1_ |= 0x00000004;
        }
        if (((from_bitField1_ & 0x00000008) != 0)) {
          result.voicePushToTalkKey_ = voicePushToTalkKeyBuilder_ == null
              ? voicePushToTalkKey_
              : voicePushToTalkKeyBuilder_.build();
          to_bitField1_ |= 0x00000008;
        }
        if (((from_bitField1_ & 0x00000010) != 0)) {
          result.overlayToolbarListView_ = overlayToolbarListView_;
          to_bitField1_ |= 0x00000010;
        }
        if (((from_bitField1_ & 0x00000020) != 0)) {
          result.alwaysUseGamepaduiOverlay_ = alwaysUseGamepaduiOverlay_;
          to_bitField1_ |= 0x00000020;
        }
        if (((from_bitField1_ & 0x00000040) != 0)) {
          result.overlayTabs_ = overlayTabs_;
          to_bitField1_ |= 0x00000040;
        }
        if (((from_bitField1_ & 0x00000080) != 0)) {
          result.overlayScaleInterface_ = overlayScaleInterface_;
          to_bitField1_ |= 0x00000080;
        }
        if (((from_bitField1_ & 0x00000100) != 0)) {
          result.overlayRestoreBrowserTabs_ = overlayRestoreBrowserTabs_;
          to_bitField1_ |= 0x00000100;
        }
        if (((from_bitField1_ & 0x00000200) != 0)) {
          result.smoothScrollWebviews_ = smoothScrollWebviews_;
          to_bitField1_ |= 0x00000200;
        }
        if (((from_bitField1_ & 0x00000400) != 0)) {
          result.enableGpuAcceleratedWebviews_ = enableGpuAcceleratedWebviews_;
          to_bitField1_ |= 0x00000400;
        }
        if (((from_bitField1_ & 0x00000800) != 0)) {
          result.enableHardwareVideoDecoding_ = enableHardwareVideoDecoding_;
          to_bitField1_ |= 0x00000800;
        }
        if (((from_bitField1_ & 0x00001000) != 0)) {
          result.runAtStartup_ = runAtStartup_;
          to_bitField1_ |= 0x00001000;
        }
        if (((from_bitField1_ & 0x00002000) != 0)) {
          result.enableDpiScaling_ = enableDpiScaling_;
          to_bitField1_ |= 0x00002000;
        }
        if (((from_bitField1_ & 0x00004000) != 0)) {
          result.enableMarketingMessages_ = enableMarketingMessages_;
          to_bitField1_ |= 0x00004000;
        }
        if (((from_bitField1_ & 0x00008000) != 0)) {
          result.startInBigPictureMode_ = startInBigPictureMode_;
          to_bitField1_ |= 0x00008000;
        }
        if (((from_bitField1_ & 0x00010000) != 0)) {
          result.jumplistFlags_ = jumplistFlags_;
          to_bitField1_ |= 0x00010000;
        }
        if (((from_bitField1_ & 0x00020000) != 0)) {
          result.enableUiSounds_ = enableUiSounds_;
          to_bitField1_ |= 0x00020000;
        }
        if (((from_bitField1_ & 0x00040000) != 0)) {
          result.disableAllToasts_ = disableAllToasts_;
          to_bitField1_ |= 0x00040000;
        }
        if (((from_bitField1_ & 0x00080000) != 0)) {
          result.disableToastsInGame_ = disableToastsInGame_;
          to_bitField1_ |= 0x00080000;
        }
        if (((from_bitField1_ & 0x00100000) != 0)) {
          result.playSoundOnToast_ = playSoundOnToast_;
          to_bitField1_ |= 0x00100000;
        }
        if (((from_bitField1_ & 0x00200000) != 0)) {
          result.libraryDisplaySize_ = libraryDisplaySize_;
          to_bitField1_ |= 0x00200000;
        }
        if (((from_bitField1_ & 0x00400000) != 0)) {
          result.libraryWhatsNewShowOnlyProductUpdates_ = libraryWhatsNewShowOnlyProductUpdates_;
          to_bitField1_ |= 0x00400000;
        }
        if (((from_bitField1_ & 0x00800000) != 0)) {
          result.showStoreContentOnHome_ = showStoreContentOnHome_;
          to_bitField1_ |= 0x00800000;
        }
        if (((from_bitField1_ & 0x01000000) != 0)) {
          result.startPage_ = startPage_;
          to_bitField1_ |= 0x01000000;
        }
        if (((from_bitField1_ & 0x02000000) != 0)) {
          result.libraryLowBandwidthMode_ = libraryLowBandwidthMode_;
          to_bitField1_ |= 0x02000000;
        }
        if (((from_bitField1_ & 0x04000000) != 0)) {
          result.libraryLowPerfMode_ = libraryLowPerfMode_;
          to_bitField1_ |= 0x04000000;
        }
        if (((from_bitField1_ & 0x08000000) != 0)) {
          result.libraryDisableCommunityContent_ = libraryDisableCommunityContent_;
          to_bitField1_ |= 0x08000000;
        }
        if (((from_bitField1_ & 0x10000000) != 0)) {
          result.libraryDisplayIconInGameList_ = libraryDisplayIconInGameList_;
          to_bitField1_ |= 0x10000000;
        }
        if (((from_bitField1_ & 0x20000000) != 0)) {
          result.readyToPlayIncludesStreaming_ = readyToPlayIncludesStreaming_;
          to_bitField1_ |= 0x20000000;
        }
        if (((from_bitField1_ & 0x40000000) != 0)) {
          result.showSteamDeckInfo_ = showSteamDeckInfo_;
          to_bitField1_ |= 0x40000000;
        }
        if (((from_bitField1_ & 0x80000000) != 0)) {
          result.enableShaderPrecache_ = enableShaderPrecache_;
          to_bitField1_ |= 0x80000000;
        }
        result.bitField1_ |= to_bitField1_;
      }

      private void buildPartial2(SteammessagesClientsettings.CMsgClientSettings result) {
        int from_bitField2_ = bitField2_;
        int to_bitField2_ = 0;
        if (((from_bitField2_ & 0x00000001) != 0)) {
          result.enableShaderBackgroundProcessing_ = enableShaderBackgroundProcessing_;
          to_bitField2_ |= 0x00000001;
        }
        if (((from_bitField2_ & 0x00000002) != 0)) {
          result.shaderPrecachedSize_ = shaderPrecachedSize_;
          to_bitField2_ |= 0x00000002;
        }
        if (((from_bitField2_ & 0x00000004) != 0)) {
          result.needsSteamServiceRepair_ = needsSteamServiceRepair_;
          to_bitField2_ |= 0x00000004;
        }
        if (((from_bitField2_ & 0x00000008) != 0)) {
          result.downloadPeerContent_ = downloadPeerContent_;
          to_bitField2_ |= 0x00000008;
        }
        if (((from_bitField2_ & 0x00000010) != 0)) {
          result.downloadRateBitsPerS_ = downloadRateBitsPerS_;
          to_bitField2_ |= 0x00000010;
        }
        if (((from_bitField2_ & 0x00000020) != 0)) {
          result.restrictAutoUpdates_ = restrictAutoUpdates_;
          to_bitField2_ |= 0x00000020;
        }
        if (((from_bitField2_ & 0x00000040) != 0)) {
          result.restrictAutoUpdatesStart_ = restrictAutoUpdatesStart_;
          to_bitField2_ |= 0x00000040;
        }
        if (((from_bitField2_ & 0x00000080) != 0)) {
          result.restrictAutoUpdatesEnd_ = restrictAutoUpdatesEnd_;
          to_bitField2_ |= 0x00000080;
        }
        if (((from_bitField2_ & 0x00000100) != 0)) {
          result.downloadRegion_ = downloadRegion_;
          to_bitField2_ |= 0x00000100;
        }
        if (((from_bitField2_ & 0x00000200) != 0)) {
          result.downloadWhileAppRunning_ = downloadWhileAppRunning_;
          to_bitField2_ |= 0x00000200;
        }
        if (((from_bitField2_ & 0x00000400) != 0)) {
          result.downloadThrottleWhileStreaming_ = downloadThrottleWhileStreaming_;
          to_bitField2_ |= 0x00000400;
        }
        if (((from_bitField2_ & 0x00000800) != 0)) {
          result.downloadThrottleRate_ = downloadThrottleRate_;
          to_bitField2_ |= 0x00000800;
        }
        if (((from_bitField2_ & 0x00001000) != 0)) {
          result.cloudEnabled_ = cloudEnabled_;
          to_bitField2_ |= 0x00001000;
        }
        if (((from_bitField2_ & 0x00002000) != 0)) {
          result.showScreenshotManager_ = showScreenshotManager_;
          to_bitField2_ |= 0x00002000;
        }
        if (((from_bitField2_ & 0x00004000) != 0)) {
          result.musicVolume_ = musicVolume_;
          to_bitField2_ |= 0x00004000;
        }
        if (((from_bitField2_ & 0x00008000) != 0)) {
          result.musicPauseOnAppStart_ = musicPauseOnAppStart_;
          to_bitField2_ |= 0x00008000;
        }
        if (((from_bitField2_ & 0x00010000) != 0)) {
          result.musicPauseOnVoiceChat_ = musicPauseOnVoiceChat_;
          to_bitField2_ |= 0x00010000;
        }
        if (((from_bitField2_ & 0x00020000) != 0)) {
          result.musicDownloadHighQuality_ = musicDownloadHighQuality_;
          to_bitField2_ |= 0x00020000;
        }
        if (((from_bitField2_ & 0x00040000) != 0)) {
          result.musicPlaylistNotification_ = musicPlaylistNotification_;
          to_bitField2_ |= 0x00040000;
        }
        if (((from_bitField2_ & 0x00080000) != 0)) {
          result.broadcastPermissions_ = broadcastPermissions_;
          to_bitField2_ |= 0x00080000;
        }
        if (((from_bitField2_ & 0x00100000) != 0)) {
          result.broadcastOutputWidth_ = broadcastOutputWidth_;
          to_bitField2_ |= 0x00100000;
        }
        if (((from_bitField2_ & 0x00200000) != 0)) {
          result.broadcastOutputHeight_ = broadcastOutputHeight_;
          to_bitField2_ |= 0x00200000;
        }
        if (((from_bitField2_ & 0x00400000) != 0)) {
          result.broadcastBitrate_ = broadcastBitrate_;
          to_bitField2_ |= 0x00400000;
        }
        if (((from_bitField2_ & 0x00800000) != 0)) {
          result.broadcastEncodingOption_ = broadcastEncodingOption_;
          to_bitField2_ |= 0x00800000;
        }
        if (((from_bitField2_ & 0x01000000) != 0)) {
          result.broadcastRecordAllVideo_ = broadcastRecordAllVideo_;
          to_bitField2_ |= 0x01000000;
        }
        if (((from_bitField2_ & 0x02000000) != 0)) {
          result.broadcastRecordAllAudio_ = broadcastRecordAllAudio_;
          to_bitField2_ |= 0x02000000;
        }
        if (((from_bitField2_ & 0x04000000) != 0)) {
          result.broadcastRecordMicrophone_ = broadcastRecordMicrophone_;
          to_bitField2_ |= 0x04000000;
        }
        if (((from_bitField2_ & 0x08000000) != 0)) {
          result.broadcastShowUploadStats_ = broadcastShowUploadStats_;
          to_bitField2_ |= 0x08000000;
        }
        if (((from_bitField2_ & 0x10000000) != 0)) {
          result.broadcastShowLiveReminder_ = broadcastShowLiveReminder_;
          to_bitField2_ |= 0x10000000;
        }
        if (((from_bitField2_ & 0x20000000) != 0)) {
          result.broadcastChatCorner_ = broadcastChatCorner_;
          to_bitField2_ |= 0x20000000;
        }
        if (((from_bitField2_ & 0x40000000) != 0)) {
          result.steamInputConfiguratorErrorMsgEnable_ = steamInputConfiguratorErrorMsgEnable_;
          to_bitField2_ |= 0x40000000;
        }
        if (((from_bitField2_ & 0x80000000) != 0)) {
          result.controllerGuideButtonFocusSteam_ = controllerGuideButtonFocusSteam_;
          to_bitField2_ |= 0x80000000;
        }
        result.bitField2_ |= to_bitField2_;
      }

      private void buildPartial3(SteammessagesClientsettings.CMsgClientSettings result) {
        int from_bitField3_ = bitField3_;
        int to_bitField3_ = 0;
        if (((from_bitField3_ & 0x00000001) != 0)) {
          result.controllerPsSupport_ = controllerPsSupport_;
          to_bitField3_ |= 0x00000001;
        }
        if (((from_bitField3_ & 0x00000002) != 0)) {
          result.controllerXboxSupport_ = controllerXboxSupport_;
          to_bitField3_ |= 0x00000002;
        }
        if (((from_bitField3_ & 0x00000004) != 0)) {
          result.controllerXboxDriver_ = controllerXboxDriver_;
          to_bitField3_ |= 0x00000004;
        }
        if (((from_bitField3_ & 0x00000008) != 0)) {
          result.controllerSwitchSupport_ = controllerSwitchSupport_;
          to_bitField3_ |= 0x00000008;
        }
        if (((from_bitField3_ & 0x00000010) != 0)) {
          result.controllerGenericSupport_ = controllerGenericSupport_;
          to_bitField3_ |= 0x00000010;
        }
        if (((from_bitField3_ & 0x00000020) != 0)) {
          result.controllerPowerOffTimeout_ = controllerPowerOffTimeout_;
          to_bitField3_ |= 0x00000020;
        }
        if (((from_bitField3_ & 0x00000040) != 0)) {
          result.turnOffControllerOnExit_ = turnOffControllerOnExit_;
          to_bitField3_ |= 0x00000040;
        }
        if (((from_bitField3_ & 0x00000080) != 0)) {
          result.controllerCombineNintendoJoycons_ = controllerCombineNintendoJoycons_;
          to_bitField3_ |= 0x00000080;
        }
        if (((from_bitField3_ & 0x00000100) != 0)) {
          result.startupMovieId_ = startupMovieId_;
          to_bitField3_ |= 0x00000100;
        }
        if (((from_bitField3_ & 0x00000200) != 0)) {
          result.startupMovieLocalPath_ = startupMovieLocalPath_;
          to_bitField3_ |= 0x00000200;
        }
        if (((from_bitField3_ & 0x00000400) != 0)) {
          result.startupMovieShuffle_ = startupMovieShuffle_;
          to_bitField3_ |= 0x00000400;
        }
        if (((from_bitField3_ & 0x00000800) != 0)) {
          result.startupMovieUsedForResume_ = startupMovieUsedForResume_;
          to_bitField3_ |= 0x00000800;
        }
        if (((from_bitField3_ & 0x00001000) != 0)) {
          result.gameNotesEnableSpellcheck_ = gameNotesEnableSpellcheck_;
          to_bitField3_ |= 0x00001000;
        }
        if (((from_bitField3_ & 0x00002000) != 0)) {
          result.screenshotItemsPerRow_ = screenshotItemsPerRow_;
          to_bitField3_ |= 0x00002000;
        }
        if (((from_bitField3_ & 0x00004000) != 0)) {
          result.gBackgroundEnabled_ = gBackgroundEnabled_;
          to_bitField3_ |= 0x00004000;
        }
        if (((from_bitField3_ & 0x00008000) != 0)) {
          result.gBackgroundPath_ = gBackgroundPath_;
          to_bitField3_ |= 0x00008000;
        }
        if (((from_bitField3_ & 0x00010000) != 0)) {
          result.gBackgroundMaxKeep_ = gBackgroundMaxKeep_;
          to_bitField3_ |= 0x00010000;
        }
        if (((from_bitField3_ & 0x00020000) != 0)) {
          result.gBackgroundTimeResolution_ = gBackgroundTimeResolution_;
          to_bitField3_ |= 0x00020000;
        }
        if (((from_bitField3_ & 0x00040000) != 0)) {
          result.gBackgroundDevmode_ = gBackgroundDevmode_;
          to_bitField3_ |= 0x00040000;
        }
        if (((from_bitField3_ & 0x00080000) != 0)) {
          result.gBackgroundMk_ = gBackgroundMkBuilder_ == null
              ? gBackgroundMk_
              : gBackgroundMkBuilder_.build();
          to_bitField3_ |= 0x00080000;
        }
        if (((from_bitField3_ & 0x00100000) != 0)) {
          result.gBackgroundTg_ = gBackgroundTgBuilder_ == null
              ? gBackgroundTg_
              : gBackgroundTgBuilder_.build();
          to_bitField3_ |= 0x00100000;
        }
        if (((from_bitField3_ & 0x00200000) != 0)) {
          result.gBackgroundAM_ = gBackgroundAM_;
          to_bitField3_ |= 0x00200000;
        }
        if (((from_bitField3_ & 0x00400000) != 0)) {
          result.showTimestampsInConsole_ = showTimestampsInConsole_;
          to_bitField3_ |= 0x00400000;
        }
        if (((from_bitField3_ & 0x00800000) != 0)) {
          result.forceOobe_ = forceOobe_;
          to_bitField3_ |= 0x00800000;
        }
        if (((from_bitField3_ & 0x01000000) != 0)) {
          result.overrideBrowserComposerMode_ = overrideBrowserComposerMode_;
          to_bitField3_ |= 0x01000000;
        }
        if (((from_bitField3_ & 0x02000000) != 0)) {
          result.cefRemoteDebuggingEnabled_ = cefRemoteDebuggingEnabled_;
          to_bitField3_ |= 0x02000000;
        }
        if (((from_bitField3_ & 0x04000000) != 0)) {
          result.forceDeckPerfTab_ = forceDeckPerfTab_;
          to_bitField3_ |= 0x04000000;
        }
        if (((from_bitField3_ & 0x08000000) != 0)) {
          result.forceFakeMandatoryUpdate_ = forceFakeMandatoryUpdate_;
          to_bitField3_ |= 0x08000000;
        }
        if (((from_bitField3_ & 0x10000000) != 0)) {
          result.gamescopeHdrVisualization_ = gamescopeHdrVisualization_;
          to_bitField3_ |= 0x10000000;
        }
        if (((from_bitField3_ & 0x20000000) != 0)) {
          result.gamescopeAppTargetFramerate_ = gamescopeAppTargetFramerate_;
          to_bitField3_ |= 0x20000000;
        }
        if (((from_bitField3_ & 0x40000000) != 0)) {
          result.gamescopeEnableAppTargetFramerate_ = gamescopeEnableAppTargetFramerate_;
          to_bitField3_ |= 0x40000000;
        }
        if (((from_bitField3_ & 0x80000000) != 0)) {
          result.gamescopeDisableFramelimit_ = gamescopeDisableFramelimit_;
          to_bitField3_ |= 0x80000000;
        }
        result.bitField3_ |= to_bitField3_;
      }

      private void buildPartial4(SteammessagesClientsettings.CMsgClientSettings result) {
        int from_bitField4_ = bitField4_;
        int to_bitField4_ = 0;
        if (((from_bitField4_ & 0x00000001) != 0)) {
          result.gamescopeDisplayRefreshRate_ = gamescopeDisplayRefreshRate_;
          to_bitField4_ |= 0x00000001;
        }
        if (((from_bitField4_ & 0x00000002) != 0)) {
          result.gamescopeUseGameRefreshRateInSteam_ = gamescopeUseGameRefreshRateInSteam_;
          to_bitField4_ |= 0x00000002;
        }
        if (((from_bitField4_ & 0x00000004) != 0)) {
          result.steamosStatusLedBrightness_ = steamosStatusLedBrightness_;
          to_bitField4_ |= 0x00000004;
        }
        result.bitField4_ |= to_bitField4_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SteammessagesClientsettings.CMsgClientSettings) {
          return mergeFrom((SteammessagesClientsettings.CMsgClientSettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SteammessagesClientsettings.CMsgClientSettings other) {
        if (other == SteammessagesClientsettings.CMsgClientSettings.getDefaultInstance()) return this;
        if (other.hasNoSavePersonalInfo()) {
          setNoSavePersonalInfo(other.getNoSavePersonalInfo());
        }
        if (other.hasOobeTestModeEnabled()) {
          setOobeTestModeEnabled(other.getOobeTestModeEnabled());
        }
        if (other.hasInClientBeta()) {
          setInClientBeta(other.getInClientBeta());
        }
        if (other.hasIsSteamSideloaded()) {
          setIsSteamSideloaded(other.getIsSteamSideloaded());
        }
        if (other.hasPreferredMonitor()) {
          preferredMonitor_ = other.preferredMonitor_;
          bitField0_ |= 0x00000010;
          onChanged();
        }
        if (other.hasSteamCefGpuBlocklistDisabled()) {
          setSteamCefGpuBlocklistDisabled(other.getSteamCefGpuBlocklistDisabled());
        }
        if (other.hasBigpictureWindowed()) {
          setBigpictureWindowed(other.getBigpictureWindowed());
        }
        if (other.hasDisplayName()) {
          displayName_ = other.displayName_;
          bitField0_ |= 0x00000080;
          onChanged();
        }
        if (other.hasIsExternalDisplay()) {
          setIsExternalDisplay(other.getIsExternalDisplay());
        }
        if (other.hasSteamOsUnderscanLevel()) {
          setSteamOsUnderscanLevel(other.getSteamOsUnderscanLevel());
        }
        if (other.hasSteamOsUnderscanEnabled()) {
          setSteamOsUnderscanEnabled(other.getSteamOsUnderscanEnabled());
        }
        if (other.hasMinScaleFactor()) {
          setMinScaleFactor(other.getMinScaleFactor());
        }
        if (other.hasMaxScaleFactor()) {
          setMaxScaleFactor(other.getMaxScaleFactor());
        }
        if (other.hasAutoScaleFactor()) {
          setAutoScaleFactor(other.getAutoScaleFactor());
        }
        if (other.hasSmallMode()) {
          setSmallMode(other.getSmallMode());
        }
        if (other.hasSkipSteamvrInstallDialog()) {
          setSkipSteamvrInstallDialog(other.getSkipSteamvrInstallDialog());
        }
        if (other.hasAlwaysShowUserChooser()) {
          setAlwaysShowUserChooser(other.getAlwaysShowUserChooser());
        }
        if (other.hasShowFamilySharingNotifications()) {
          setShowFamilySharingNotifications(other.getShowFamilySharingNotifications());
        }
        if (other.hasOverlayFpsCounterCorner()) {
          setOverlayFpsCounterCorner(other.getOverlayFpsCounterCorner());
        }
        if (other.hasOverlayFpsCounterHighContrast()) {
          setOverlayFpsCounterHighContrast(other.getOverlayFpsCounterHighContrast());
        }
        if (other.hasOverlayKey()) {
          mergeOverlayKey(other.getOverlayKey());
        }
        if (other.hasScreenshotKey()) {
          mergeScreenshotKey(other.getScreenshotKey());
        }
        if (other.hasEnableOverlay()) {
          setEnableOverlay(other.getEnableOverlay());
        }
        if (other.hasEnableScreenshotNotification()) {
          setEnableScreenshotNotification(other.getEnableScreenshotNotification());
        }
        if (other.hasEnableScreenshotSound()) {
          setEnableScreenshotSound(other.getEnableScreenshotSound());
        }
        if (other.hasSaveUncompressedScreenshots()) {
          setSaveUncompressedScreenshots(other.getSaveUncompressedScreenshots());
        }
        if (other.hasScreenshotsPath()) {
          screenshotsPath_ = other.screenshotsPath_;
          bitField0_ |= 0x04000000;
          onChanged();
        }
        if (other.hasDefaultPingRate()) {
          setDefaultPingRate(other.getDefaultPingRate());
        }
        if (other.hasServerPingRate()) {
          setServerPingRate(other.getServerPingRate());
        }
        if (other.hasSteamNetworkingShareIp()) {
          setSteamNetworkingShareIp(other.getSteamNetworkingShareIp());
        }
        if (other.hasWebBrowserHome()) {
          webBrowserHome_ = other.webBrowserHome_;
          bitField0_ |= 0x40000000;
          onChanged();
        }
        if (other.hasVoiceMicDeviceName()) {
          voiceMicDeviceName_ = other.voiceMicDeviceName_;
          bitField0_ |= 0x80000000;
          onChanged();
        }
        if (other.hasVoiceMicInputGain()) {
          setVoiceMicInputGain(other.getVoiceMicInputGain());
        }
        if (other.hasVoiceSpeakerOutputGain()) {
          setVoiceSpeakerOutputGain(other.getVoiceSpeakerOutputGain());
        }
        if (other.hasVoicePushToTalkSetting()) {
          setVoicePushToTalkSetting(other.getVoicePushToTalkSetting());
        }
        if (other.hasVoicePushToTalkKey()) {
          mergeVoicePushToTalkKey(other.getVoicePushToTalkKey());
        }
        if (other.hasOverlayToolbarListView()) {
          setOverlayToolbarListView(other.getOverlayToolbarListView());
        }
        if (other.hasAlwaysUseGamepaduiOverlay()) {
          setAlwaysUseGamepaduiOverlay(other.getAlwaysUseGamepaduiOverlay());
        }
        if (other.hasOverlayTabs()) {
          overlayTabs_ = other.overlayTabs_;
          bitField1_ |= 0x00000040;
          onChanged();
        }
        if (other.hasOverlayScaleInterface()) {
          setOverlayScaleInterface(other.getOverlayScaleInterface());
        }
        if (other.hasOverlayRestoreBrowserTabs()) {
          setOverlayRestoreBrowserTabs(other.getOverlayRestoreBrowserTabs());
        }
        if (other.hasSmoothScrollWebviews()) {
          setSmoothScrollWebviews(other.getSmoothScrollWebviews());
        }
        if (other.hasEnableGpuAcceleratedWebviews()) {
          setEnableGpuAcceleratedWebviews(other.getEnableGpuAcceleratedWebviews());
        }
        if (other.hasEnableHardwareVideoDecoding()) {
          setEnableHardwareVideoDecoding(other.getEnableHardwareVideoDecoding());
        }
        if (other.hasRunAtStartup()) {
          setRunAtStartup(other.getRunAtStartup());
        }
        if (other.hasEnableDpiScaling()) {
          setEnableDpiScaling(other.getEnableDpiScaling());
        }
        if (other.hasEnableMarketingMessages()) {
          setEnableMarketingMessages(other.getEnableMarketingMessages());
        }
        if (other.hasStartInBigPictureMode()) {
          setStartInBigPictureMode(other.getStartInBigPictureMode());
        }
        if (other.hasJumplistFlags()) {
          setJumplistFlags(other.getJumplistFlags());
        }
        if (other.hasEnableUiSounds()) {
          setEnableUiSounds(other.getEnableUiSounds());
        }
        if (other.hasDisableAllToasts()) {
          setDisableAllToasts(other.getDisableAllToasts());
        }
        if (other.hasDisableToastsInGame()) {
          setDisableToastsInGame(other.getDisableToastsInGame());
        }
        if (other.hasPlaySoundOnToast()) {
          setPlaySoundOnToast(other.getPlaySoundOnToast());
        }
        if (other.hasLibraryDisplaySize()) {
          setLibraryDisplaySize(other.getLibraryDisplaySize());
        }
        if (other.hasLibraryWhatsNewShowOnlyProductUpdates()) {
          setLibraryWhatsNewShowOnlyProductUpdates(other.getLibraryWhatsNewShowOnlyProductUpdates());
        }
        if (other.hasShowStoreContentOnHome()) {
          setShowStoreContentOnHome(other.getShowStoreContentOnHome());
        }
        if (other.hasStartPage()) {
          startPage_ = other.startPage_;
          bitField1_ |= 0x01000000;
          onChanged();
        }
        if (other.hasLibraryLowBandwidthMode()) {
          setLibraryLowBandwidthMode(other.getLibraryLowBandwidthMode());
        }
        if (other.hasLibraryLowPerfMode()) {
          setLibraryLowPerfMode(other.getLibraryLowPerfMode());
        }
        if (other.hasLibraryDisableCommunityContent()) {
          setLibraryDisableCommunityContent(other.getLibraryDisableCommunityContent());
        }
        if (other.hasLibraryDisplayIconInGameList()) {
          setLibraryDisplayIconInGameList(other.getLibraryDisplayIconInGameList());
        }
        if (other.hasReadyToPlayIncludesStreaming()) {
          setReadyToPlayIncludesStreaming(other.getReadyToPlayIncludesStreaming());
        }
        if (other.hasShowSteamDeckInfo()) {
          setShowSteamDeckInfo(other.getShowSteamDeckInfo());
        }
        if (other.hasEnableShaderPrecache()) {
          setEnableShaderPrecache(other.getEnableShaderPrecache());
        }
        if (other.hasEnableShaderBackgroundProcessing()) {
          setEnableShaderBackgroundProcessing(other.getEnableShaderBackgroundProcessing());
        }
        if (other.hasShaderPrecachedSize()) {
          setShaderPrecachedSize(other.getShaderPrecachedSize());
        }
        if (other.hasNeedsSteamServiceRepair()) {
          setNeedsSteamServiceRepair(other.getNeedsSteamServiceRepair());
        }
        if (other.hasDownloadPeerContent()) {
          setDownloadPeerContent(other.getDownloadPeerContent());
        }
        if (other.hasDownloadRateBitsPerS()) {
          setDownloadRateBitsPerS(other.getDownloadRateBitsPerS());
        }
        if (other.hasRestrictAutoUpdates()) {
          setRestrictAutoUpdates(other.getRestrictAutoUpdates());
        }
        if (other.hasRestrictAutoUpdatesStart()) {
          setRestrictAutoUpdatesStart(other.getRestrictAutoUpdatesStart());
        }
        if (other.hasRestrictAutoUpdatesEnd()) {
          setRestrictAutoUpdatesEnd(other.getRestrictAutoUpdatesEnd());
        }
        if (other.hasDownloadRegion()) {
          setDownloadRegion(other.getDownloadRegion());
        }
        if (other.hasDownloadWhileAppRunning()) {
          setDownloadWhileAppRunning(other.getDownloadWhileAppRunning());
        }
        if (other.hasDownloadThrottleWhileStreaming()) {
          setDownloadThrottleWhileStreaming(other.getDownloadThrottleWhileStreaming());
        }
        if (other.hasDownloadThrottleRate()) {
          setDownloadThrottleRate(other.getDownloadThrottleRate());
        }
        if (other.hasCloudEnabled()) {
          setCloudEnabled(other.getCloudEnabled());
        }
        if (other.hasShowScreenshotManager()) {
          setShowScreenshotManager(other.getShowScreenshotManager());
        }
        if (other.hasMusicVolume()) {
          setMusicVolume(other.getMusicVolume());
        }
        if (other.hasMusicPauseOnAppStart()) {
          setMusicPauseOnAppStart(other.getMusicPauseOnAppStart());
        }
        if (other.hasMusicPauseOnVoiceChat()) {
          setMusicPauseOnVoiceChat(other.getMusicPauseOnVoiceChat());
        }
        if (other.hasMusicDownloadHighQuality()) {
          setMusicDownloadHighQuality(other.getMusicDownloadHighQuality());
        }
        if (other.hasMusicPlaylistNotification()) {
          setMusicPlaylistNotification(other.getMusicPlaylistNotification());
        }
        if (other.hasBroadcastPermissions()) {
          setBroadcastPermissions(other.getBroadcastPermissions());
        }
        if (other.hasBroadcastOutputWidth()) {
          setBroadcastOutputWidth(other.getBroadcastOutputWidth());
        }
        if (other.hasBroadcastOutputHeight()) {
          setBroadcastOutputHeight(other.getBroadcastOutputHeight());
        }
        if (other.hasBroadcastBitrate()) {
          setBroadcastBitrate(other.getBroadcastBitrate());
        }
        if (other.hasBroadcastEncodingOption()) {
          setBroadcastEncodingOption(other.getBroadcastEncodingOption());
        }
        if (other.hasBroadcastRecordAllVideo()) {
          setBroadcastRecordAllVideo(other.getBroadcastRecordAllVideo());
        }
        if (other.hasBroadcastRecordAllAudio()) {
          setBroadcastRecordAllAudio(other.getBroadcastRecordAllAudio());
        }
        if (other.hasBroadcastRecordMicrophone()) {
          setBroadcastRecordMicrophone(other.getBroadcastRecordMicrophone());
        }
        if (other.hasBroadcastShowUploadStats()) {
          setBroadcastShowUploadStats(other.getBroadcastShowUploadStats());
        }
        if (other.hasBroadcastShowLiveReminder()) {
          setBroadcastShowLiveReminder(other.getBroadcastShowLiveReminder());
        }
        if (other.hasBroadcastChatCorner()) {
          setBroadcastChatCorner(other.getBroadcastChatCorner());
        }
        if (other.hasSteamInputConfiguratorErrorMsgEnable()) {
          setSteamInputConfiguratorErrorMsgEnable(other.getSteamInputConfiguratorErrorMsgEnable());
        }
        if (other.hasControllerGuideButtonFocusSteam()) {
          setControllerGuideButtonFocusSteam(other.getControllerGuideButtonFocusSteam());
        }
        if (other.hasControllerPsSupport()) {
          setControllerPsSupport(other.getControllerPsSupport());
        }
        if (other.hasControllerXboxSupport()) {
          setControllerXboxSupport(other.getControllerXboxSupport());
        }
        if (other.hasControllerXboxDriver()) {
          setControllerXboxDriver(other.getControllerXboxDriver());
        }
        if (other.hasControllerSwitchSupport()) {
          setControllerSwitchSupport(other.getControllerSwitchSupport());
        }
        if (other.hasControllerGenericSupport()) {
          setControllerGenericSupport(other.getControllerGenericSupport());
        }
        if (other.hasControllerPowerOffTimeout()) {
          setControllerPowerOffTimeout(other.getControllerPowerOffTimeout());
        }
        if (other.hasTurnOffControllerOnExit()) {
          setTurnOffControllerOnExit(other.getTurnOffControllerOnExit());
        }
        if (other.hasControllerCombineNintendoJoycons()) {
          setControllerCombineNintendoJoycons(other.getControllerCombineNintendoJoycons());
        }
        if (other.hasStartupMovieId()) {
          setStartupMovieId(other.getStartupMovieId());
        }
        if (other.hasStartupMovieLocalPath()) {
          startupMovieLocalPath_ = other.startupMovieLocalPath_;
          bitField3_ |= 0x00000200;
          onChanged();
        }
        if (other.hasStartupMovieShuffle()) {
          setStartupMovieShuffle(other.getStartupMovieShuffle());
        }
        if (other.hasStartupMovieUsedForResume()) {
          setStartupMovieUsedForResume(other.getStartupMovieUsedForResume());
        }
        if (other.hasGameNotesEnableSpellcheck()) {
          setGameNotesEnableSpellcheck(other.getGameNotesEnableSpellcheck());
        }
        if (other.hasScreenshotItemsPerRow()) {
          setScreenshotItemsPerRow(other.getScreenshotItemsPerRow());
        }
        if (other.hasGBackgroundEnabled()) {
          setGBackgroundEnabled(other.getGBackgroundEnabled());
        }
        if (other.hasGBackgroundPath()) {
          gBackgroundPath_ = other.gBackgroundPath_;
          bitField3_ |= 0x00008000;
          onChanged();
        }
        if (other.hasGBackgroundMaxKeep()) {
          gBackgroundMaxKeep_ = other.gBackgroundMaxKeep_;
          bitField3_ |= 0x00010000;
          onChanged();
        }
        if (other.hasGBackgroundTimeResolution()) {
          setGBackgroundTimeResolution(other.getGBackgroundTimeResolution());
        }
        if (other.hasGBackgroundDevmode()) {
          setGBackgroundDevmode(other.getGBackgroundDevmode());
        }
        if (other.hasGBackgroundMk()) {
          mergeGBackgroundMk(other.getGBackgroundMk());
        }
        if (other.hasGBackgroundTg()) {
          mergeGBackgroundTg(other.getGBackgroundTg());
        }
        if (other.hasGBackgroundAM()) {
          setGBackgroundAM(other.getGBackgroundAM());
        }
        if (other.hasShowTimestampsInConsole()) {
          setShowTimestampsInConsole(other.getShowTimestampsInConsole());
        }
        if (other.hasForceOobe()) {
          setForceOobe(other.getForceOobe());
        }
        if (other.hasOverrideBrowserComposerMode()) {
          setOverrideBrowserComposerMode(other.getOverrideBrowserComposerMode());
        }
        if (other.hasCefRemoteDebuggingEnabled()) {
          setCefRemoteDebuggingEnabled(other.getCefRemoteDebuggingEnabled());
        }
        if (other.hasForceDeckPerfTab()) {
          setForceDeckPerfTab(other.getForceDeckPerfTab());
        }
        if (other.hasForceFakeMandatoryUpdate()) {
          setForceFakeMandatoryUpdate(other.getForceFakeMandatoryUpdate());
        }
        if (other.hasGamescopeHdrVisualization()) {
          setGamescopeHdrVisualization(other.getGamescopeHdrVisualization());
        }
        if (other.hasGamescopeAppTargetFramerate()) {
          setGamescopeAppTargetFramerate(other.getGamescopeAppTargetFramerate());
        }
        if (other.hasGamescopeEnableAppTargetFramerate()) {
          setGamescopeEnableAppTargetFramerate(other.getGamescopeEnableAppTargetFramerate());
        }
        if (other.hasGamescopeDisableFramelimit()) {
          setGamescopeDisableFramelimit(other.getGamescopeDisableFramelimit());
        }
        if (other.hasGamescopeDisplayRefreshRate()) {
          setGamescopeDisplayRefreshRate(other.getGamescopeDisplayRefreshRate());
        }
        if (other.hasGamescopeUseGameRefreshRateInSteam()) {
          setGamescopeUseGameRefreshRateInSteam(other.getGamescopeUseGameRefreshRateInSteam());
        }
        if (other.hasSteamosStatusLedBrightness()) {
          setSteamosStatusLedBrightness(other.getSteamosStatusLedBrightness());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                noSavePersonalInfo_ = input.readBool();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                oobeTestModeEnabled_ = input.readBool();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                inClientBeta_ = input.readBool();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                isSteamSideloaded_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                preferredMonitor_ = input.readBytes();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 48: {
                steamCefGpuBlocklistDisabled_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                bigpictureWindowed_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 66: {
                displayName_ = input.readBytes();
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              case 72: {
                isExternalDisplay_ = input.readBool();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 85: {
                steamOsUnderscanLevel_ = input.readFloat();
                bitField0_ |= 0x00000200;
                break;
              } // case 85
              case 88: {
                steamOsUnderscanEnabled_ = input.readBool();
                bitField0_ |= 0x00000400;
                break;
              } // case 88
              case 101: {
                minScaleFactor_ = input.readFloat();
                bitField0_ |= 0x00000800;
                break;
              } // case 101
              case 109: {
                maxScaleFactor_ = input.readFloat();
                bitField0_ |= 0x00001000;
                break;
              } // case 109
              case 117: {
                autoScaleFactor_ = input.readFloat();
                bitField0_ |= 0x00002000;
                break;
              } // case 117
              case 128: {
                smallMode_ = input.readBool();
                bitField0_ |= 0x00004000;
                break;
              } // case 128
              case 152: {
                skipSteamvrInstallDialog_ = input.readBool();
                bitField0_ |= 0x00008000;
                break;
              } // case 152
              case 160: {
                alwaysShowUserChooser_ = input.readBool();
                bitField0_ |= 0x00010000;
                break;
              } // case 160
              case 24000: {
                showFamilySharingNotifications_ = input.readBool();
                bitField0_ |= 0x00020000;
                break;
              } // case 24000
              case 32000: {
                overlayFpsCounterCorner_ = input.readInt32();
                bitField0_ |= 0x00040000;
                break;
              } // case 32000
              case 32008: {
                overlayFpsCounterHighContrast_ = input.readBool();
                bitField0_ |= 0x00080000;
                break;
              } // case 32008
              case 32018: {
                input.readMessage(
                    getOverlayKeyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00100000;
                break;
              } // case 32018
              case 32026: {
                input.readMessage(
                    getScreenshotKeyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00200000;
                break;
              } // case 32026
              case 32032: {
                enableOverlay_ = input.readBool();
                bitField0_ |= 0x00400000;
                break;
              } // case 32032
              case 32048: {
                enableScreenshotNotification_ = input.readBool();
                bitField0_ |= 0x00800000;
                break;
              } // case 32048
              case 32056: {
                enableScreenshotSound_ = input.readBool();
                bitField0_ |= 0x01000000;
                break;
              } // case 32056
              case 32064: {
                saveUncompressedScreenshots_ = input.readBool();
                bitField0_ |= 0x02000000;
                break;
              } // case 32064
              case 32074: {
                screenshotsPath_ = input.readBytes();
                bitField0_ |= 0x04000000;
                break;
              } // case 32074
              case 32080: {
                defaultPingRate_ = input.readInt32();
                bitField0_ |= 0x08000000;
                break;
              } // case 32080
              case 32088: {
                serverPingRate_ = input.readInt32();
                bitField0_ |= 0x10000000;
                break;
              } // case 32088
              case 32096: {
                steamNetworkingShareIp_ = input.readInt32();
                bitField0_ |= 0x20000000;
                break;
              } // case 32096
              case 32106: {
                webBrowserHome_ = input.readBytes();
                bitField0_ |= 0x40000000;
                break;
              } // case 32106
              case 32114: {
                voiceMicDeviceName_ = input.readBytes();
                bitField0_ |= 0x80000000;
                break;
              } // case 32114
              case 32125: {
                voiceMicInputGain_ = input.readFloat();
                bitField1_ |= 0x00000001;
                break;
              } // case 32125
              case 32133: {
                voiceSpeakerOutputGain_ = input.readFloat();
                bitField1_ |= 0x00000002;
                break;
              } // case 32133
              case 32136: {
                voicePushToTalkSetting_ = input.readInt32();
                bitField1_ |= 0x00000004;
                break;
              } // case 32136
              case 32146: {
                input.readMessage(
                    getVoicePushToTalkKeyFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField1_ |= 0x00000008;
                break;
              } // case 32146
              case 32152: {
                overlayToolbarListView_ = input.readBool();
                bitField1_ |= 0x00000010;
                break;
              } // case 32152
              case 32160: {
                alwaysUseGamepaduiOverlay_ = input.readBool();
                bitField1_ |= 0x00000020;
                break;
              } // case 32160
              case 32170: {
                overlayTabs_ = input.readBytes();
                bitField1_ |= 0x00000040;
                break;
              } // case 32170
              case 32176: {
                overlayScaleInterface_ = input.readBool();
                bitField1_ |= 0x00000080;
                break;
              } // case 32176
              case 32184: {
                overlayRestoreBrowserTabs_ = input.readBool();
                bitField1_ |= 0x00000100;
                break;
              } // case 32184
              case 40000: {
                smoothScrollWebviews_ = input.readBool();
                bitField1_ |= 0x00000200;
                break;
              } // case 40000
              case 40008: {
                enableGpuAcceleratedWebviews_ = input.readBool();
                bitField1_ |= 0x00000400;
                break;
              } // case 40008
              case 40024: {
                enableHardwareVideoDecoding_ = input.readBool();
                bitField1_ |= 0x00000800;
                break;
              } // case 40024
              case 40032: {
                runAtStartup_ = input.readBool();
                bitField1_ |= 0x00001000;
                break;
              } // case 40032
              case 40040: {
                enableDpiScaling_ = input.readBool();
                bitField1_ |= 0x00002000;
                break;
              } // case 40040
              case 40048: {
                enableMarketingMessages_ = input.readBool();
                bitField1_ |= 0x00004000;
                break;
              } // case 40048
              case 40056: {
                startInBigPictureMode_ = input.readBool();
                bitField1_ |= 0x00008000;
                break;
              } // case 40056
              case 40064: {
                jumplistFlags_ = input.readUInt32();
                bitField1_ |= 0x00010000;
                break;
              } // case 40064
              case 40072: {
                enableUiSounds_ = input.readBool();
                bitField1_ |= 0x00020000;
                break;
              } // case 40072
              case 48000: {
                disableAllToasts_ = input.readBool();
                bitField1_ |= 0x00040000;
                break;
              } // case 48000
              case 48008: {
                disableToastsInGame_ = input.readBool();
                bitField1_ |= 0x00080000;
                break;
              } // case 48008
              case 48016: {
                playSoundOnToast_ = input.readBool();
                bitField1_ |= 0x00100000;
                break;
              } // case 48016
              case 56000: {
                libraryDisplaySize_ = input.readInt32();
                bitField1_ |= 0x00200000;
                break;
              } // case 56000
              case 56008: {
                libraryWhatsNewShowOnlyProductUpdates_ = input.readBool();
                bitField1_ |= 0x00400000;
                break;
              } // case 56008
              case 56016: {
                showStoreContentOnHome_ = input.readBool();
                bitField1_ |= 0x00800000;
                break;
              } // case 56016
              case 56026: {
                startPage_ = input.readBytes();
                bitField1_ |= 0x01000000;
                break;
              } // case 56026
              case 56032: {
                libraryLowBandwidthMode_ = input.readBool();
                bitField1_ |= 0x02000000;
                break;
              } // case 56032
              case 56040: {
                libraryLowPerfMode_ = input.readBool();
                bitField1_ |= 0x04000000;
                break;
              } // case 56040
              case 56048: {
                libraryDisableCommunityContent_ = input.readBool();
                bitField1_ |= 0x08000000;
                break;
              } // case 56048
              case 56056: {
                libraryDisplayIconInGameList_ = input.readBool();
                bitField1_ |= 0x10000000;
                break;
              } // case 56056
              case 56064: {
                readyToPlayIncludesStreaming_ = input.readBool();
                bitField1_ |= 0x20000000;
                break;
              } // case 56064
              case 56072: {
                showSteamDeckInfo_ = input.readBool();
                bitField1_ |= 0x40000000;
                break;
              } // case 56072
              case 64000: {
                enableShaderPrecache_ = input.readBool();
                bitField1_ |= 0x80000000;
                break;
              } // case 64000
              case 64008: {
                enableShaderBackgroundProcessing_ = input.readBool();
                bitField2_ |= 0x00000001;
                break;
              } // case 64008
              case 64016: {
                shaderPrecachedSize_ = input.readUInt64();
                bitField2_ |= 0x00000002;
                break;
              } // case 64016
              case 64024: {
                needsSteamServiceRepair_ = input.readBool();
                bitField2_ |= 0x00000004;
                break;
              } // case 64024
              case 64032: {
                downloadPeerContent_ = input.readInt32();
                bitField2_ |= 0x00000008;
                break;
              } // case 64032
              case 64040: {
                downloadRateBitsPerS_ = input.readBool();
                bitField2_ |= 0x00000010;
                break;
              } // case 64040
              case 64048: {
                restrictAutoUpdates_ = input.readBool();
                bitField2_ |= 0x00000020;
                break;
              } // case 64048
              case 64056: {
                restrictAutoUpdatesStart_ = input.readInt32();
                bitField2_ |= 0x00000040;
                break;
              } // case 64056
              case 64064: {
                restrictAutoUpdatesEnd_ = input.readInt32();
                bitField2_ |= 0x00000080;
                break;
              } // case 64064
              case 64072: {
                downloadRegion_ = input.readInt32();
                bitField2_ |= 0x00000100;
                break;
              } // case 64072
              case 64080: {
                downloadWhileAppRunning_ = input.readBool();
                bitField2_ |= 0x00000200;
                break;
              } // case 64080
              case 64088: {
                downloadThrottleWhileStreaming_ = input.readBool();
                bitField2_ |= 0x00000400;
                break;
              } // case 64088
              case 64096: {
                downloadThrottleRate_ = input.readInt32();
                bitField2_ |= 0x00000800;
                break;
              } // case 64096
              case 80000: {
                cloudEnabled_ = input.readBool();
                bitField2_ |= 0x00001000;
                break;
              } // case 80000
              case 80008: {
                showScreenshotManager_ = input.readBool();
                bitField2_ |= 0x00002000;
                break;
              } // case 80008
              case 88000: {
                musicVolume_ = input.readInt32();
                bitField2_ |= 0x00004000;
                break;
              } // case 88000
              case 88008: {
                musicPauseOnAppStart_ = input.readBool();
                bitField2_ |= 0x00008000;
                break;
              } // case 88008
              case 88016: {
                musicPauseOnVoiceChat_ = input.readBool();
                bitField2_ |= 0x00010000;
                break;
              } // case 88016
              case 88024: {
                musicDownloadHighQuality_ = input.readBool();
                bitField2_ |= 0x00020000;
                break;
              } // case 88024
              case 88032: {
                musicPlaylistNotification_ = input.readBool();
                bitField2_ |= 0x00040000;
                break;
              } // case 88032
              case 96000: {
                int tmpRaw = input.readEnum();
                Enums.EBroadcastPermission tmpValue =
                    Enums.EBroadcastPermission.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(12000, tmpRaw);
                } else {
                  broadcastPermissions_ = tmpRaw;
                  bitField2_ |= 0x00080000;
                }
                break;
              } // case 96000
              case 96008: {
                broadcastOutputWidth_ = input.readInt32();
                bitField2_ |= 0x00100000;
                break;
              } // case 96008
              case 96016: {
                broadcastOutputHeight_ = input.readInt32();
                bitField2_ |= 0x00200000;
                break;
              } // case 96016
              case 96024: {
                broadcastBitrate_ = input.readInt32();
                bitField2_ |= 0x00400000;
                break;
              } // case 96024
              case 96032: {
                int tmpRaw = input.readEnum();
                Enums.EBroadcastEncoderSetting tmpValue =
                    Enums.EBroadcastEncoderSetting.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(12004, tmpRaw);
                } else {
                  broadcastEncodingOption_ = tmpRaw;
                  bitField2_ |= 0x00800000;
                }
                break;
              } // case 96032
              case 96040: {
                broadcastRecordAllVideo_ = input.readBool();
                bitField2_ |= 0x01000000;
                break;
              } // case 96040
              case 96048: {
                broadcastRecordAllAudio_ = input.readBool();
                bitField2_ |= 0x02000000;
                break;
              } // case 96048
              case 96056: {
                broadcastRecordMicrophone_ = input.readBool();
                bitField2_ |= 0x04000000;
                break;
              } // case 96056
              case 96064: {
                broadcastShowUploadStats_ = input.readBool();
                bitField2_ |= 0x08000000;
                break;
              } // case 96064
              case 96072: {
                broadcastShowLiveReminder_ = input.readBool();
                bitField2_ |= 0x10000000;
                break;
              } // case 96072
              case 96080: {
                broadcastChatCorner_ = input.readInt32();
                bitField2_ |= 0x20000000;
                break;
              } // case 96080
              case 112008: {
                steamInputConfiguratorErrorMsgEnable_ = input.readBool();
                bitField2_ |= 0x40000000;
                break;
              } // case 112008
              case 112016: {
                controllerGuideButtonFocusSteam_ = input.readBool();
                bitField2_ |= 0x80000000;
                break;
              } // case 112016
              case 112024: {
                controllerPsSupport_ = input.readInt32();
                bitField3_ |= 0x00000001;
                break;
              } // case 112024
              case 112032: {
                controllerXboxSupport_ = input.readBool();
                bitField3_ |= 0x00000002;
                break;
              } // case 112032
              case 112040: {
                controllerXboxDriver_ = input.readBool();
                bitField3_ |= 0x00000004;
                break;
              } // case 112040
              case 112048: {
                controllerSwitchSupport_ = input.readBool();
                bitField3_ |= 0x00000008;
                break;
              } // case 112048
              case 112056: {
                controllerGenericSupport_ = input.readBool();
                bitField3_ |= 0x00000010;
                break;
              } // case 112056
              case 112064: {
                controllerPowerOffTimeout_ = input.readInt32();
                bitField3_ |= 0x00000020;
                break;
              } // case 112064
              case 112072: {
                turnOffControllerOnExit_ = input.readBool();
                bitField3_ |= 0x00000040;
                break;
              } // case 112072
              case 112080: {
                controllerCombineNintendoJoycons_ = input.readBool();
                bitField3_ |= 0x00000080;
                break;
              } // case 112080
              case 128000: {
                startupMovieId_ = input.readUInt64();
                bitField3_ |= 0x00000100;
                break;
              } // case 128000
              case 128010: {
                startupMovieLocalPath_ = input.readBytes();
                bitField3_ |= 0x00000200;
                break;
              } // case 128010
              case 128016: {
                startupMovieShuffle_ = input.readBool();
                bitField3_ |= 0x00000400;
                break;
              } // case 128016
              case 128024: {
                startupMovieUsedForResume_ = input.readBool();
                bitField3_ |= 0x00000800;
                break;
              } // case 128024
              case 136008: {
                gameNotesEnableSpellcheck_ = input.readBool();
                bitField3_ |= 0x00001000;
                break;
              } // case 136008
              case 144000: {
                screenshotItemsPerRow_ = input.readInt32();
                bitField3_ |= 0x00002000;
                break;
              } // case 144000
              case 145600: {
                gBackgroundEnabled_ = input.readBool();
                bitField3_ |= 0x00004000;
                break;
              } // case 145600
              case 145610: {
                gBackgroundPath_ = input.readBytes();
                bitField3_ |= 0x00008000;
                break;
              } // case 145610
              case 145618: {
                gBackgroundMaxKeep_ = input.readBytes();
                bitField3_ |= 0x00010000;
                break;
              } // case 145618
              case 145624: {
                gBackgroundTimeResolution_ = input.readInt32();
                bitField3_ |= 0x00020000;
                break;
              } // case 145624
              case 145648: {
                gBackgroundDevmode_ = input.readBool();
                bitField3_ |= 0x00040000;
                break;
              } // case 145648
              case 145658: {
                input.readMessage(
                    getGBackgroundMkFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField3_ |= 0x00080000;
                break;
              } // case 145658
              case 145666: {
                input.readMessage(
                    getGBackgroundTgFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField3_ |= 0x00100000;
                break;
              } // case 145666
              case 145672: {
                gBackgroundAM_ = input.readBool();
                bitField3_ |= 0x00200000;
                break;
              } // case 145672
              case 160000: {
                showTimestampsInConsole_ = input.readBool();
                bitField3_ |= 0x00400000;
                break;
              } // case 160000
              case 160008: {
                forceOobe_ = input.readBool();
                bitField3_ |= 0x00800000;
                break;
              } // case 160008
              case 160016: {
                overrideBrowserComposerMode_ = input.readInt32();
                bitField3_ |= 0x01000000;
                break;
              } // case 160016
              case 160024: {
                cefRemoteDebuggingEnabled_ = input.readBool();
                bitField3_ |= 0x02000000;
                break;
              } // case 160024
              case 160032: {
                forceDeckPerfTab_ = input.readBool();
                bitField3_ |= 0x04000000;
                break;
              } // case 160032
              case 160040: {
                forceFakeMandatoryUpdate_ = input.readBool();
                bitField3_ |= 0x08000000;
                break;
              } // case 160040
              case 168008: {
                int tmpRaw = input.readEnum();
                Enums.EHDRVisualization tmpValue =
                    Enums.EHDRVisualization.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(21001, tmpRaw);
                } else {
                  gamescopeHdrVisualization_ = tmpRaw;
                  bitField3_ |= 0x10000000;
                }
                break;
              } // case 168008
              case 168016: {
                gamescopeAppTargetFramerate_ = input.readInt32();
                bitField3_ |= 0x20000000;
                break;
              } // case 168016
              case 168024: {
                gamescopeEnableAppTargetFramerate_ = input.readBool();
                bitField3_ |= 0x40000000;
                break;
              } // case 168024
              case 168032: {
                gamescopeDisableFramelimit_ = input.readBool();
                bitField3_ |= 0x80000000;
                break;
              } // case 168032
              case 168040: {
                gamescopeDisplayRefreshRate_ = input.readInt32();
                bitField4_ |= 0x00000001;
                break;
              } // case 168040
              case 168048: {
                gamescopeUseGameRefreshRateInSteam_ = input.readBool();
                bitField4_ |= 0x00000002;
                break;
              } // case 168048
              case 176000: {
                steamosStatusLedBrightness_ = input.readInt32();
                bitField4_ |= 0x00000004;
                break;
              } // case 176000
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;
      private int bitField3_;
      private int bitField4_;

      private boolean noSavePersonalInfo_ ;
      /**
       * <code>optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;NoSavePersonalInfo"];</code>
       * @return Whether the noSavePersonalInfo field is set.
       */
      @java.lang.Override
      public boolean hasNoSavePersonalInfo() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;NoSavePersonalInfo"];</code>
       * @return The noSavePersonalInfo.
       */
      @java.lang.Override
      public boolean getNoSavePersonalInfo() {
        return noSavePersonalInfo_;
      }
      /**
       * <code>optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;NoSavePersonalInfo"];</code>
       * @param value The noSavePersonalInfo to set.
       * @return This builder for chaining.
       */
      public Builder setNoSavePersonalInfo(boolean value) {

        noSavePersonalInfo_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool no_save_personal_info = 1 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;NoSavePersonalInfo"];</code>
       * @return This builder for chaining.
       */
      public Builder clearNoSavePersonalInfo() {
        bitField0_ = (bitField0_ & ~0x00000001);
        noSavePersonalInfo_ = false;
        onChanged();
        return this;
      }

      private boolean oobeTestModeEnabled_ ;
      /**
       * <code>optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OOBETestModeEnabled"];</code>
       * @return Whether the oobeTestModeEnabled field is set.
       */
      @java.lang.Override
      public boolean hasOobeTestModeEnabled() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OOBETestModeEnabled"];</code>
       * @return The oobeTestModeEnabled.
       */
      @java.lang.Override
      public boolean getOobeTestModeEnabled() {
        return oobeTestModeEnabled_;
      }
      /**
       * <code>optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OOBETestModeEnabled"];</code>
       * @param value The oobeTestModeEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setOobeTestModeEnabled(boolean value) {

        oobeTestModeEnabled_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool oobe_test_mode_enabled = 2 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OOBETestModeEnabled"];</code>
       * @return This builder for chaining.
       */
      public Builder clearOobeTestModeEnabled() {
        bitField0_ = (bitField0_ & ~0x00000002);
        oobeTestModeEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean inClientBeta_ ;
      /**
       * <code>optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
       * @return Whether the inClientBeta field is set.
       */
      @java.lang.Override
      public boolean hasInClientBeta() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
       * @return The inClientBeta.
       */
      @java.lang.Override
      public boolean getInClientBeta() {
        return inClientBeta_;
      }
      /**
       * <code>optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
       * @param value The inClientBeta to set.
       * @return This builder for chaining.
       */
      public Builder setInClientBeta(boolean value) {

        inClientBeta_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool in_client_beta = 3 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearInClientBeta() {
        bitField0_ = (bitField0_ & ~0x00000004);
        inClientBeta_ = false;
        onChanged();
        return this;
      }

      private boolean isSteamSideloaded_ ;
      /**
       * <code>optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
       * @return Whether the isSteamSideloaded field is set.
       */
      @java.lang.Override
      public boolean hasIsSteamSideloaded() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
       * @return The isSteamSideloaded.
       */
      @java.lang.Override
      public boolean getIsSteamSideloaded() {
        return isSteamSideloaded_;
      }
      /**
       * <code>optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
       * @param value The isSteamSideloaded to set.
       * @return This builder for chaining.
       */
      public Builder setIsSteamSideloaded(boolean value) {

        isSteamSideloaded_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_steam_sideloaded = 4 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_pre_login) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsSteamSideloaded() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isSteamSideloaded_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object preferredMonitor_ = "";
      /**
       * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
       * @return Whether the preferredMonitor field is set.
       */
      public boolean hasPreferredMonitor() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
       * @return The preferredMonitor.
       */
      public java.lang.String getPreferredMonitor() {
        java.lang.Object ref = preferredMonitor_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            preferredMonitor_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
       * @return The bytes for preferredMonitor.
       */
      public com.google.protobuf.ByteString
          getPreferredMonitorBytes() {
        java.lang.Object ref = preferredMonitor_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          preferredMonitor_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
       * @param value The preferredMonitor to set.
       * @return This builder for chaining.
       */
      public Builder setPreferredMonitor(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        preferredMonitor_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPreferredMonitor() {
        preferredMonitor_ = getDefaultInstance().getPreferredMonitor();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <code>optional string preferred_monitor = 5 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Monitor"];</code>
       * @param value The bytes for preferredMonitor to set.
       * @return This builder for chaining.
       */
      public Builder setPreferredMonitorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        preferredMonitor_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }

      private boolean steamCefGpuBlocklistDisabled_ ;
      /**
       * <code>optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;CEFGPUBlocklistDisabled"];</code>
       * @return Whether the steamCefGpuBlocklistDisabled field is set.
       */
      @java.lang.Override
      public boolean hasSteamCefGpuBlocklistDisabled() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;CEFGPUBlocklistDisabled"];</code>
       * @return The steamCefGpuBlocklistDisabled.
       */
      @java.lang.Override
      public boolean getSteamCefGpuBlocklistDisabled() {
        return steamCefGpuBlocklistDisabled_;
      }
      /**
       * <code>optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;CEFGPUBlocklistDisabled"];</code>
       * @param value The steamCefGpuBlocklistDisabled to set.
       * @return This builder for chaining.
       */
      public Builder setSteamCefGpuBlocklistDisabled(boolean value) {

        steamCefGpuBlocklistDisabled_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool steam_cef_gpu_blocklist_disabled = 6 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;CEFGPUBlocklistDisabled"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSteamCefGpuBlocklistDisabled() {
        bitField0_ = (bitField0_ & ~0x00000020);
        steamCefGpuBlocklistDisabled_ = false;
        onChanged();
        return this;
      }

      private boolean bigpictureWindowed_ ;
      /**
       * <code>optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];</code>
       * @return Whether the bigpictureWindowed field is set.
       */
      @java.lang.Override
      public boolean hasBigpictureWindowed() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];</code>
       * @return The bigpictureWindowed.
       */
      @java.lang.Override
      public boolean getBigpictureWindowed() {
        return bigpictureWindowed_;
      }
      /**
       * <code>optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];</code>
       * @param value The bigpictureWindowed to set.
       * @return This builder for chaining.
       */
      public Builder setBigpictureWindowed(boolean value) {

        bigpictureWindowed_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bigpicture_windowed = 7 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "BigPicture/Windowed", (.setting_pre_login) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearBigpictureWindowed() {
        bitField0_ = (bitField0_ & ~0x00000040);
        bigpictureWindowed_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object displayName_ = "";
      /**
       * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
       * @return Whether the displayName field is set.
       */
      public boolean hasDisplayName() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
       * @return The displayName.
       */
      public java.lang.String getDisplayName() {
        java.lang.Object ref = displayName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            displayName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
       * @return The bytes for displayName.
       */
      public com.google.protobuf.ByteString
          getDisplayNameBytes() {
        java.lang.Object ref = displayName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          displayName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
       * @param value The displayName to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        displayName_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDisplayName() {
        displayName_ = getDefaultInstance().getDisplayName();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <code>optional string display_name = 8 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/Name"];</code>
       * @param value The bytes for displayName to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        displayName_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }

      private boolean isExternalDisplay_ ;
      /**
       * <code>optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];</code>
       * @return Whether the isExternalDisplay field is set.
       */
      @java.lang.Override
      public boolean hasIsExternalDisplay() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];</code>
       * @return The isExternalDisplay.
       */
      @java.lang.Override
      public boolean getIsExternalDisplay() {
        return isExternalDisplay_;
      }
      /**
       * <code>optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];</code>
       * @param value The isExternalDisplay to set.
       * @return This builder for chaining.
       */
      public Builder setIsExternalDisplay(boolean value) {

        isExternalDisplay_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool is_external_display = 9 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/IsExternalDisplay"];</code>
       * @return This builder for chaining.
       */
      public Builder clearIsExternalDisplay() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isExternalDisplay_ = false;
        onChanged();
        return this;
      }

      private float steamOsUnderscanLevel_ ;
      /**
       * <code>optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];</code>
       * @return Whether the steamOsUnderscanLevel field is set.
       */
      @java.lang.Override
      public boolean hasSteamOsUnderscanLevel() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];</code>
       * @return The steamOsUnderscanLevel.
       */
      @java.lang.Override
      public float getSteamOsUnderscanLevel() {
        return steamOsUnderscanLevel_;
      }
      /**
       * <code>optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];</code>
       * @param value The steamOsUnderscanLevel to set.
       * @return This builder for chaining.
       */
      public Builder setSteamOsUnderscanLevel(float value) {

        steamOsUnderscanLevel_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional float steam_os_underscan_level = 10 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanLevel"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSteamOsUnderscanLevel() {
        bitField0_ = (bitField0_ & ~0x00000200);
        steamOsUnderscanLevel_ = 0F;
        onChanged();
        return this;
      }

      private boolean steamOsUnderscanEnabled_ ;
      /**
       * <code>optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];</code>
       * @return Whether the steamOsUnderscanEnabled field is set.
       */
      @java.lang.Override
      public boolean hasSteamOsUnderscanEnabled() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];</code>
       * @return The steamOsUnderscanEnabled.
       */
      @java.lang.Override
      public boolean getSteamOsUnderscanEnabled() {
        return steamOsUnderscanEnabled_;
      }
      /**
       * <code>optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];</code>
       * @param value The steamOsUnderscanEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setSteamOsUnderscanEnabled(boolean value) {

        steamOsUnderscanEnabled_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool steam_os_underscan_enabled = 11 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamOSScreenUnderscanEnabled"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSteamOsUnderscanEnabled() {
        bitField0_ = (bitField0_ & ~0x00000400);
        steamOsUnderscanEnabled_ = false;
        onChanged();
        return this;
      }

      private float minScaleFactor_ ;
      /**
       * <code>optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];</code>
       * @return Whether the minScaleFactor field is set.
       */
      @java.lang.Override
      public boolean hasMinScaleFactor() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];</code>
       * @return The minScaleFactor.
       */
      @java.lang.Override
      public float getMinScaleFactor() {
        return minScaleFactor_;
      }
      /**
       * <code>optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];</code>
       * @param value The minScaleFactor to set.
       * @return This builder for chaining.
       */
      public Builder setMinScaleFactor(float value) {

        minScaleFactor_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>optional float min_scale_factor = 12 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MinScaleFactor"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMinScaleFactor() {
        bitField0_ = (bitField0_ & ~0x00000800);
        minScaleFactor_ = 0F;
        onChanged();
        return this;
      }

      private float maxScaleFactor_ ;
      /**
       * <code>optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];</code>
       * @return Whether the maxScaleFactor field is set.
       */
      @java.lang.Override
      public boolean hasMaxScaleFactor() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <code>optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];</code>
       * @return The maxScaleFactor.
       */
      @java.lang.Override
      public float getMaxScaleFactor() {
        return maxScaleFactor_;
      }
      /**
       * <code>optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];</code>
       * @param value The maxScaleFactor to set.
       * @return This builder for chaining.
       */
      public Builder setMaxScaleFactor(float value) {

        maxScaleFactor_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>optional float max_scale_factor = 13 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/MaxScaleFactor"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxScaleFactor() {
        bitField0_ = (bitField0_ & ~0x00001000);
        maxScaleFactor_ = 0F;
        onChanged();
        return this;
      }

      private float autoScaleFactor_ ;
      /**
       * <code>optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];</code>
       * @return Whether the autoScaleFactor field is set.
       */
      @java.lang.Override
      public boolean hasAutoScaleFactor() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <code>optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];</code>
       * @return The autoScaleFactor.
       */
      @java.lang.Override
      public float getAutoScaleFactor() {
        return autoScaleFactor_;
      }
      /**
       * <code>optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];</code>
       * @param value The autoScaleFactor to set.
       * @return This builder for chaining.
       */
      public Builder setAutoScaleFactor(float value) {

        autoScaleFactor_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>optional float auto_scale_factor = 14 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "UI/Display/Current/AutoScaleFactor"];</code>
       * @return This builder for chaining.
       */
      public Builder clearAutoScaleFactor() {
        bitField0_ = (bitField0_ & ~0x00002000);
        autoScaleFactor_ = 0F;
        onChanged();
        return this;
      }

      private boolean smallMode_ ;
      /**
       * <code>optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmallMode"];</code>
       * @return Whether the smallMode field is set.
       */
      @java.lang.Override
      public boolean hasSmallMode() {
        return ((bitField0_ & 0x00004000) != 0);
      }
      /**
       * <code>optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmallMode"];</code>
       * @return The smallMode.
       */
      @java.lang.Override
      public boolean getSmallMode() {
        return smallMode_;
      }
      /**
       * <code>optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmallMode"];</code>
       * @param value The smallMode to set.
       * @return This builder for chaining.
       */
      public Builder setSmallMode(boolean value) {

        smallMode_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool small_mode = 16 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmallMode"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSmallMode() {
        bitField0_ = (bitField0_ & ~0x00004000);
        smallMode_ = false;
        onChanged();
        return this;
      }

      private boolean skipSteamvrInstallDialog_ ;
      /**
       * <code>optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;SteamVRHMDVGUIWarning"];</code>
       * @return Whether the skipSteamvrInstallDialog field is set.
       */
      @java.lang.Override
      public boolean hasSkipSteamvrInstallDialog() {
        return ((bitField0_ & 0x00008000) != 0);
      }
      /**
       * <code>optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;SteamVRHMDVGUIWarning"];</code>
       * @return The skipSteamvrInstallDialog.
       */
      @java.lang.Override
      public boolean getSkipSteamvrInstallDialog() {
        return skipSteamvrInstallDialog_;
      }
      /**
       * <code>optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;SteamVRHMDVGUIWarning"];</code>
       * @param value The skipSteamvrInstallDialog to set.
       * @return This builder for chaining.
       */
      public Builder setSkipSteamvrInstallDialog(boolean value) {

        skipSteamvrInstallDialog_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool skip_steamvr_install_dialog = 19 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;SteamVRHMDVGUIWarning"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSkipSteamvrInstallDialog() {
        bitField0_ = (bitField0_ & ~0x00008000);
        skipSteamvrInstallDialog_ = false;
        onChanged();
        return this;
      }

      private boolean alwaysShowUserChooser_ ;
      /**
       * <code>optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage&#92;&#92;Auth&#92;&#92;AlwaysShowUserChooser"];</code>
       * @return Whether the alwaysShowUserChooser field is set.
       */
      @java.lang.Override
      public boolean hasAlwaysShowUserChooser() {
        return ((bitField0_ & 0x00010000) != 0);
      }
      /**
       * <code>optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage&#92;&#92;Auth&#92;&#92;AlwaysShowUserChooser"];</code>
       * @return The alwaysShowUserChooser.
       */
      @java.lang.Override
      public boolean getAlwaysShowUserChooser() {
        return alwaysShowUserChooser_;
      }
      /**
       * <code>optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage&#92;&#92;Auth&#92;&#92;AlwaysShowUserChooser"];</code>
       * @param value The alwaysShowUserChooser to set.
       * @return This builder for chaining.
       */
      public Builder setAlwaysShowUserChooser(boolean value) {

        alwaysShowUserChooser_ = value;
        bitField0_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool always_show_user_chooser = 20 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "WebStorage&#92;&#92;Auth&#92;&#92;AlwaysShowUserChooser"];</code>
       * @return This builder for chaining.
       */
      public Builder clearAlwaysShowUserChooser() {
        bitField0_ = (bitField0_ & ~0x00010000);
        alwaysShowUserChooser_ = false;
        onChanged();
        return this;
      }

      private boolean showFamilySharingNotifications_ ;
      /**
       * <code>optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the showFamilySharingNotifications field is set.
       */
      @java.lang.Override
      public boolean hasShowFamilySharingNotifications() {
        return ((bitField0_ & 0x00020000) != 0);
      }
      /**
       * <code>optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The showFamilySharingNotifications.
       */
      @java.lang.Override
      public boolean getShowFamilySharingNotifications() {
        return showFamilySharingNotifications_;
      }
      /**
       * <code>optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The showFamilySharingNotifications to set.
       * @return This builder for chaining.
       */
      public Builder setShowFamilySharingNotifications(boolean value) {

        showFamilySharingNotifications_ = value;
        bitField0_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool show_family_sharing_notifications = 3000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearShowFamilySharingNotifications() {
        bitField0_ = (bitField0_ & ~0x00020000);
        showFamilySharingNotifications_ = false;
        onChanged();
        return this;
      }

      private int overlayFpsCounterCorner_ ;
      /**
       * <code>optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSCorner"];</code>
       * @return Whether the overlayFpsCounterCorner field is set.
       */
      @java.lang.Override
      public boolean hasOverlayFpsCounterCorner() {
        return ((bitField0_ & 0x00040000) != 0);
      }
      /**
       * <code>optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSCorner"];</code>
       * @return The overlayFpsCounterCorner.
       */
      @java.lang.Override
      public int getOverlayFpsCounterCorner() {
        return overlayFpsCounterCorner_;
      }
      /**
       * <code>optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSCorner"];</code>
       * @param value The overlayFpsCounterCorner to set.
       * @return This builder for chaining.
       */
      public Builder setOverlayFpsCounterCorner(int value) {

        overlayFpsCounterCorner_ = value;
        bitField0_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 overlay_fps_counter_corner = 4000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSCorner"];</code>
       * @return This builder for chaining.
       */
      public Builder clearOverlayFpsCounterCorner() {
        bitField0_ = (bitField0_ & ~0x00040000);
        overlayFpsCounterCorner_ = 0;
        onChanged();
        return this;
      }

      private boolean overlayFpsCounterHighContrast_ ;
      /**
       * <code>optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSContrast"];</code>
       * @return Whether the overlayFpsCounterHighContrast field is set.
       */
      @java.lang.Override
      public boolean hasOverlayFpsCounterHighContrast() {
        return ((bitField0_ & 0x00080000) != 0);
      }
      /**
       * <code>optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSContrast"];</code>
       * @return The overlayFpsCounterHighContrast.
       */
      @java.lang.Override
      public boolean getOverlayFpsCounterHighContrast() {
        return overlayFpsCounterHighContrast_;
      }
      /**
       * <code>optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSContrast"];</code>
       * @param value The overlayFpsCounterHighContrast to set.
       * @return This builder for chaining.
       */
      public Builder setOverlayFpsCounterHighContrast(boolean value) {

        overlayFpsCounterHighContrast_ = value;
        bitField0_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool overlay_fps_counter_high_contrast = 4001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShowFPSContrast"];</code>
       * @return This builder for chaining.
       */
      public Builder clearOverlayFpsCounterHighContrast() {
        bitField0_ = (bitField0_ & ~0x00080000);
        overlayFpsCounterHighContrast_ = false;
        onChanged();
        return this;
      }

      private SteammessagesClientsettings.CMsgHotkey overlayKey_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> overlayKeyBuilder_;
      /**
       * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
       * @return Whether the overlayKey field is set.
       */
      public boolean hasOverlayKey() {
        return ((bitField0_ & 0x00100000) != 0);
      }
      /**
       * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
       * @return The overlayKey.
       */
      public SteammessagesClientsettings.CMsgHotkey getOverlayKey() {
        if (overlayKeyBuilder_ == null) {
          return overlayKey_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : overlayKey_;
        } else {
          return overlayKeyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
       */
      public Builder setOverlayKey(SteammessagesClientsettings.CMsgHotkey value) {
        if (overlayKeyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          overlayKey_ = value;
        } else {
          overlayKeyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
       */
      public Builder setOverlayKey(
          SteammessagesClientsettings.CMsgHotkey.Builder builderForValue) {
        if (overlayKeyBuilder_ == null) {
          overlayKey_ = builderForValue.build();
        } else {
          overlayKeyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
       */
      public Builder mergeOverlayKey(SteammessagesClientsettings.CMsgHotkey value) {
        if (overlayKeyBuilder_ == null) {
          if (((bitField0_ & 0x00100000) != 0) &&
            overlayKey_ != null &&
            overlayKey_ != SteammessagesClientsettings.CMsgHotkey.getDefaultInstance()) {
            getOverlayKeyBuilder().mergeFrom(value);
          } else {
            overlayKey_ = value;
          }
        } else {
          overlayKeyBuilder_.mergeFrom(value);
        }
        if (overlayKey_ != null) {
          bitField0_ |= 0x00100000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
       */
      public Builder clearOverlayKey() {
        bitField0_ = (bitField0_ & ~0x00100000);
        overlayKey_ = null;
        if (overlayKeyBuilder_ != null) {
          overlayKeyBuilder_.dispose();
          overlayKeyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
       */
      public SteammessagesClientsettings.CMsgHotkey.Builder getOverlayKeyBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getOverlayKeyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
       */
      public SteammessagesClientsettings.CMsgHotkeyOrBuilder getOverlayKeyOrBuilder() {
        if (overlayKeyBuilder_ != null) {
          return overlayKeyBuilder_.getMessageOrBuilder();
        } else {
          return overlayKey_ == null ?
              SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : overlayKey_;
        }
      }
      /**
       * <code>optional .CMsgHotkey overlay_key = 4002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayShortcutKey", (.setting_default_string) = "Shift&#92;tKEY_TAB"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> 
          getOverlayKeyFieldBuilder() {
        if (overlayKeyBuilder_ == null) {
          overlayKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder>(
                  getOverlayKey(),
                  getParentForChildren(),
                  isClean());
          overlayKey_ = null;
        }
        return overlayKeyBuilder_;
      }

      private SteammessagesClientsettings.CMsgHotkey screenshotKey_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> screenshotKeyBuilder_;
      /**
       * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
       * @return Whether the screenshotKey field is set.
       */
      public boolean hasScreenshotKey() {
        return ((bitField0_ & 0x00200000) != 0);
      }
      /**
       * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
       * @return The screenshotKey.
       */
      public SteammessagesClientsettings.CMsgHotkey getScreenshotKey() {
        if (screenshotKeyBuilder_ == null) {
          return screenshotKey_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : screenshotKey_;
        } else {
          return screenshotKeyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
       */
      public Builder setScreenshotKey(SteammessagesClientsettings.CMsgHotkey value) {
        if (screenshotKeyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          screenshotKey_ = value;
        } else {
          screenshotKeyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
       */
      public Builder setScreenshotKey(
          SteammessagesClientsettings.CMsgHotkey.Builder builderForValue) {
        if (screenshotKeyBuilder_ == null) {
          screenshotKey_ = builderForValue.build();
        } else {
          screenshotKeyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
       */
      public Builder mergeScreenshotKey(SteammessagesClientsettings.CMsgHotkey value) {
        if (screenshotKeyBuilder_ == null) {
          if (((bitField0_ & 0x00200000) != 0) &&
            screenshotKey_ != null &&
            screenshotKey_ != SteammessagesClientsettings.CMsgHotkey.getDefaultInstance()) {
            getScreenshotKeyBuilder().mergeFrom(value);
          } else {
            screenshotKey_ = value;
          }
        } else {
          screenshotKeyBuilder_.mergeFrom(value);
        }
        if (screenshotKey_ != null) {
          bitField0_ |= 0x00200000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
       */
      public Builder clearScreenshotKey() {
        bitField0_ = (bitField0_ & ~0x00200000);
        screenshotKey_ = null;
        if (screenshotKeyBuilder_ != null) {
          screenshotKeyBuilder_.dispose();
          screenshotKeyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
       */
      public SteammessagesClientsettings.CMsgHotkey.Builder getScreenshotKeyBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getScreenshotKeyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
       */
      public SteammessagesClientsettings.CMsgHotkeyOrBuilder getScreenshotKeyOrBuilder() {
        if (screenshotKeyBuilder_ != null) {
          return screenshotKeyBuilder_.getMessageOrBuilder();
        } else {
          return screenshotKey_ == null ?
              SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : screenshotKey_;
        }
      }
      /**
       * <code>optional .CMsgHotkey screenshot_key = 4003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotHotKey", (.setting_default_string) = "KEY_F12"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> 
          getScreenshotKeyFieldBuilder() {
        if (screenshotKeyBuilder_ == null) {
          screenshotKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder>(
                  getScreenshotKey(),
                  getParentForChildren(),
                  isClean());
          screenshotKey_ = null;
        }
        return screenshotKeyBuilder_;
      }

      private boolean enableOverlay_ ;
      /**
       * <code>optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableGameOverlay"];</code>
       * @return Whether the enableOverlay field is set.
       */
      @java.lang.Override
      public boolean hasEnableOverlay() {
        return ((bitField0_ & 0x00400000) != 0);
      }
      /**
       * <code>optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableGameOverlay"];</code>
       * @return The enableOverlay.
       */
      @java.lang.Override
      public boolean getEnableOverlay() {
        return enableOverlay_;
      }
      /**
       * <code>optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableGameOverlay"];</code>
       * @param value The enableOverlay to set.
       * @return This builder for chaining.
       */
      public Builder setEnableOverlay(boolean value) {

        enableOverlay_ = value;
        bitField0_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_overlay = 4004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableGameOverlay"];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableOverlay() {
        bitField0_ = (bitField0_ & ~0x00400000);
        enableOverlay_ = false;
        onChanged();
        return this;
      }

      private boolean enableScreenshotNotification_ ;
      /**
       * <code>optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotNotification", (.setting_default_bool) = true];</code>
       * @return Whether the enableScreenshotNotification field is set.
       */
      @java.lang.Override
      public boolean hasEnableScreenshotNotification() {
        return ((bitField0_ & 0x00800000) != 0);
      }
      /**
       * <code>optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotNotification", (.setting_default_bool) = true];</code>
       * @return The enableScreenshotNotification.
       */
      @java.lang.Override
      public boolean getEnableScreenshotNotification() {
        return enableScreenshotNotification_;
      }
      /**
       * <code>optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotNotification", (.setting_default_bool) = true];</code>
       * @param value The enableScreenshotNotification to set.
       * @return This builder for chaining.
       */
      public Builder setEnableScreenshotNotification(boolean value) {

        enableScreenshotNotification_ = value;
        bitField0_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_screenshot_notification = 4006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotNotification", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableScreenshotNotification() {
        bitField0_ = (bitField0_ & ~0x00800000);
        enableScreenshotNotification_ = false;
        onChanged();
        return this;
      }

      private boolean enableScreenshotSound_ ;
      /**
       * <code>optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];</code>
       * @return Whether the enableScreenshotSound field is set.
       */
      @java.lang.Override
      public boolean hasEnableScreenshotSound() {
        return ((bitField0_ & 0x01000000) != 0);
      }
      /**
       * <code>optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];</code>
       * @return The enableScreenshotSound.
       */
      @java.lang.Override
      public boolean getEnableScreenshotSound() {
        return enableScreenshotSound_;
      }
      /**
       * <code>optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];</code>
       * @param value The enableScreenshotSound to set.
       * @return This builder for chaining.
       */
      public Builder setEnableScreenshotSound(boolean value) {

        enableScreenshotSound_ = value;
        bitField0_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_screenshot_sound = 4007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotPlaySound", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableScreenshotSound() {
        bitField0_ = (bitField0_ & ~0x01000000);
        enableScreenshotSound_ = false;
        onChanged();
        return this;
      }

      private boolean saveUncompressedScreenshots_ ;
      /**
       * <code>optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotSaveUncompressed"];</code>
       * @return Whether the saveUncompressedScreenshots field is set.
       */
      @java.lang.Override
      public boolean hasSaveUncompressedScreenshots() {
        return ((bitField0_ & 0x02000000) != 0);
      }
      /**
       * <code>optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotSaveUncompressed"];</code>
       * @return The saveUncompressedScreenshots.
       */
      @java.lang.Override
      public boolean getSaveUncompressedScreenshots() {
        return saveUncompressedScreenshots_;
      }
      /**
       * <code>optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotSaveUncompressed"];</code>
       * @param value The saveUncompressedScreenshots to set.
       * @return This builder for chaining.
       */
      public Builder setSaveUncompressedScreenshots(boolean value) {

        saveUncompressedScreenshots_ = value;
        bitField0_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool save_uncompressed_screenshots = 4008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayScreenshotSaveUncompressed"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSaveUncompressedScreenshots() {
        bitField0_ = (bitField0_ & ~0x02000000);
        saveUncompressedScreenshots_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object screenshotsPath_ = "";
      /**
       * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the screenshotsPath field is set.
       */
      public boolean hasScreenshotsPath() {
        return ((bitField0_ & 0x04000000) != 0);
      }
      /**
       * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The screenshotsPath.
       */
      public java.lang.String getScreenshotsPath() {
        java.lang.Object ref = screenshotsPath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            screenshotsPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The bytes for screenshotsPath.
       */
      public com.google.protobuf.ByteString
          getScreenshotsPathBytes() {
        java.lang.Object ref = screenshotsPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          screenshotsPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The screenshotsPath to set.
       * @return This builder for chaining.
       */
      public Builder setScreenshotsPath(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        screenshotsPath_ = value;
        bitField0_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearScreenshotsPath() {
        screenshotsPath_ = getDefaultInstance().getScreenshotsPath();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }
      /**
       * <code>optional string screenshots_path = 4009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The bytes for screenshotsPath to set.
       * @return This builder for chaining.
       */
      public Builder setScreenshotsPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        screenshotsPath_ = value;
        bitField0_ |= 0x04000000;
        onChanged();
        return this;
      }

      private int defaultPingRate_ ;
      /**
       * <code>optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];</code>
       * @return Whether the defaultPingRate field is set.
       */
      @java.lang.Override
      public boolean hasDefaultPingRate() {
        return ((bitField0_ & 0x08000000) != 0);
      }
      /**
       * <code>optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];</code>
       * @return The defaultPingRate.
       */
      @java.lang.Override
      public int getDefaultPingRate() {
        return defaultPingRate_;
      }
      /**
       * <code>optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];</code>
       * @param value The defaultPingRate to set.
       * @return This builder for chaining.
       */
      public Builder setDefaultPingRate(int value) {

        defaultPingRate_ = value;
        bitField0_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 default_ping_rate = 4010 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true, (.setting_description) = "Computed default (automatic) server ping rate based on network speed"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDefaultPingRate() {
        bitField0_ = (bitField0_ & ~0x08000000);
        defaultPingRate_ = 0;
        onChanged();
        return this;
      }

      private int serverPingRate_ ;
      /**
       * <code>optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the serverPingRate field is set.
       */
      @java.lang.Override
      public boolean hasServerPingRate() {
        return ((bitField0_ & 0x10000000) != 0);
      }
      /**
       * <code>optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The serverPingRate.
       */
      @java.lang.Override
      public int getServerPingRate() {
        return serverPingRate_;
      }
      /**
       * <code>optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The serverPingRate to set.
       * @return This builder for chaining.
       */
      public Builder setServerPingRate(int value) {

        serverPingRate_ = value;
        bitField0_ |= 0x10000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 server_ping_rate = 4011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearServerPingRate() {
        bitField0_ = (bitField0_ & ~0x10000000);
        serverPingRate_ = 0;
        onChanged();
        return this;
      }

      private int steamNetworkingShareIp_ ;
      /**
       * <code>optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the steamNetworkingShareIp field is set.
       */
      @java.lang.Override
      public boolean hasSteamNetworkingShareIp() {
        return ((bitField0_ & 0x20000000) != 0);
      }
      /**
       * <code>optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The steamNetworkingShareIp.
       */
      @java.lang.Override
      public int getSteamNetworkingShareIp() {
        return steamNetworkingShareIp_;
      }
      /**
       * <code>optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The steamNetworkingShareIp to set.
       * @return This builder for chaining.
       */
      public Builder setSteamNetworkingShareIp(int value) {

        steamNetworkingShareIp_ = value;
        bitField0_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 steam_networking_share_ip = 4012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearSteamNetworkingShareIp() {
        bitField0_ = (bitField0_ & ~0x20000000);
        steamNetworkingShareIp_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object webBrowserHome_ = "";
      /**
       * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the webBrowserHome field is set.
       */
      public boolean hasWebBrowserHome() {
        return ((bitField0_ & 0x40000000) != 0);
      }
      /**
       * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The webBrowserHome.
       */
      public java.lang.String getWebBrowserHome() {
        java.lang.Object ref = webBrowserHome_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            webBrowserHome_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The bytes for webBrowserHome.
       */
      public com.google.protobuf.ByteString
          getWebBrowserHomeBytes() {
        java.lang.Object ref = webBrowserHome_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          webBrowserHome_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The webBrowserHome to set.
       * @return This builder for chaining.
       */
      public Builder setWebBrowserHome(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        webBrowserHome_ = value;
        bitField0_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearWebBrowserHome() {
        webBrowserHome_ = getDefaultInstance().getWebBrowserHome();
        bitField0_ = (bitField0_ & ~0x40000000);
        onChanged();
        return this;
      }
      /**
       * <code>optional string web_browser_home = 4013 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The bytes for webBrowserHome to set.
       * @return This builder for chaining.
       */
      public Builder setWebBrowserHomeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        webBrowserHome_ = value;
        bitField0_ |= 0x40000000;
        onChanged();
        return this;
      }

      private java.lang.Object voiceMicDeviceName_ = "";
      /**
       * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the voiceMicDeviceName field is set.
       */
      public boolean hasVoiceMicDeviceName() {
        return ((bitField0_ & 0x80000000) != 0);
      }
      /**
       * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The voiceMicDeviceName.
       */
      public java.lang.String getVoiceMicDeviceName() {
        java.lang.Object ref = voiceMicDeviceName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            voiceMicDeviceName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The bytes for voiceMicDeviceName.
       */
      public com.google.protobuf.ByteString
          getVoiceMicDeviceNameBytes() {
        java.lang.Object ref = voiceMicDeviceName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          voiceMicDeviceName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The voiceMicDeviceName to set.
       * @return This builder for chaining.
       */
      public Builder setVoiceMicDeviceName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        voiceMicDeviceName_ = value;
        bitField0_ |= 0x80000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearVoiceMicDeviceName() {
        voiceMicDeviceName_ = getDefaultInstance().getVoiceMicDeviceName();
        bitField0_ = (bitField0_ & ~0x80000000);
        onChanged();
        return this;
      }
      /**
       * <code>optional string voice_mic_device_name = 4014 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The bytes for voiceMicDeviceName to set.
       * @return This builder for chaining.
       */
      public Builder setVoiceMicDeviceNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        voiceMicDeviceName_ = value;
        bitField0_ |= 0x80000000;
        onChanged();
        return this;
      }

      private float voiceMicInputGain_ ;
      /**
       * <code>optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the voiceMicInputGain field is set.
       */
      @java.lang.Override
      public boolean hasVoiceMicInputGain() {
        return ((bitField1_ & 0x00000001) != 0);
      }
      /**
       * <code>optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The voiceMicInputGain.
       */
      @java.lang.Override
      public float getVoiceMicInputGain() {
        return voiceMicInputGain_;
      }
      /**
       * <code>optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The voiceMicInputGain to set.
       * @return This builder for chaining.
       */
      public Builder setVoiceMicInputGain(float value) {

        voiceMicInputGain_ = value;
        bitField1_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional float voice_mic_input_gain = 4015 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearVoiceMicInputGain() {
        bitField1_ = (bitField1_ & ~0x00000001);
        voiceMicInputGain_ = 0F;
        onChanged();
        return this;
      }

      private float voiceSpeakerOutputGain_ ;
      /**
       * <code>optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the voiceSpeakerOutputGain field is set.
       */
      @java.lang.Override
      public boolean hasVoiceSpeakerOutputGain() {
        return ((bitField1_ & 0x00000002) != 0);
      }
      /**
       * <code>optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The voiceSpeakerOutputGain.
       */
      @java.lang.Override
      public float getVoiceSpeakerOutputGain() {
        return voiceSpeakerOutputGain_;
      }
      /**
       * <code>optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The voiceSpeakerOutputGain to set.
       * @return This builder for chaining.
       */
      public Builder setVoiceSpeakerOutputGain(float value) {

        voiceSpeakerOutputGain_ = value;
        bitField1_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional float voice_speaker_output_gain = 4016 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearVoiceSpeakerOutputGain() {
        bitField1_ = (bitField1_ & ~0x00000002);
        voiceSpeakerOutputGain_ = 0F;
        onChanged();
        return this;
      }

      private int voicePushToTalkSetting_ ;
      /**
       * <code>optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the voicePushToTalkSetting field is set.
       */
      @java.lang.Override
      public boolean hasVoicePushToTalkSetting() {
        return ((bitField1_ & 0x00000004) != 0);
      }
      /**
       * <code>optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The voicePushToTalkSetting.
       */
      @java.lang.Override
      public int getVoicePushToTalkSetting() {
        return voicePushToTalkSetting_;
      }
      /**
       * <code>optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The voicePushToTalkSetting to set.
       * @return This builder for chaining.
       */
      public Builder setVoicePushToTalkSetting(int value) {

        voicePushToTalkSetting_ = value;
        bitField1_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 voice_push_to_talk_setting = 4017 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearVoicePushToTalkSetting() {
        bitField1_ = (bitField1_ & ~0x00000004);
        voicePushToTalkSetting_ = 0;
        onChanged();
        return this;
      }

      private SteammessagesClientsettings.CMsgHotkey voicePushToTalkKey_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> voicePushToTalkKeyBuilder_;
      /**
       * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the voicePushToTalkKey field is set.
       */
      public boolean hasVoicePushToTalkKey() {
        return ((bitField1_ & 0x00000008) != 0);
      }
      /**
       * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The voicePushToTalkKey.
       */
      public SteammessagesClientsettings.CMsgHotkey getVoicePushToTalkKey() {
        if (voicePushToTalkKeyBuilder_ == null) {
          return voicePushToTalkKey_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : voicePushToTalkKey_;
        } else {
          return voicePushToTalkKeyBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder setVoicePushToTalkKey(SteammessagesClientsettings.CMsgHotkey value) {
        if (voicePushToTalkKeyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          voicePushToTalkKey_ = value;
        } else {
          voicePushToTalkKeyBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder setVoicePushToTalkKey(
          SteammessagesClientsettings.CMsgHotkey.Builder builderForValue) {
        if (voicePushToTalkKeyBuilder_ == null) {
          voicePushToTalkKey_ = builderForValue.build();
        } else {
          voicePushToTalkKeyBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder mergeVoicePushToTalkKey(SteammessagesClientsettings.CMsgHotkey value) {
        if (voicePushToTalkKeyBuilder_ == null) {
          if (((bitField1_ & 0x00000008) != 0) &&
            voicePushToTalkKey_ != null &&
            voicePushToTalkKey_ != SteammessagesClientsettings.CMsgHotkey.getDefaultInstance()) {
            getVoicePushToTalkKeyBuilder().mergeFrom(value);
          } else {
            voicePushToTalkKey_ = value;
          }
        } else {
          voicePushToTalkKeyBuilder_.mergeFrom(value);
        }
        if (voicePushToTalkKey_ != null) {
          bitField1_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder clearVoicePushToTalkKey() {
        bitField1_ = (bitField1_ & ~0x00000008);
        voicePushToTalkKey_ = null;
        if (voicePushToTalkKeyBuilder_ != null) {
          voicePushToTalkKeyBuilder_.dispose();
          voicePushToTalkKeyBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public SteammessagesClientsettings.CMsgHotkey.Builder getVoicePushToTalkKeyBuilder() {
        bitField1_ |= 0x00000008;
        onChanged();
        return getVoicePushToTalkKeyFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public SteammessagesClientsettings.CMsgHotkeyOrBuilder getVoicePushToTalkKeyOrBuilder() {
        if (voicePushToTalkKeyBuilder_ != null) {
          return voicePushToTalkKeyBuilder_.getMessageOrBuilder();
        } else {
          return voicePushToTalkKey_ == null ?
              SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : voicePushToTalkKey_;
        }
      }
      /**
       * <code>optional .CMsgHotkey voice_push_to_talk_key = 4018 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> 
          getVoicePushToTalkKeyFieldBuilder() {
        if (voicePushToTalkKeyBuilder_ == null) {
          voicePushToTalkKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder>(
                  getVoicePushToTalkKey(),
                  getParentForChildren(),
                  isClean());
          voicePushToTalkKey_ = null;
        }
        return voicePushToTalkKeyBuilder_;
      }

      private boolean overlayToolbarListView_ ;
      /**
       * <code>optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];</code>
       * @return Whether the overlayToolbarListView field is set.
       */
      @java.lang.Override
      public boolean hasOverlayToolbarListView() {
        return ((bitField1_ & 0x00000010) != 0);
      }
      /**
       * <code>optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];</code>
       * @return The overlayToolbarListView.
       */
      @java.lang.Override
      public boolean getOverlayToolbarListView() {
        return overlayToolbarListView_;
      }
      /**
       * <code>optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];</code>
       * @param value The overlayToolbarListView to set.
       * @return This builder for chaining.
       */
      public Builder setOverlayToolbarListView(boolean value) {

        overlayToolbarListView_ = value;
        bitField1_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool overlay_toolbar_list_view = 4019 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "OverlayToolBarListView"];</code>
       * @return This builder for chaining.
       */
      public Builder clearOverlayToolbarListView() {
        bitField1_ = (bitField1_ & ~0x00000010);
        overlayToolbarListView_ = false;
        onChanged();
        return this;
      }

      private boolean alwaysUseGamepaduiOverlay_ ;
      /**
       * <code>optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableSCTenFootOverlayCheckNew"];</code>
       * @return Whether the alwaysUseGamepaduiOverlay field is set.
       */
      @java.lang.Override
      public boolean hasAlwaysUseGamepaduiOverlay() {
        return ((bitField1_ & 0x00000020) != 0);
      }
      /**
       * <code>optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableSCTenFootOverlayCheckNew"];</code>
       * @return The alwaysUseGamepaduiOverlay.
       */
      @java.lang.Override
      public boolean getAlwaysUseGamepaduiOverlay() {
        return alwaysUseGamepaduiOverlay_;
      }
      /**
       * <code>optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableSCTenFootOverlayCheckNew"];</code>
       * @param value The alwaysUseGamepaduiOverlay to set.
       * @return This builder for chaining.
       */
      public Builder setAlwaysUseGamepaduiOverlay(boolean value) {

        alwaysUseGamepaduiOverlay_ = value;
        bitField1_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool always_use_gamepadui_overlay = 4020 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableSCTenFootOverlayCheckNew"];</code>
       * @return This builder for chaining.
       */
      public Builder clearAlwaysUseGamepaduiOverlay() {
        bitField1_ = (bitField1_ & ~0x00000020);
        alwaysUseGamepaduiOverlay_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object overlayTabs_ = "";
      /**
       * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
       * @return Whether the overlayTabs field is set.
       */
      public boolean hasOverlayTabs() {
        return ((bitField1_ & 0x00000040) != 0);
      }
      /**
       * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
       * @return The overlayTabs.
       */
      public java.lang.String getOverlayTabs() {
        java.lang.Object ref = overlayTabs_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            overlayTabs_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
       * @return The bytes for overlayTabs.
       */
      public com.google.protobuf.ByteString
          getOverlayTabsBytes() {
        java.lang.Object ref = overlayTabs_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          overlayTabs_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
       * @param value The overlayTabs to set.
       * @return This builder for chaining.
       */
      public Builder setOverlayTabs(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        overlayTabs_ = value;
        bitField1_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
       * @return This builder for chaining.
       */
      public Builder clearOverlayTabs() {
        overlayTabs_ = getDefaultInstance().getOverlayTabs();
        bitField1_ = (bitField1_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <code>optional string overlay_tabs = 4021 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "OverlayTabs"];</code>
       * @param value The bytes for overlayTabs to set.
       * @return This builder for chaining.
       */
      public Builder setOverlayTabsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        overlayTabs_ = value;
        bitField1_ |= 0x00000040;
        onChanged();
        return this;
      }

      private boolean overlayScaleInterface_ ;
      /**
       * <code>optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OverlayScaleInterface", (.setting_default_bool) = true];</code>
       * @return Whether the overlayScaleInterface field is set.
       */
      @java.lang.Override
      public boolean hasOverlayScaleInterface() {
        return ((bitField1_ & 0x00000080) != 0);
      }
      /**
       * <code>optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OverlayScaleInterface", (.setting_default_bool) = true];</code>
       * @return The overlayScaleInterface.
       */
      @java.lang.Override
      public boolean getOverlayScaleInterface() {
        return overlayScaleInterface_;
      }
      /**
       * <code>optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OverlayScaleInterface", (.setting_default_bool) = true];</code>
       * @param value The overlayScaleInterface to set.
       * @return This builder for chaining.
       */
      public Builder setOverlayScaleInterface(boolean value) {

        overlayScaleInterface_ = value;
        bitField1_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool overlay_scale_interface = 4022 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;OverlayScaleInterface", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearOverlayScaleInterface() {
        bitField1_ = (bitField1_ & ~0x00000080);
        overlayScaleInterface_ = false;
        onChanged();
        return this;
      }

      private boolean overlayRestoreBrowserTabs_ ;
      /**
       * <code>optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];</code>
       * @return Whether the overlayRestoreBrowserTabs field is set.
       */
      @java.lang.Override
      public boolean hasOverlayRestoreBrowserTabs() {
        return ((bitField1_ & 0x00000100) != 0);
      }
      /**
       * <code>optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];</code>
       * @return The overlayRestoreBrowserTabs.
       */
      @java.lang.Override
      public boolean getOverlayRestoreBrowserTabs() {
        return overlayRestoreBrowserTabs_;
      }
      /**
       * <code>optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];</code>
       * @param value The overlayRestoreBrowserTabs to set.
       * @return This builder for chaining.
       */
      public Builder setOverlayRestoreBrowserTabs(boolean value) {

        overlayRestoreBrowserTabs_ = value;
        bitField1_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool overlay_restore_browser_tabs = 4023 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;InGameOverlayRestoreBrowserTabs", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearOverlayRestoreBrowserTabs() {
        bitField1_ = (bitField1_ & ~0x00000100);
        overlayRestoreBrowserTabs_ = false;
        onChanged();
        return this;
      }

      private boolean smoothScrollWebviews_ ;
      /**
       * <code>optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmoothScrollWebViews", (.setting_default_bool) = true];</code>
       * @return Whether the smoothScrollWebviews field is set.
       */
      @java.lang.Override
      public boolean hasSmoothScrollWebviews() {
        return ((bitField1_ & 0x00000200) != 0);
      }
      /**
       * <code>optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmoothScrollWebViews", (.setting_default_bool) = true];</code>
       * @return The smoothScrollWebviews.
       */
      @java.lang.Override
      public boolean getSmoothScrollWebviews() {
        return smoothScrollWebviews_;
      }
      /**
       * <code>optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmoothScrollWebViews", (.setting_default_bool) = true];</code>
       * @param value The smoothScrollWebviews to set.
       * @return This builder for chaining.
       */
      public Builder setSmoothScrollWebviews(boolean value) {

        smoothScrollWebviews_ = value;
        bitField1_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool smooth_scroll_webviews = 5000 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;SmoothScrollWebViews", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearSmoothScrollWebviews() {
        bitField1_ = (bitField1_ & ~0x00000200);
        smoothScrollWebviews_ = false;
        onChanged();
        return this;
      }

      private boolean enableGpuAcceleratedWebviews_ ;
      /**
       * <code>optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the enableGpuAcceleratedWebviews field is set.
       */
      @java.lang.Override
      public boolean hasEnableGpuAcceleratedWebviews() {
        return ((bitField1_ & 0x00000400) != 0);
      }
      /**
       * <code>optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The enableGpuAcceleratedWebviews.
       */
      @java.lang.Override
      public boolean getEnableGpuAcceleratedWebviews() {
        return enableGpuAcceleratedWebviews_;
      }
      /**
       * <code>optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The enableGpuAcceleratedWebviews to set.
       * @return This builder for chaining.
       */
      public Builder setEnableGpuAcceleratedWebviews(boolean value) {

        enableGpuAcceleratedWebviews_ = value;
        bitField1_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_gpu_accelerated_webviews = 5001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableGpuAcceleratedWebviews() {
        bitField1_ = (bitField1_ & ~0x00000400);
        enableGpuAcceleratedWebviews_ = false;
        onChanged();
        return this;
      }

      private boolean enableHardwareVideoDecoding_ ;
      /**
       * <code>optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the enableHardwareVideoDecoding field is set.
       */
      @java.lang.Override
      public boolean hasEnableHardwareVideoDecoding() {
        return ((bitField1_ & 0x00000800) != 0);
      }
      /**
       * <code>optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The enableHardwareVideoDecoding.
       */
      @java.lang.Override
      public boolean getEnableHardwareVideoDecoding() {
        return enableHardwareVideoDecoding_;
      }
      /**
       * <code>optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The enableHardwareVideoDecoding to set.
       * @return This builder for chaining.
       */
      public Builder setEnableHardwareVideoDecoding(boolean value) {

        enableHardwareVideoDecoding_ = value;
        bitField1_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_hardware_video_decoding = 5003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableHardwareVideoDecoding() {
        bitField1_ = (bitField1_ & ~0x00000800);
        enableHardwareVideoDecoding_ = false;
        onChanged();
        return this;
      }

      private boolean runAtStartup_ ;
      /**
       * <code>optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the runAtStartup field is set.
       */
      @java.lang.Override
      public boolean hasRunAtStartup() {
        return ((bitField1_ & 0x00001000) != 0);
      }
      /**
       * <code>optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The runAtStartup.
       */
      @java.lang.Override
      public boolean getRunAtStartup() {
        return runAtStartup_;
      }
      /**
       * <code>optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The runAtStartup to set.
       * @return This builder for chaining.
       */
      public Builder setRunAtStartup(boolean value) {

        runAtStartup_ = value;
        bitField1_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool run_at_startup = 5004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearRunAtStartup() {
        bitField1_ = (bitField1_ & ~0x00001000);
        runAtStartup_ = false;
        onChanged();
        return this;
      }

      private boolean enableDpiScaling_ ;
      /**
       * <code>optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the enableDpiScaling field is set.
       */
      @java.lang.Override
      public boolean hasEnableDpiScaling() {
        return ((bitField1_ & 0x00002000) != 0);
      }
      /**
       * <code>optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The enableDpiScaling.
       */
      @java.lang.Override
      public boolean getEnableDpiScaling() {
        return enableDpiScaling_;
      }
      /**
       * <code>optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The enableDpiScaling to set.
       * @return This builder for chaining.
       */
      public Builder setEnableDpiScaling(boolean value) {

        enableDpiScaling_ = value;
        bitField1_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_dpi_scaling = 5005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableDpiScaling() {
        bitField1_ = (bitField1_ & ~0x00002000);
        enableDpiScaling_ = false;
        onChanged();
        return this;
      }

      private boolean enableMarketingMessages_ ;
      /**
       * <code>optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news&#92;&#92;NotifyAvailableGames", (.setting_default_bool) = true];</code>
       * @return Whether the enableMarketingMessages field is set.
       */
      @java.lang.Override
      public boolean hasEnableMarketingMessages() {
        return ((bitField1_ & 0x00004000) != 0);
      }
      /**
       * <code>optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news&#92;&#92;NotifyAvailableGames", (.setting_default_bool) = true];</code>
       * @return The enableMarketingMessages.
       */
      @java.lang.Override
      public boolean getEnableMarketingMessages() {
        return enableMarketingMessages_;
      }
      /**
       * <code>optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news&#92;&#92;NotifyAvailableGames", (.setting_default_bool) = true];</code>
       * @param value The enableMarketingMessages to set.
       * @return This builder for chaining.
       */
      public Builder setEnableMarketingMessages(boolean value) {

        enableMarketingMessages_ = value;
        bitField1_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_marketing_messages = 5006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "news&#92;&#92;NotifyAvailableGames", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableMarketingMessages() {
        bitField1_ = (bitField1_ & ~0x00004000);
        enableMarketingMessages_ = false;
        onChanged();
        return this;
      }

      private boolean startInBigPictureMode_ ;
      /**
       * <code>optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the startInBigPictureMode field is set.
       */
      @java.lang.Override
      public boolean hasStartInBigPictureMode() {
        return ((bitField1_ & 0x00008000) != 0);
      }
      /**
       * <code>optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The startInBigPictureMode.
       */
      @java.lang.Override
      public boolean getStartInBigPictureMode() {
        return startInBigPictureMode_;
      }
      /**
       * <code>optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The startInBigPictureMode to set.
       * @return This builder for chaining.
       */
      public Builder setStartInBigPictureMode(boolean value) {

        startInBigPictureMode_ = value;
        bitField1_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool start_in_big_picture_mode = 5007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearStartInBigPictureMode() {
        bitField1_ = (bitField1_ & ~0x00008000);
        startInBigPictureMode_ = false;
        onChanged();
        return this;
      }

      private int jumplistFlags_ ;
      /**
       * <code>optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;JumplistSettings", (.setting_default_uint) = 77680];</code>
       * @return Whether the jumplistFlags field is set.
       */
      @java.lang.Override
      public boolean hasJumplistFlags() {
        return ((bitField1_ & 0x00010000) != 0);
      }
      /**
       * <code>optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;JumplistSettings", (.setting_default_uint) = 77680];</code>
       * @return The jumplistFlags.
       */
      @java.lang.Override
      public int getJumplistFlags() {
        return jumplistFlags_;
      }
      /**
       * <code>optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;JumplistSettings", (.setting_default_uint) = 77680];</code>
       * @param value The jumplistFlags to set.
       * @return This builder for chaining.
       */
      public Builder setJumplistFlags(int value) {

        jumplistFlags_ = value;
        bitField1_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 jumplist_flags = 5008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;JumplistSettings", (.setting_default_uint) = 77680];</code>
       * @return This builder for chaining.
       */
      public Builder clearJumplistFlags() {
        bitField1_ = (bitField1_ & ~0x00010000);
        jumplistFlags_ = 0;
        onChanged();
        return this;
      }

      private boolean enableUiSounds_ ;
      /**
       * <code>optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableUISounds", (.setting_default_bool) = true];</code>
       * @return Whether the enableUiSounds field is set.
       */
      @java.lang.Override
      public boolean hasEnableUiSounds() {
        return ((bitField1_ & 0x00020000) != 0);
      }
      /**
       * <code>optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableUISounds", (.setting_default_bool) = true];</code>
       * @return The enableUiSounds.
       */
      @java.lang.Override
      public boolean getEnableUiSounds() {
        return enableUiSounds_;
      }
      /**
       * <code>optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableUISounds", (.setting_default_bool) = true];</code>
       * @param value The enableUiSounds to set.
       * @return This builder for chaining.
       */
      public Builder setEnableUiSounds(boolean value) {

        enableUiSounds_ = value;
        bitField1_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_ui_sounds = 5009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "system&#92;&#92;EnableUISounds", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableUiSounds() {
        bitField1_ = (bitField1_ & ~0x00020000);
        enableUiSounds_ = false;
        onChanged();
        return this;
      }

      private boolean disableAllToasts_ ;
      /**
       * <code>optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];</code>
       * @return Whether the disableAllToasts field is set.
       */
      @java.lang.Override
      public boolean hasDisableAllToasts() {
        return ((bitField1_ & 0x00040000) != 0);
      }
      /**
       * <code>optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];</code>
       * @return The disableAllToasts.
       */
      @java.lang.Override
      public boolean getDisableAllToasts() {
        return disableAllToasts_;
      }
      /**
       * <code>optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];</code>
       * @param value The disableAllToasts to set.
       * @return This builder for chaining.
       */
      public Builder setDisableAllToasts(boolean value) {

        disableAllToasts_ = value;
        bitField1_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool disable_all_toasts = 6000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableAllToasts"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDisableAllToasts() {
        bitField1_ = (bitField1_ & ~0x00040000);
        disableAllToasts_ = false;
        onChanged();
        return this;
      }

      private boolean disableToastsInGame_ ;
      /**
       * <code>optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];</code>
       * @return Whether the disableToastsInGame field is set.
       */
      @java.lang.Override
      public boolean hasDisableToastsInGame() {
        return ((bitField1_ & 0x00080000) != 0);
      }
      /**
       * <code>optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];</code>
       * @return The disableToastsInGame.
       */
      @java.lang.Override
      public boolean getDisableToastsInGame() {
        return disableToastsInGame_;
      }
      /**
       * <code>optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];</code>
       * @param value The disableToastsInGame to set.
       * @return This builder for chaining.
       */
      public Builder setDisableToastsInGame(boolean value) {

        disableToastsInGame_ = value;
        bitField1_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool disable_toasts_in_game = 6001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "DisableToastsInGame"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDisableToastsInGame() {
        bitField1_ = (bitField1_ & ~0x00080000);
        disableToastsInGame_ = false;
        onChanged();
        return this;
      }

      private boolean playSoundOnToast_ ;
      /**
       * <code>optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];</code>
       * @return Whether the playSoundOnToast field is set.
       */
      @java.lang.Override
      public boolean hasPlaySoundOnToast() {
        return ((bitField1_ & 0x00100000) != 0);
      }
      /**
       * <code>optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];</code>
       * @return The playSoundOnToast.
       */
      @java.lang.Override
      public boolean getPlaySoundOnToast() {
        return playSoundOnToast_;
      }
      /**
       * <code>optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];</code>
       * @param value The playSoundOnToast to set.
       * @return This builder for chaining.
       */
      public Builder setPlaySoundOnToast(boolean value) {

        playSoundOnToast_ = value;
        bitField1_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool play_sound_on_toast = 6002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "PlaySoundOnToast", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearPlaySoundOnToast() {
        bitField1_ = (bitField1_ & ~0x00100000);
        playSoundOnToast_ = false;
        onChanged();
        return this;
      }

      private int libraryDisplaySize_ ;
      /**
       * <code>optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];</code>
       * @return Whether the libraryDisplaySize field is set.
       */
      @java.lang.Override
      public boolean hasLibraryDisplaySize() {
        return ((bitField1_ & 0x00200000) != 0);
      }
      /**
       * <code>optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];</code>
       * @return The libraryDisplaySize.
       */
      @java.lang.Override
      public int getLibraryDisplaySize() {
        return libraryDisplaySize_;
      }
      /**
       * <code>optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];</code>
       * @param value The libraryDisplaySize to set.
       * @return This builder for chaining.
       */
      public Builder setLibraryDisplaySize(int value) {

        libraryDisplaySize_ = value;
        bitField1_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 library_display_size = 7000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplaySize"];</code>
       * @return This builder for chaining.
       */
      public Builder clearLibraryDisplaySize() {
        bitField1_ = (bitField1_ & ~0x00200000);
        libraryDisplaySize_ = 0;
        onChanged();
        return this;
      }

      private boolean libraryWhatsNewShowOnlyProductUpdates_ ;
      /**
       * <code>optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];</code>
       * @return Whether the libraryWhatsNewShowOnlyProductUpdates field is set.
       */
      @java.lang.Override
      public boolean hasLibraryWhatsNewShowOnlyProductUpdates() {
        return ((bitField1_ & 0x00400000) != 0);
      }
      /**
       * <code>optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];</code>
       * @return The libraryWhatsNewShowOnlyProductUpdates.
       */
      @java.lang.Override
      public boolean getLibraryWhatsNewShowOnlyProductUpdates() {
        return libraryWhatsNewShowOnlyProductUpdates_;
      }
      /**
       * <code>optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];</code>
       * @param value The libraryWhatsNewShowOnlyProductUpdates to set.
       * @return This builder for chaining.
       */
      public Builder setLibraryWhatsNewShowOnlyProductUpdates(boolean value) {

        libraryWhatsNewShowOnlyProductUpdates_ = value;
        bitField1_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool library_whats_new_show_only_product_updates = 7001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "LibraryWhatsNewShowOnlyProductUpdates"];</code>
       * @return This builder for chaining.
       */
      public Builder clearLibraryWhatsNewShowOnlyProductUpdates() {
        bitField1_ = (bitField1_ & ~0x00400000);
        libraryWhatsNewShowOnlyProductUpdates_ = false;
        onChanged();
        return this;
      }

      private boolean showStoreContentOnHome_ ;
      /**
       * <code>optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];</code>
       * @return Whether the showStoreContentOnHome field is set.
       */
      @java.lang.Override
      public boolean hasShowStoreContentOnHome() {
        return ((bitField1_ & 0x00800000) != 0);
      }
      /**
       * <code>optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];</code>
       * @return The showStoreContentOnHome.
       */
      @java.lang.Override
      public boolean getShowStoreContentOnHome() {
        return showStoreContentOnHome_;
      }
      /**
       * <code>optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];</code>
       * @param value The showStoreContentOnHome to set.
       * @return This builder for chaining.
       */
      public Builder setShowStoreContentOnHome(boolean value) {

        showStoreContentOnHome_ = value;
        bitField1_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool show_store_content_on_home = 7002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ShowStoreContentOnHome", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearShowStoreContentOnHome() {
        bitField1_ = (bitField1_ & ~0x00800000);
        showStoreContentOnHome_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object startPage_ = "";
      /**
       * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the startPage field is set.
       */
      public boolean hasStartPage() {
        return ((bitField1_ & 0x01000000) != 0);
      }
      /**
       * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The startPage.
       */
      public java.lang.String getStartPage() {
        java.lang.Object ref = startPage_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            startPage_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The bytes for startPage.
       */
      public com.google.protobuf.ByteString
          getStartPageBytes() {
        java.lang.Object ref = startPage_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          startPage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The startPage to set.
       * @return This builder for chaining.
       */
      public Builder setStartPage(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        startPage_ = value;
        bitField1_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearStartPage() {
        startPage_ = getDefaultInstance().getStartPage();
        bitField1_ = (bitField1_ & ~0x01000000);
        onChanged();
        return this;
      }
      /**
       * <code>optional string start_page = 7003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The bytes for startPage to set.
       * @return This builder for chaining.
       */
      public Builder setStartPageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        startPage_ = value;
        bitField1_ |= 0x01000000;
        onChanged();
        return this;
      }

      private boolean libraryLowBandwidthMode_ ;
      /**
       * <code>optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];</code>
       * @return Whether the libraryLowBandwidthMode field is set.
       */
      @java.lang.Override
      public boolean hasLibraryLowBandwidthMode() {
        return ((bitField1_ & 0x02000000) != 0);
      }
      /**
       * <code>optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];</code>
       * @return The libraryLowBandwidthMode.
       */
      @java.lang.Override
      public boolean getLibraryLowBandwidthMode() {
        return libraryLowBandwidthMode_;
      }
      /**
       * <code>optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];</code>
       * @param value The libraryLowBandwidthMode to set.
       * @return This builder for chaining.
       */
      public Builder setLibraryLowBandwidthMode(boolean value) {

        libraryLowBandwidthMode_ = value;
        bitField1_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool library_low_bandwidth_mode = 7004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowBandwidthMode"];</code>
       * @return This builder for chaining.
       */
      public Builder clearLibraryLowBandwidthMode() {
        bitField1_ = (bitField1_ & ~0x02000000);
        libraryLowBandwidthMode_ = false;
        onChanged();
        return this;
      }

      private boolean libraryLowPerfMode_ ;
      /**
       * <code>optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];</code>
       * @return Whether the libraryLowPerfMode field is set.
       */
      @java.lang.Override
      public boolean hasLibraryLowPerfMode() {
        return ((bitField1_ & 0x04000000) != 0);
      }
      /**
       * <code>optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];</code>
       * @return The libraryLowPerfMode.
       */
      @java.lang.Override
      public boolean getLibraryLowPerfMode() {
        return libraryLowPerfMode_;
      }
      /**
       * <code>optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];</code>
       * @param value The libraryLowPerfMode to set.
       * @return This builder for chaining.
       */
      public Builder setLibraryLowPerfMode(boolean value) {

        libraryLowPerfMode_ = value;
        bitField1_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool library_low_perf_mode = 7005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryLowPerfMode"];</code>
       * @return This builder for chaining.
       */
      public Builder clearLibraryLowPerfMode() {
        bitField1_ = (bitField1_ & ~0x04000000);
        libraryLowPerfMode_ = false;
        onChanged();
        return this;
      }

      private boolean libraryDisableCommunityContent_ ;
      /**
       * <code>optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];</code>
       * @return Whether the libraryDisableCommunityContent field is set.
       */
      @java.lang.Override
      public boolean hasLibraryDisableCommunityContent() {
        return ((bitField1_ & 0x08000000) != 0);
      }
      /**
       * <code>optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];</code>
       * @return The libraryDisableCommunityContent.
       */
      @java.lang.Override
      public boolean getLibraryDisableCommunityContent() {
        return libraryDisableCommunityContent_;
      }
      /**
       * <code>optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];</code>
       * @param value The libraryDisableCommunityContent to set.
       * @return This builder for chaining.
       */
      public Builder setLibraryDisableCommunityContent(boolean value) {

        libraryDisableCommunityContent_ = value;
        bitField1_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool library_disable_community_content = 7006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisableCommunityContent"];</code>
       * @return This builder for chaining.
       */
      public Builder clearLibraryDisableCommunityContent() {
        bitField1_ = (bitField1_ & ~0x08000000);
        libraryDisableCommunityContent_ = false;
        onChanged();
        return this;
      }

      private boolean libraryDisplayIconInGameList_ ;
      /**
       * <code>optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];</code>
       * @return Whether the libraryDisplayIconInGameList field is set.
       */
      @java.lang.Override
      public boolean hasLibraryDisplayIconInGameList() {
        return ((bitField1_ & 0x10000000) != 0);
      }
      /**
       * <code>optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];</code>
       * @return The libraryDisplayIconInGameList.
       */
      @java.lang.Override
      public boolean getLibraryDisplayIconInGameList() {
        return libraryDisplayIconInGameList_;
      }
      /**
       * <code>optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];</code>
       * @param value The libraryDisplayIconInGameList to set.
       * @return This builder for chaining.
       */
      public Builder setLibraryDisplayIconInGameList(boolean value) {

        libraryDisplayIconInGameList_ = value;
        bitField1_ |= 0x10000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool library_display_icon_in_game_list = 7007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "LibraryDisplayIconInGameList", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearLibraryDisplayIconInGameList() {
        bitField1_ = (bitField1_ & ~0x10000000);
        libraryDisplayIconInGameList_ = false;
        onChanged();
        return this;
      }

      private boolean readyToPlayIncludesStreaming_ ;
      /**
       * <code>optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];</code>
       * @return Whether the readyToPlayIncludesStreaming field is set.
       */
      @java.lang.Override
      public boolean hasReadyToPlayIncludesStreaming() {
        return ((bitField1_ & 0x20000000) != 0);
      }
      /**
       * <code>optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];</code>
       * @return The readyToPlayIncludesStreaming.
       */
      @java.lang.Override
      public boolean getReadyToPlayIncludesStreaming() {
        return readyToPlayIncludesStreaming_;
      }
      /**
       * <code>optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];</code>
       * @param value The readyToPlayIncludesStreaming to set.
       * @return This builder for chaining.
       */
      public Builder setReadyToPlayIncludesStreaming(boolean value) {

        readyToPlayIncludesStreaming_ = value;
        bitField1_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ready_to_play_includes_streaming = 7008 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_name) = "ReadyToPlayIncludesStreaming"];</code>
       * @return This builder for chaining.
       */
      public Builder clearReadyToPlayIncludesStreaming() {
        bitField1_ = (bitField1_ & ~0x20000000);
        readyToPlayIncludesStreaming_ = false;
        onChanged();
        return this;
      }

      private boolean showSteamDeckInfo_ ;
      /**
       * <code>optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];</code>
       * @return Whether the showSteamDeckInfo field is set.
       */
      @java.lang.Override
      public boolean hasShowSteamDeckInfo() {
        return ((bitField1_ & 0x40000000) != 0);
      }
      /**
       * <code>optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];</code>
       * @return The showSteamDeckInfo.
       */
      @java.lang.Override
      public boolean getShowSteamDeckInfo() {
        return showSteamDeckInfo_;
      }
      /**
       * <code>optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];</code>
       * @param value The showSteamDeckInfo to set.
       * @return This builder for chaining.
       */
      public Builder setShowSteamDeckInfo(boolean value) {

        showSteamDeckInfo_ = value;
        bitField1_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool show_steam_deck_info = 7009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "ShowSteamDeckInfoInLibrary"];</code>
       * @return This builder for chaining.
       */
      public Builder clearShowSteamDeckInfo() {
        bitField1_ = (bitField1_ & ~0x40000000);
        showSteamDeckInfo_ = false;
        onChanged();
        return this;
      }

      private boolean enableShaderPrecache_ ;
      /**
       * <code>optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the enableShaderPrecache field is set.
       */
      @java.lang.Override
      public boolean hasEnableShaderPrecache() {
        return ((bitField1_ & 0x80000000) != 0);
      }
      /**
       * <code>optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The enableShaderPrecache.
       */
      @java.lang.Override
      public boolean getEnableShaderPrecache() {
        return enableShaderPrecache_;
      }
      /**
       * <code>optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The enableShaderPrecache to set.
       * @return This builder for chaining.
       */
      public Builder setEnableShaderPrecache(boolean value) {

        enableShaderPrecache_ = value;
        bitField1_ |= 0x80000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_shader_precache = 8000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableShaderPrecache() {
        bitField1_ = (bitField1_ & ~0x80000000);
        enableShaderPrecache_ = false;
        onChanged();
        return this;
      }

      private boolean enableShaderBackgroundProcessing_ ;
      /**
       * <code>optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the enableShaderBackgroundProcessing field is set.
       */
      @java.lang.Override
      public boolean hasEnableShaderBackgroundProcessing() {
        return ((bitField2_ & 0x00000001) != 0);
      }
      /**
       * <code>optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The enableShaderBackgroundProcessing.
       */
      @java.lang.Override
      public boolean getEnableShaderBackgroundProcessing() {
        return enableShaderBackgroundProcessing_;
      }
      /**
       * <code>optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The enableShaderBackgroundProcessing to set.
       * @return This builder for chaining.
       */
      public Builder setEnableShaderBackgroundProcessing(boolean value) {

        enableShaderBackgroundProcessing_ = value;
        bitField2_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_shader_background_processing = 8001 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableShaderBackgroundProcessing() {
        bitField2_ = (bitField2_ & ~0x00000001);
        enableShaderBackgroundProcessing_ = false;
        onChanged();
        return this;
      }

      private long shaderPrecachedSize_ ;
      /**
       * <code>optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
       * @return Whether the shaderPrecachedSize field is set.
       */
      @java.lang.Override
      public boolean hasShaderPrecachedSize() {
        return ((bitField2_ & 0x00000002) != 0);
      }
      /**
       * <code>optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
       * @return The shaderPrecachedSize.
       */
      @java.lang.Override
      public long getShaderPrecachedSize() {
        return shaderPrecachedSize_;
      }
      /**
       * <code>optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
       * @param value The shaderPrecachedSize to set.
       * @return This builder for chaining.
       */
      public Builder setShaderPrecachedSize(long value) {

        shaderPrecachedSize_ = value;
        bitField2_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 shader_precached_size = 8002 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearShaderPrecachedSize() {
        bitField2_ = (bitField2_ & ~0x00000002);
        shaderPrecachedSize_ = 0L;
        onChanged();
        return this;
      }

      private boolean needsSteamServiceRepair_ ;
      /**
       * <code>optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
       * @return Whether the needsSteamServiceRepair field is set.
       */
      @java.lang.Override
      public boolean hasNeedsSteamServiceRepair() {
        return ((bitField2_ & 0x00000004) != 0);
      }
      /**
       * <code>optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
       * @return The needsSteamServiceRepair.
       */
      @java.lang.Override
      public boolean getNeedsSteamServiceRepair() {
        return needsSteamServiceRepair_;
      }
      /**
       * <code>optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
       * @param value The needsSteamServiceRepair to set.
       * @return This builder for chaining.
       */
      public Builder setNeedsSteamServiceRepair(boolean value) {

        needsSteamServiceRepair_ = value;
        bitField2_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool needs_steam_service_repair = 8003 [(.setting_store) = k_EClientSettingStore_CustomFunc, (.setting_readonly) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearNeedsSteamServiceRepair() {
        bitField2_ = (bitField2_ & ~0x00000004);
        needsSteamServiceRepair_ = false;
        onChanged();
        return this;
      }

      private int downloadPeerContent_ ;
      /**
       * <code>optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the downloadPeerContent field is set.
       */
      @java.lang.Override
      public boolean hasDownloadPeerContent() {
        return ((bitField2_ & 0x00000008) != 0);
      }
      /**
       * <code>optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The downloadPeerContent.
       */
      @java.lang.Override
      public int getDownloadPeerContent() {
        return downloadPeerContent_;
      }
      /**
       * <code>optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The downloadPeerContent to set.
       * @return This builder for chaining.
       */
      public Builder setDownloadPeerContent(int value) {

        downloadPeerContent_ = value;
        bitField2_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 download_peer_content = 8004 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearDownloadPeerContent() {
        bitField2_ = (bitField2_ & ~0x00000008);
        downloadPeerContent_ = 0;
        onChanged();
        return this;
      }

      private boolean downloadRateBitsPerS_ ;
      /**
       * <code>optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the downloadRateBitsPerS field is set.
       */
      @java.lang.Override
      public boolean hasDownloadRateBitsPerS() {
        return ((bitField2_ & 0x00000010) != 0);
      }
      /**
       * <code>optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The downloadRateBitsPerS.
       */
      @java.lang.Override
      public boolean getDownloadRateBitsPerS() {
        return downloadRateBitsPerS_;
      }
      /**
       * <code>optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The downloadRateBitsPerS to set.
       * @return This builder for chaining.
       */
      public Builder setDownloadRateBitsPerS(boolean value) {

        downloadRateBitsPerS_ = value;
        bitField2_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool download_rate_bits_per_s = 8005 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearDownloadRateBitsPerS() {
        bitField2_ = (bitField2_ & ~0x00000010);
        downloadRateBitsPerS_ = false;
        onChanged();
        return this;
      }

      private boolean restrictAutoUpdates_ ;
      /**
       * <code>optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the restrictAutoUpdates field is set.
       */
      @java.lang.Override
      public boolean hasRestrictAutoUpdates() {
        return ((bitField2_ & 0x00000020) != 0);
      }
      /**
       * <code>optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The restrictAutoUpdates.
       */
      @java.lang.Override
      public boolean getRestrictAutoUpdates() {
        return restrictAutoUpdates_;
      }
      /**
       * <code>optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The restrictAutoUpdates to set.
       * @return This builder for chaining.
       */
      public Builder setRestrictAutoUpdates(boolean value) {

        restrictAutoUpdates_ = value;
        bitField2_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool restrict_auto_updates = 8006 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearRestrictAutoUpdates() {
        bitField2_ = (bitField2_ & ~0x00000020);
        restrictAutoUpdates_ = false;
        onChanged();
        return this;
      }

      private int restrictAutoUpdatesStart_ ;
      /**
       * <code>optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the restrictAutoUpdatesStart field is set.
       */
      @java.lang.Override
      public boolean hasRestrictAutoUpdatesStart() {
        return ((bitField2_ & 0x00000040) != 0);
      }
      /**
       * <code>optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The restrictAutoUpdatesStart.
       */
      @java.lang.Override
      public int getRestrictAutoUpdatesStart() {
        return restrictAutoUpdatesStart_;
      }
      /**
       * <code>optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The restrictAutoUpdatesStart to set.
       * @return This builder for chaining.
       */
      public Builder setRestrictAutoUpdatesStart(int value) {

        restrictAutoUpdatesStart_ = value;
        bitField2_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 restrict_auto_updates_start = 8007 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearRestrictAutoUpdatesStart() {
        bitField2_ = (bitField2_ & ~0x00000040);
        restrictAutoUpdatesStart_ = 0;
        onChanged();
        return this;
      }

      private int restrictAutoUpdatesEnd_ ;
      /**
       * <code>optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the restrictAutoUpdatesEnd field is set.
       */
      @java.lang.Override
      public boolean hasRestrictAutoUpdatesEnd() {
        return ((bitField2_ & 0x00000080) != 0);
      }
      /**
       * <code>optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The restrictAutoUpdatesEnd.
       */
      @java.lang.Override
      public int getRestrictAutoUpdatesEnd() {
        return restrictAutoUpdatesEnd_;
      }
      /**
       * <code>optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The restrictAutoUpdatesEnd to set.
       * @return This builder for chaining.
       */
      public Builder setRestrictAutoUpdatesEnd(int value) {

        restrictAutoUpdatesEnd_ = value;
        bitField2_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 restrict_auto_updates_end = 8008 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearRestrictAutoUpdatesEnd() {
        bitField2_ = (bitField2_ & ~0x00000080);
        restrictAutoUpdatesEnd_ = 0;
        onChanged();
        return this;
      }

      private int downloadRegion_ ;
      /**
       * <code>optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the downloadRegion field is set.
       */
      @java.lang.Override
      public boolean hasDownloadRegion() {
        return ((bitField2_ & 0x00000100) != 0);
      }
      /**
       * <code>optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The downloadRegion.
       */
      @java.lang.Override
      public int getDownloadRegion() {
        return downloadRegion_;
      }
      /**
       * <code>optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The downloadRegion to set.
       * @return This builder for chaining.
       */
      public Builder setDownloadRegion(int value) {

        downloadRegion_ = value;
        bitField2_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 download_region = 8009 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearDownloadRegion() {
        bitField2_ = (bitField2_ & ~0x00000100);
        downloadRegion_ = 0;
        onChanged();
        return this;
      }

      private boolean downloadWhileAppRunning_ ;
      /**
       * <code>optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the downloadWhileAppRunning field is set.
       */
      @java.lang.Override
      public boolean hasDownloadWhileAppRunning() {
        return ((bitField2_ & 0x00000200) != 0);
      }
      /**
       * <code>optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The downloadWhileAppRunning.
       */
      @java.lang.Override
      public boolean getDownloadWhileAppRunning() {
        return downloadWhileAppRunning_;
      }
      /**
       * <code>optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The downloadWhileAppRunning to set.
       * @return This builder for chaining.
       */
      public Builder setDownloadWhileAppRunning(boolean value) {

        downloadWhileAppRunning_ = value;
        bitField2_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool download_while_app_running = 8010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearDownloadWhileAppRunning() {
        bitField2_ = (bitField2_ & ~0x00000200);
        downloadWhileAppRunning_ = false;
        onChanged();
        return this;
      }

      private boolean downloadThrottleWhileStreaming_ ;
      /**
       * <code>optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the downloadThrottleWhileStreaming field is set.
       */
      @java.lang.Override
      public boolean hasDownloadThrottleWhileStreaming() {
        return ((bitField2_ & 0x00000400) != 0);
      }
      /**
       * <code>optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The downloadThrottleWhileStreaming.
       */
      @java.lang.Override
      public boolean getDownloadThrottleWhileStreaming() {
        return downloadThrottleWhileStreaming_;
      }
      /**
       * <code>optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The downloadThrottleWhileStreaming to set.
       * @return This builder for chaining.
       */
      public Builder setDownloadThrottleWhileStreaming(boolean value) {

        downloadThrottleWhileStreaming_ = value;
        bitField2_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool download_throttle_while_streaming = 8011 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearDownloadThrottleWhileStreaming() {
        bitField2_ = (bitField2_ & ~0x00000400);
        downloadThrottleWhileStreaming_ = false;
        onChanged();
        return this;
      }

      private int downloadThrottleRate_ ;
      /**
       * <code>optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the downloadThrottleRate field is set.
       */
      @java.lang.Override
      public boolean hasDownloadThrottleRate() {
        return ((bitField2_ & 0x00000800) != 0);
      }
      /**
       * <code>optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The downloadThrottleRate.
       */
      @java.lang.Override
      public int getDownloadThrottleRate() {
        return downloadThrottleRate_;
      }
      /**
       * <code>optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The downloadThrottleRate to set.
       * @return This builder for chaining.
       */
      public Builder setDownloadThrottleRate(int value) {

        downloadThrottleRate_ = value;
        bitField2_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 download_throttle_rate = 8012 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearDownloadThrottleRate() {
        bitField2_ = (bitField2_ & ~0x00000800);
        downloadThrottleRate_ = 0;
        onChanged();
        return this;
      }

      private boolean cloudEnabled_ ;
      /**
       * <code>optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the cloudEnabled field is set.
       */
      @java.lang.Override
      public boolean hasCloudEnabled() {
        return ((bitField2_ & 0x00001000) != 0);
      }
      /**
       * <code>optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The cloudEnabled.
       */
      @java.lang.Override
      public boolean getCloudEnabled() {
        return cloudEnabled_;
      }
      /**
       * <code>optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The cloudEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setCloudEnabled(boolean value) {

        cloudEnabled_ = value;
        bitField2_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool cloud_enabled = 10000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearCloudEnabled() {
        bitField2_ = (bitField2_ & ~0x00001000);
        cloudEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean showScreenshotManager_ ;
      /**
       * <code>optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ShowScreenshotManager"];</code>
       * @return Whether the showScreenshotManager field is set.
       */
      @java.lang.Override
      public boolean hasShowScreenshotManager() {
        return ((bitField2_ & 0x00002000) != 0);
      }
      /**
       * <code>optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ShowScreenshotManager"];</code>
       * @return The showScreenshotManager.
       */
      @java.lang.Override
      public boolean getShowScreenshotManager() {
        return showScreenshotManager_;
      }
      /**
       * <code>optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ShowScreenshotManager"];</code>
       * @param value The showScreenshotManager to set.
       * @return This builder for chaining.
       */
      public Builder setShowScreenshotManager(boolean value) {

        showScreenshotManager_ = value;
        bitField2_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool show_screenshot_manager = 10001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ShowScreenshotManager"];</code>
       * @return This builder for chaining.
       */
      public Builder clearShowScreenshotManager() {
        bitField2_ = (bitField2_ & ~0x00002000);
        showScreenshotManager_ = false;
        onChanged();
        return this;
      }

      private int musicVolume_ ;
      /**
       * <code>optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the musicVolume field is set.
       */
      @java.lang.Override
      public boolean hasMusicVolume() {
        return ((bitField2_ & 0x00004000) != 0);
      }
      /**
       * <code>optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The musicVolume.
       */
      @java.lang.Override
      public int getMusicVolume() {
        return musicVolume_;
      }
      /**
       * <code>optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The musicVolume to set.
       * @return This builder for chaining.
       */
      public Builder setMusicVolume(int value) {

        musicVolume_ = value;
        bitField2_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 music_volume = 11000 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearMusicVolume() {
        bitField2_ = (bitField2_ & ~0x00004000);
        musicVolume_ = 0;
        onChanged();
        return this;
      }

      private boolean musicPauseOnAppStart_ ;
      /**
       * <code>optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnAppStartedProcess"];</code>
       * @return Whether the musicPauseOnAppStart field is set.
       */
      @java.lang.Override
      public boolean hasMusicPauseOnAppStart() {
        return ((bitField2_ & 0x00008000) != 0);
      }
      /**
       * <code>optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnAppStartedProcess"];</code>
       * @return The musicPauseOnAppStart.
       */
      @java.lang.Override
      public boolean getMusicPauseOnAppStart() {
        return musicPauseOnAppStart_;
      }
      /**
       * <code>optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnAppStartedProcess"];</code>
       * @param value The musicPauseOnAppStart to set.
       * @return This builder for chaining.
       */
      public Builder setMusicPauseOnAppStart(boolean value) {

        musicPauseOnAppStart_ = value;
        bitField2_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool music_pause_on_app_start = 11001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnAppStartedProcess"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMusicPauseOnAppStart() {
        bitField2_ = (bitField2_ & ~0x00008000);
        musicPauseOnAppStart_ = false;
        onChanged();
        return this;
      }

      private boolean musicPauseOnVoiceChat_ ;
      /**
       * <code>optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnVoiceChat"];</code>
       * @return Whether the musicPauseOnVoiceChat field is set.
       */
      @java.lang.Override
      public boolean hasMusicPauseOnVoiceChat() {
        return ((bitField2_ & 0x00010000) != 0);
      }
      /**
       * <code>optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnVoiceChat"];</code>
       * @return The musicPauseOnVoiceChat.
       */
      @java.lang.Override
      public boolean getMusicPauseOnVoiceChat() {
        return musicPauseOnVoiceChat_;
      }
      /**
       * <code>optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnVoiceChat"];</code>
       * @param value The musicPauseOnVoiceChat to set.
       * @return This builder for chaining.
       */
      public Builder setMusicPauseOnVoiceChat(boolean value) {

        musicPauseOnVoiceChat_ = value;
        bitField2_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool music_pause_on_voice_chat = 11002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PauseOnVoiceChat"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMusicPauseOnVoiceChat() {
        bitField2_ = (bitField2_ & ~0x00010000);
        musicPauseOnVoiceChat_ = false;
        onChanged();
        return this;
      }

      private boolean musicDownloadHighQuality_ ;
      /**
       * <code>optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;DownloadHighQualityAudioSoundtracks"];</code>
       * @return Whether the musicDownloadHighQuality field is set.
       */
      @java.lang.Override
      public boolean hasMusicDownloadHighQuality() {
        return ((bitField2_ & 0x00020000) != 0);
      }
      /**
       * <code>optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;DownloadHighQualityAudioSoundtracks"];</code>
       * @return The musicDownloadHighQuality.
       */
      @java.lang.Override
      public boolean getMusicDownloadHighQuality() {
        return musicDownloadHighQuality_;
      }
      /**
       * <code>optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;DownloadHighQualityAudioSoundtracks"];</code>
       * @param value The musicDownloadHighQuality to set.
       * @return This builder for chaining.
       */
      public Builder setMusicDownloadHighQuality(boolean value) {

        musicDownloadHighQuality_ = value;
        bitField2_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool music_download_high_quality = 11003 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;DownloadHighQualityAudioSoundtracks"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMusicDownloadHighQuality() {
        bitField2_ = (bitField2_ & ~0x00020000);
        musicDownloadHighQuality_ = false;
        onChanged();
        return this;
      }

      private boolean musicPlaylistNotification_ ;
      /**
       * <code>optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PlaylistNowPlayingNotification"];</code>
       * @return Whether the musicPlaylistNotification field is set.
       */
      @java.lang.Override
      public boolean hasMusicPlaylistNotification() {
        return ((bitField2_ & 0x00040000) != 0);
      }
      /**
       * <code>optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PlaylistNowPlayingNotification"];</code>
       * @return The musicPlaylistNotification.
       */
      @java.lang.Override
      public boolean getMusicPlaylistNotification() {
        return musicPlaylistNotification_;
      }
      /**
       * <code>optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PlaylistNowPlayingNotification"];</code>
       * @param value The musicPlaylistNotification to set.
       * @return This builder for chaining.
       */
      public Builder setMusicPlaylistNotification(boolean value) {

        musicPlaylistNotification_ = value;
        bitField2_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool music_playlist_notification = 11004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Music&#92;&#92;PlaylistNowPlayingNotification"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMusicPlaylistNotification() {
        bitField2_ = (bitField2_ & ~0x00040000);
        musicPlaylistNotification_ = false;
        onChanged();
        return this;
      }

      private int broadcastPermissions_ = 0;
      /**
       * <code>optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;Permissions", (.setting_default_int) = 1];</code>
       * @return Whether the broadcastPermissions field is set.
       */
      @java.lang.Override public boolean hasBroadcastPermissions() {
        return ((bitField2_ & 0x00080000) != 0);
      }
      /**
       * <code>optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;Permissions", (.setting_default_int) = 1];</code>
       * @return The broadcastPermissions.
       */
      @java.lang.Override
      public Enums.EBroadcastPermission getBroadcastPermissions() {
        Enums.EBroadcastPermission result = Enums.EBroadcastPermission.forNumber(broadcastPermissions_);
        return result == null ? Enums.EBroadcastPermission.k_EBroadcastPermissionDisabled : result;
      }
      /**
       * <code>optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;Permissions", (.setting_default_int) = 1];</code>
       * @param value The broadcastPermissions to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastPermissions(Enums.EBroadcastPermission value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField2_ |= 0x00080000;
        broadcastPermissions_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .EBroadcastPermission broadcast_permissions = 12000 [default = k_EBroadcastPermissionDisabled, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;Permissions", (.setting_default_int) = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastPermissions() {
        bitField2_ = (bitField2_ & ~0x00080000);
        broadcastPermissions_ = 0;
        onChanged();
        return this;
      }

      private int broadcastOutputWidth_ ;
      /**
       * <code>optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputWidth"];</code>
       * @return Whether the broadcastOutputWidth field is set.
       */
      @java.lang.Override
      public boolean hasBroadcastOutputWidth() {
        return ((bitField2_ & 0x00100000) != 0);
      }
      /**
       * <code>optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputWidth"];</code>
       * @return The broadcastOutputWidth.
       */
      @java.lang.Override
      public int getBroadcastOutputWidth() {
        return broadcastOutputWidth_;
      }
      /**
       * <code>optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputWidth"];</code>
       * @param value The broadcastOutputWidth to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastOutputWidth(int value) {

        broadcastOutputWidth_ = value;
        bitField2_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 broadcast_output_width = 12001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputWidth"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastOutputWidth() {
        bitField2_ = (bitField2_ & ~0x00100000);
        broadcastOutputWidth_ = 0;
        onChanged();
        return this;
      }

      private int broadcastOutputHeight_ ;
      /**
       * <code>optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputHeight"];</code>
       * @return Whether the broadcastOutputHeight field is set.
       */
      @java.lang.Override
      public boolean hasBroadcastOutputHeight() {
        return ((bitField2_ & 0x00200000) != 0);
      }
      /**
       * <code>optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputHeight"];</code>
       * @return The broadcastOutputHeight.
       */
      @java.lang.Override
      public int getBroadcastOutputHeight() {
        return broadcastOutputHeight_;
      }
      /**
       * <code>optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputHeight"];</code>
       * @param value The broadcastOutputHeight to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastOutputHeight(int value) {

        broadcastOutputHeight_ = value;
        bitField2_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 broadcast_output_height = 12002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;OutputHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastOutputHeight() {
        bitField2_ = (bitField2_ & ~0x00200000);
        broadcastOutputHeight_ = 0;
        onChanged();
        return this;
      }

      private int broadcastBitrate_ ;
      /**
       * <code>optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;MaxKbps"];</code>
       * @return Whether the broadcastBitrate field is set.
       */
      @java.lang.Override
      public boolean hasBroadcastBitrate() {
        return ((bitField2_ & 0x00400000) != 0);
      }
      /**
       * <code>optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;MaxKbps"];</code>
       * @return The broadcastBitrate.
       */
      @java.lang.Override
      public int getBroadcastBitrate() {
        return broadcastBitrate_;
      }
      /**
       * <code>optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;MaxKbps"];</code>
       * @param value The broadcastBitrate to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastBitrate(int value) {

        broadcastBitrate_ = value;
        bitField2_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 broadcast_bitrate = 12003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;MaxKbps"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastBitrate() {
        bitField2_ = (bitField2_ & ~0x00400000);
        broadcastBitrate_ = 0;
        onChanged();
        return this;
      }

      private int broadcastEncodingOption_ = 0;
      /**
       * <code>optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;EncoderSetting"];</code>
       * @return Whether the broadcastEncodingOption field is set.
       */
      @java.lang.Override public boolean hasBroadcastEncodingOption() {
        return ((bitField2_ & 0x00800000) != 0);
      }
      /**
       * <code>optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;EncoderSetting"];</code>
       * @return The broadcastEncodingOption.
       */
      @java.lang.Override
      public Enums.EBroadcastEncoderSetting getBroadcastEncodingOption() {
        Enums.EBroadcastEncoderSetting result = Enums.EBroadcastEncoderSetting.forNumber(broadcastEncodingOption_);
        return result == null ? Enums.EBroadcastEncoderSetting.k_EBroadcastEncoderBestQuality : result;
      }
      /**
       * <code>optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;EncoderSetting"];</code>
       * @param value The broadcastEncodingOption to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastEncodingOption(Enums.EBroadcastEncoderSetting value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField2_ |= 0x00800000;
        broadcastEncodingOption_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .EBroadcastEncoderSetting broadcast_encoding_option = 12004 [default = k_EBroadcastEncoderBestQuality, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;EncoderSetting"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastEncodingOption() {
        bitField2_ = (bitField2_ & ~0x00800000);
        broadcastEncodingOption_ = 0;
        onChanged();
        return this;
      }

      private boolean broadcastRecordAllVideo_ ;
      /**
       * <code>optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;IncludeDesktop"];</code>
       * @return Whether the broadcastRecordAllVideo field is set.
       */
      @java.lang.Override
      public boolean hasBroadcastRecordAllVideo() {
        return ((bitField2_ & 0x01000000) != 0);
      }
      /**
       * <code>optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;IncludeDesktop"];</code>
       * @return The broadcastRecordAllVideo.
       */
      @java.lang.Override
      public boolean getBroadcastRecordAllVideo() {
        return broadcastRecordAllVideo_;
      }
      /**
       * <code>optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;IncludeDesktop"];</code>
       * @param value The broadcastRecordAllVideo to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastRecordAllVideo(boolean value) {

        broadcastRecordAllVideo_ = value;
        bitField2_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool broadcast_record_all_video = 12005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;IncludeDesktop"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastRecordAllVideo() {
        bitField2_ = (bitField2_ & ~0x01000000);
        broadcastRecordAllVideo_ = false;
        onChanged();
        return this;
      }

      private boolean broadcastRecordAllAudio_ ;
      /**
       * <code>optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordSystemAudio"];</code>
       * @return Whether the broadcastRecordAllAudio field is set.
       */
      @java.lang.Override
      public boolean hasBroadcastRecordAllAudio() {
        return ((bitField2_ & 0x02000000) != 0);
      }
      /**
       * <code>optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordSystemAudio"];</code>
       * @return The broadcastRecordAllAudio.
       */
      @java.lang.Override
      public boolean getBroadcastRecordAllAudio() {
        return broadcastRecordAllAudio_;
      }
      /**
       * <code>optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordSystemAudio"];</code>
       * @param value The broadcastRecordAllAudio to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastRecordAllAudio(boolean value) {

        broadcastRecordAllAudio_ = value;
        bitField2_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool broadcast_record_all_audio = 12006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordSystemAudio"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastRecordAllAudio() {
        bitField2_ = (bitField2_ & ~0x02000000);
        broadcastRecordAllAudio_ = false;
        onChanged();
        return this;
      }

      private boolean broadcastRecordMicrophone_ ;
      /**
       * <code>optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordMic"];</code>
       * @return Whether the broadcastRecordMicrophone field is set.
       */
      @java.lang.Override
      public boolean hasBroadcastRecordMicrophone() {
        return ((bitField2_ & 0x04000000) != 0);
      }
      /**
       * <code>optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordMic"];</code>
       * @return The broadcastRecordMicrophone.
       */
      @java.lang.Override
      public boolean getBroadcastRecordMicrophone() {
        return broadcastRecordMicrophone_;
      }
      /**
       * <code>optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordMic"];</code>
       * @param value The broadcastRecordMicrophone to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastRecordMicrophone(boolean value) {

        broadcastRecordMicrophone_ = value;
        bitField2_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool broadcast_record_microphone = 12007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;RecordMic"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastRecordMicrophone() {
        bitField2_ = (bitField2_ & ~0x04000000);
        broadcastRecordMicrophone_ = false;
        onChanged();
        return this;
      }

      private boolean broadcastShowUploadStats_ ;
      /**
       * <code>optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowDebugInfo"];</code>
       * @return Whether the broadcastShowUploadStats field is set.
       */
      @java.lang.Override
      public boolean hasBroadcastShowUploadStats() {
        return ((bitField2_ & 0x08000000) != 0);
      }
      /**
       * <code>optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowDebugInfo"];</code>
       * @return The broadcastShowUploadStats.
       */
      @java.lang.Override
      public boolean getBroadcastShowUploadStats() {
        return broadcastShowUploadStats_;
      }
      /**
       * <code>optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowDebugInfo"];</code>
       * @param value The broadcastShowUploadStats to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastShowUploadStats(boolean value) {

        broadcastShowUploadStats_ = value;
        bitField2_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool broadcast_show_upload_stats = 12008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowDebugInfo"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastShowUploadStats() {
        bitField2_ = (bitField2_ & ~0x08000000);
        broadcastShowUploadStats_ = false;
        onChanged();
        return this;
      }

      private boolean broadcastShowLiveReminder_ ;
      /**
       * <code>optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowReminder", (.setting_default_bool) = true];</code>
       * @return Whether the broadcastShowLiveReminder field is set.
       */
      @java.lang.Override
      public boolean hasBroadcastShowLiveReminder() {
        return ((bitField2_ & 0x10000000) != 0);
      }
      /**
       * <code>optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowReminder", (.setting_default_bool) = true];</code>
       * @return The broadcastShowLiveReminder.
       */
      @java.lang.Override
      public boolean getBroadcastShowLiveReminder() {
        return broadcastShowLiveReminder_;
      }
      /**
       * <code>optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowReminder", (.setting_default_bool) = true];</code>
       * @param value The broadcastShowLiveReminder to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastShowLiveReminder(boolean value) {

        broadcastShowLiveReminder_ = value;
        bitField2_ |= 0x10000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool broadcast_show_live_reminder = 12009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowReminder", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastShowLiveReminder() {
        bitField2_ = (bitField2_ & ~0x10000000);
        broadcastShowLiveReminder_ = false;
        onChanged();
        return this;
      }

      private int broadcastChatCorner_ ;
      /**
       * <code>optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowChat", (.setting_default_int) = 1];</code>
       * @return Whether the broadcastChatCorner field is set.
       */
      @java.lang.Override
      public boolean hasBroadcastChatCorner() {
        return ((bitField2_ & 0x20000000) != 0);
      }
      /**
       * <code>optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowChat", (.setting_default_int) = 1];</code>
       * @return The broadcastChatCorner.
       */
      @java.lang.Override
      public int getBroadcastChatCorner() {
        return broadcastChatCorner_;
      }
      /**
       * <code>optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowChat", (.setting_default_int) = 1];</code>
       * @param value The broadcastChatCorner to set.
       * @return This builder for chaining.
       */
      public Builder setBroadcastChatCorner(int value) {

        broadcastChatCorner_ = value;
        bitField2_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 broadcast_chat_corner = 12010 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Broadcast&#92;&#92;ShowChat", (.setting_default_int) = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearBroadcastChatCorner() {
        bitField2_ = (bitField2_ & ~0x20000000);
        broadcastChatCorner_ = 0;
        onChanged();
        return this;
      }

      private boolean steamInputConfiguratorErrorMsgEnable_ ;
      /**
       * <code>optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];</code>
       * @return Whether the steamInputConfiguratorErrorMsgEnable field is set.
       */
      @java.lang.Override
      public boolean hasSteamInputConfiguratorErrorMsgEnable() {
        return ((bitField2_ & 0x40000000) != 0);
      }
      /**
       * <code>optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];</code>
       * @return The steamInputConfiguratorErrorMsgEnable.
       */
      @java.lang.Override
      public boolean getSteamInputConfiguratorErrorMsgEnable() {
        return steamInputConfiguratorErrorMsgEnable_;
      }
      /**
       * <code>optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];</code>
       * @param value The steamInputConfiguratorErrorMsgEnable to set.
       * @return This builder for chaining.
       */
      public Builder setSteamInputConfiguratorErrorMsgEnable(boolean value) {

        steamInputConfiguratorErrorMsgEnable_ = value;
        bitField2_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool steam_input_configurator_error_msg_enable = 14001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "SteamInput/Configurator/ErrorMsgEnabled"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSteamInputConfiguratorErrorMsgEnable() {
        bitField2_ = (bitField2_ & ~0x40000000);
        steamInputConfiguratorErrorMsgEnable_ = false;
        onChanged();
        return this;
      }

      private boolean controllerGuideButtonFocusSteam_ ;
      /**
       * <code>optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];</code>
       * @return Whether the controllerGuideButtonFocusSteam field is set.
       */
      @java.lang.Override
      public boolean hasControllerGuideButtonFocusSteam() {
        return ((bitField2_ & 0x80000000) != 0);
      }
      /**
       * <code>optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];</code>
       * @return The controllerGuideButtonFocusSteam.
       */
      @java.lang.Override
      public boolean getControllerGuideButtonFocusSteam() {
        return controllerGuideButtonFocusSteam_;
      }
      /**
       * <code>optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];</code>
       * @param value The controllerGuideButtonFocusSteam to set.
       * @return This builder for chaining.
       */
      public Builder setControllerGuideButtonFocusSteam(boolean value) {

        controllerGuideButtonFocusSteam_ = value;
        bitField2_ |= 0x80000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool controller_guide_button_focus_steam = 14002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Controller_CheckGuideButton"];</code>
       * @return This builder for chaining.
       */
      public Builder clearControllerGuideButtonFocusSteam() {
        bitField2_ = (bitField2_ & ~0x80000000);
        controllerGuideButtonFocusSteam_ = false;
        onChanged();
        return this;
      }

      private int controllerPsSupport_ ;
      /**
       * <code>optional int32 controller_ps_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];</code>
       * @return Whether the controllerPsSupport field is set.
       */
      @java.lang.Override
      public boolean hasControllerPsSupport() {
        return ((bitField3_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 controller_ps_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];</code>
       * @return The controllerPsSupport.
       */
      @java.lang.Override
      public int getControllerPsSupport() {
        return controllerPsSupport_;
      }
      /**
       * <code>optional int32 controller_ps_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];</code>
       * @param value The controllerPsSupport to set.
       * @return This builder for chaining.
       */
      public Builder setControllerPsSupport(int value) {

        controllerPsSupport_ = value;
        bitField3_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 controller_ps_support = 14003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_PSSupport", (.setting_default_int) = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearControllerPsSupport() {
        bitField3_ = (bitField3_ & ~0x00000001);
        controllerPsSupport_ = 0;
        onChanged();
        return this;
      }

      private boolean controllerXboxSupport_ ;
      /**
       * <code>optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];</code>
       * @return Whether the controllerXboxSupport field is set.
       */
      @java.lang.Override
      public boolean hasControllerXboxSupport() {
        return ((bitField3_ & 0x00000002) != 0);
      }
      /**
       * <code>optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];</code>
       * @return The controllerXboxSupport.
       */
      @java.lang.Override
      public boolean getControllerXboxSupport() {
        return controllerXboxSupport_;
      }
      /**
       * <code>optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];</code>
       * @param value The controllerXboxSupport to set.
       * @return This builder for chaining.
       */
      public Builder setControllerXboxSupport(boolean value) {

        controllerXboxSupport_ = value;
        bitField3_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool controller_xbox_support = 14004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxSupport"];</code>
       * @return This builder for chaining.
       */
      public Builder clearControllerXboxSupport() {
        bitField3_ = (bitField3_ & ~0x00000002);
        controllerXboxSupport_ = false;
        onChanged();
        return this;
      }

      private boolean controllerXboxDriver_ ;
      /**
       * <code>optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];</code>
       * @return Whether the controllerXboxDriver field is set.
       */
      @java.lang.Override
      public boolean hasControllerXboxDriver() {
        return ((bitField3_ & 0x00000004) != 0);
      }
      /**
       * <code>optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];</code>
       * @return The controllerXboxDriver.
       */
      @java.lang.Override
      public boolean getControllerXboxDriver() {
        return controllerXboxDriver_;
      }
      /**
       * <code>optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];</code>
       * @param value The controllerXboxDriver to set.
       * @return This builder for chaining.
       */
      public Builder setControllerXboxDriver(boolean value) {

        controllerXboxDriver_ = value;
        bitField3_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool controller_xbox_driver = 14005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_XBoxDriver"];</code>
       * @return This builder for chaining.
       */
      public Builder clearControllerXboxDriver() {
        bitField3_ = (bitField3_ & ~0x00000004);
        controllerXboxDriver_ = false;
        onChanged();
        return this;
      }

      private boolean controllerSwitchSupport_ ;
      /**
       * <code>optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];</code>
       * @return Whether the controllerSwitchSupport field is set.
       */
      @java.lang.Override
      public boolean hasControllerSwitchSupport() {
        return ((bitField3_ & 0x00000008) != 0);
      }
      /**
       * <code>optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];</code>
       * @return The controllerSwitchSupport.
       */
      @java.lang.Override
      public boolean getControllerSwitchSupport() {
        return controllerSwitchSupport_;
      }
      /**
       * <code>optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];</code>
       * @param value The controllerSwitchSupport to set.
       * @return This builder for chaining.
       */
      public Builder setControllerSwitchSupport(boolean value) {

        controllerSwitchSupport_ = value;
        bitField3_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool controller_switch_support = 14006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_SwitchSupport"];</code>
       * @return This builder for chaining.
       */
      public Builder clearControllerSwitchSupport() {
        bitField3_ = (bitField3_ & ~0x00000008);
        controllerSwitchSupport_ = false;
        onChanged();
        return this;
      }

      private boolean controllerGenericSupport_ ;
      /**
       * <code>optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];</code>
       * @return Whether the controllerGenericSupport field is set.
       */
      @java.lang.Override
      public boolean hasControllerGenericSupport() {
        return ((bitField3_ & 0x00000010) != 0);
      }
      /**
       * <code>optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];</code>
       * @return The controllerGenericSupport.
       */
      @java.lang.Override
      public boolean getControllerGenericSupport() {
        return controllerGenericSupport_;
      }
      /**
       * <code>optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];</code>
       * @param value The controllerGenericSupport to set.
       * @return This builder for chaining.
       */
      public Builder setControllerGenericSupport(boolean value) {

        controllerGenericSupport_ = value;
        bitField3_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool controller_generic_support = 14007 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamController_GenericGamepadSupport"];</code>
       * @return This builder for chaining.
       */
      public Builder clearControllerGenericSupport() {
        bitField3_ = (bitField3_ & ~0x00000010);
        controllerGenericSupport_ = false;
        onChanged();
        return this;
      }

      private int controllerPowerOffTimeout_ ;
      /**
       * <code>optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];</code>
       * @return Whether the controllerPowerOffTimeout field is set.
       */
      @java.lang.Override
      public boolean hasControllerPowerOffTimeout() {
        return ((bitField3_ & 0x00000020) != 0);
      }
      /**
       * <code>optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];</code>
       * @return The controllerPowerOffTimeout.
       */
      @java.lang.Override
      public int getControllerPowerOffTimeout() {
        return controllerPowerOffTimeout_;
      }
      /**
       * <code>optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];</code>
       * @param value The controllerPowerOffTimeout to set.
       * @return This builder for chaining.
       */
      public Builder setControllerPowerOffTimeout(int value) {

        controllerPowerOffTimeout_ = value;
        bitField3_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 controller_power_off_timeout = 14008 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.Timeout", (.setting_default_int) = 15];</code>
       * @return This builder for chaining.
       */
      public Builder clearControllerPowerOffTimeout() {
        bitField3_ = (bitField3_ & ~0x00000020);
        controllerPowerOffTimeout_ = 0;
        onChanged();
        return this;
      }

      private boolean turnOffControllerOnExit_ ;
      /**
       * <code>optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];</code>
       * @return Whether the turnOffControllerOnExit field is set.
       */
      @java.lang.Override
      public boolean hasTurnOffControllerOnExit() {
        return ((bitField3_ & 0x00000040) != 0);
      }
      /**
       * <code>optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];</code>
       * @return The turnOffControllerOnExit.
       */
      @java.lang.Override
      public boolean getTurnOffControllerOnExit() {
        return turnOffControllerOnExit_;
      }
      /**
       * <code>optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];</code>
       * @param value The turnOffControllerOnExit to set.
       * @return This builder for chaining.
       */
      public Builder setTurnOffControllerOnExit(boolean value) {

        turnOffControllerOnExit_ = value;
        bitField3_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool turn_off_controller_on_exit = 14009 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "CSettingsPanelGameController.TurnOff"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTurnOffControllerOnExit() {
        bitField3_ = (bitField3_ & ~0x00000040);
        turnOffControllerOnExit_ = false;
        onChanged();
        return this;
      }

      private boolean controllerCombineNintendoJoycons_ ;
      /**
       * <code>optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the controllerCombineNintendoJoycons field is set.
       */
      @java.lang.Override
      public boolean hasControllerCombineNintendoJoycons() {
        return ((bitField3_ & 0x00000080) != 0);
      }
      /**
       * <code>optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The controllerCombineNintendoJoycons.
       */
      @java.lang.Override
      public boolean getControllerCombineNintendoJoycons() {
        return controllerCombineNintendoJoycons_;
      }
      /**
       * <code>optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The controllerCombineNintendoJoycons to set.
       * @return This builder for chaining.
       */
      public Builder setControllerCombineNintendoJoycons(boolean value) {

        controllerCombineNintendoJoycons_ = value;
        bitField3_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool controller_combine_nintendo_joycons = 14010 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearControllerCombineNintendoJoycons() {
        bitField3_ = (bitField3_ & ~0x00000080);
        controllerCombineNintendoJoycons_ = false;
        onChanged();
        return this;
      }

      private long startupMovieId_ ;
      /**
       * <code>optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];</code>
       * @return Whether the startupMovieId field is set.
       */
      @java.lang.Override
      public boolean hasStartupMovieId() {
        return ((bitField3_ & 0x00000100) != 0);
      }
      /**
       * <code>optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];</code>
       * @return The startupMovieId.
       */
      @java.lang.Override
      public long getStartupMovieId() {
        return startupMovieId_;
      }
      /**
       * <code>optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];</code>
       * @param value The startupMovieId to set.
       * @return This builder for chaining.
       */
      public Builder setStartupMovieId(long value) {

        startupMovieId_ = value;
        bitField3_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 startup_movie_id = 16000 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/MovieID", (.setting_pre_login) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearStartupMovieId() {
        bitField3_ = (bitField3_ & ~0x00000100);
        startupMovieId_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object startupMovieLocalPath_ = "";
      /**
       * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
       * @return Whether the startupMovieLocalPath field is set.
       */
      public boolean hasStartupMovieLocalPath() {
        return ((bitField3_ & 0x00000200) != 0);
      }
      /**
       * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
       * @return The startupMovieLocalPath.
       */
      public java.lang.String getStartupMovieLocalPath() {
        java.lang.Object ref = startupMovieLocalPath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            startupMovieLocalPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
       * @return The bytes for startupMovieLocalPath.
       */
      public com.google.protobuf.ByteString
          getStartupMovieLocalPathBytes() {
        java.lang.Object ref = startupMovieLocalPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          startupMovieLocalPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
       * @param value The startupMovieLocalPath to set.
       * @return This builder for chaining.
       */
      public Builder setStartupMovieLocalPath(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        startupMovieLocalPath_ = value;
        bitField3_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearStartupMovieLocalPath() {
        startupMovieLocalPath_ = getDefaultInstance().getStartupMovieLocalPath();
        bitField3_ = (bitField3_ & ~0x00000200);
        onChanged();
        return this;
      }
      /**
       * <code>optional string startup_movie_local_path = 16001 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/LocalPath", (.setting_pre_login) = true];</code>
       * @param value The bytes for startupMovieLocalPath to set.
       * @return This builder for chaining.
       */
      public Builder setStartupMovieLocalPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        startupMovieLocalPath_ = value;
        bitField3_ |= 0x00000200;
        onChanged();
        return this;
      }

      private boolean startupMovieShuffle_ ;
      /**
       * <code>optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];</code>
       * @return Whether the startupMovieShuffle field is set.
       */
      @java.lang.Override
      public boolean hasStartupMovieShuffle() {
        return ((bitField3_ & 0x00000400) != 0);
      }
      /**
       * <code>optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];</code>
       * @return The startupMovieShuffle.
       */
      @java.lang.Override
      public boolean getStartupMovieShuffle() {
        return startupMovieShuffle_;
      }
      /**
       * <code>optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];</code>
       * @param value The startupMovieShuffle to set.
       * @return This builder for chaining.
       */
      public Builder setStartupMovieShuffle(boolean value) {

        startupMovieShuffle_ = value;
        bitField3_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool startup_movie_shuffle = 16002 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Customization/StartupMovie/Shuffle", (.setting_pre_login) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearStartupMovieShuffle() {
        bitField3_ = (bitField3_ & ~0x00000400);
        startupMovieShuffle_ = false;
        onChanged();
        return this;
      }

      private boolean startupMovieUsedForResume_ ;
      /**
       * <code>optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];</code>
       * @return Whether the startupMovieUsedForResume field is set.
       */
      @java.lang.Override
      public boolean hasStartupMovieUsedForResume() {
        return ((bitField3_ & 0x00000800) != 0);
      }
      /**
       * <code>optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];</code>
       * @return The startupMovieUsedForResume.
       */
      @java.lang.Override
      public boolean getStartupMovieUsedForResume() {
        return startupMovieUsedForResume_;
      }
      /**
       * <code>optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];</code>
       * @param value The startupMovieUsedForResume to set.
       * @return This builder for chaining.
       */
      public Builder setStartupMovieUsedForResume(boolean value) {

        startupMovieUsedForResume_ = value;
        bitField3_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool startup_movie_used_for_resume = 16003 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Customization/StartupMovie/UsedForResume"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStartupMovieUsedForResume() {
        bitField3_ = (bitField3_ & ~0x00000800);
        startupMovieUsedForResume_ = false;
        onChanged();
        return this;
      }

      private boolean gameNotesEnableSpellcheck_ ;
      /**
       * <code>optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];</code>
       * @return Whether the gameNotesEnableSpellcheck field is set.
       */
      @java.lang.Override
      public boolean hasGameNotesEnableSpellcheck() {
        return ((bitField3_ & 0x00001000) != 0);
      }
      /**
       * <code>optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];</code>
       * @return The gameNotesEnableSpellcheck.
       */
      @java.lang.Override
      public boolean getGameNotesEnableSpellcheck() {
        return gameNotesEnableSpellcheck_;
      }
      /**
       * <code>optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];</code>
       * @param value The gameNotesEnableSpellcheck to set.
       * @return This builder for chaining.
       */
      public Builder setGameNotesEnableSpellcheck(boolean value) {

        gameNotesEnableSpellcheck_ = value;
        bitField3_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool game_notes_enable_spellcheck = 17001 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "GameNotesEnableSpellcheck", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearGameNotesEnableSpellcheck() {
        bitField3_ = (bitField3_ & ~0x00001000);
        gameNotesEnableSpellcheck_ = false;
        onChanged();
        return this;
      }

      private int screenshotItemsPerRow_ ;
      /**
       * <code>optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];</code>
       * @return Whether the screenshotItemsPerRow field is set.
       */
      @java.lang.Override
      public boolean hasScreenshotItemsPerRow() {
        return ((bitField3_ & 0x00002000) != 0);
      }
      /**
       * <code>optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];</code>
       * @return The screenshotItemsPerRow.
       */
      @java.lang.Override
      public int getScreenshotItemsPerRow() {
        return screenshotItemsPerRow_;
      }
      /**
       * <code>optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];</code>
       * @param value The screenshotItemsPerRow to set.
       * @return This builder for chaining.
       */
      public Builder setScreenshotItemsPerRow(int value) {

        screenshotItemsPerRow_ = value;
        bitField3_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 screenshot_items_per_row = 18000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserRoaming, (.setting_name) = "ScreenshotViewItemsPerRow", (.setting_default_int) = 1];</code>
       * @return This builder for chaining.
       */
      public Builder clearScreenshotItemsPerRow() {
        bitField3_ = (bitField3_ & ~0x00002000);
        screenshotItemsPerRow_ = 0;
        onChanged();
        return this;
      }

      private boolean gBackgroundEnabled_ ;
      /**
       * <code>optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the gBackgroundEnabled field is set.
       */
      @java.lang.Override
      public boolean hasGBackgroundEnabled() {
        return ((bitField3_ & 0x00004000) != 0);
      }
      /**
       * <code>optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The gBackgroundEnabled.
       */
      @java.lang.Override
      public boolean getGBackgroundEnabled() {
        return gBackgroundEnabled_;
      }
      /**
       * <code>optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The gBackgroundEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setGBackgroundEnabled(boolean value) {

        gBackgroundEnabled_ = value;
        bitField3_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool g_background_enabled = 18200 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearGBackgroundEnabled() {
        bitField3_ = (bitField3_ & ~0x00004000);
        gBackgroundEnabled_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object gBackgroundPath_ = "";
      /**
       * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the gBackgroundPath field is set.
       */
      public boolean hasGBackgroundPath() {
        return ((bitField3_ & 0x00008000) != 0);
      }
      /**
       * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The gBackgroundPath.
       */
      public java.lang.String getGBackgroundPath() {
        java.lang.Object ref = gBackgroundPath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            gBackgroundPath_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The bytes for gBackgroundPath.
       */
      public com.google.protobuf.ByteString
          getGBackgroundPathBytes() {
        java.lang.Object ref = gBackgroundPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          gBackgroundPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The gBackgroundPath to set.
       * @return This builder for chaining.
       */
      public Builder setGBackgroundPath(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        gBackgroundPath_ = value;
        bitField3_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearGBackgroundPath() {
        gBackgroundPath_ = getDefaultInstance().getGBackgroundPath();
        bitField3_ = (bitField3_ & ~0x00008000);
        onChanged();
        return this;
      }
      /**
       * <code>optional string g_background_path = 18201 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The bytes for gBackgroundPath to set.
       * @return This builder for chaining.
       */
      public Builder setGBackgroundPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        gBackgroundPath_ = value;
        bitField3_ |= 0x00008000;
        onChanged();
        return this;
      }

      private java.lang.Object gBackgroundMaxKeep_ = "";
      /**
       * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the gBackgroundMaxKeep field is set.
       */
      public boolean hasGBackgroundMaxKeep() {
        return ((bitField3_ & 0x00010000) != 0);
      }
      /**
       * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The gBackgroundMaxKeep.
       */
      public java.lang.String getGBackgroundMaxKeep() {
        java.lang.Object ref = gBackgroundMaxKeep_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            gBackgroundMaxKeep_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The bytes for gBackgroundMaxKeep.
       */
      public com.google.protobuf.ByteString
          getGBackgroundMaxKeepBytes() {
        java.lang.Object ref = gBackgroundMaxKeep_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          gBackgroundMaxKeep_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The gBackgroundMaxKeep to set.
       * @return This builder for chaining.
       */
      public Builder setGBackgroundMaxKeep(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        gBackgroundMaxKeep_ = value;
        bitField3_ |= 0x00010000;
        onChanged();
        return this;
      }
      /**
       * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearGBackgroundMaxKeep() {
        gBackgroundMaxKeep_ = getDefaultInstance().getGBackgroundMaxKeep();
        bitField3_ = (bitField3_ & ~0x00010000);
        onChanged();
        return this;
      }
      /**
       * <code>optional string g_background_max_keep = 18202 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The bytes for gBackgroundMaxKeep to set.
       * @return This builder for chaining.
       */
      public Builder setGBackgroundMaxKeepBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        gBackgroundMaxKeep_ = value;
        bitField3_ |= 0x00010000;
        onChanged();
        return this;
      }

      private int gBackgroundTimeResolution_ ;
      /**
       * <code>optional int32 g_background_time_resolution = 18203 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the gBackgroundTimeResolution field is set.
       */
      @java.lang.Override
      public boolean hasGBackgroundTimeResolution() {
        return ((bitField3_ & 0x00020000) != 0);
      }
      /**
       * <code>optional int32 g_background_time_resolution = 18203 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The gBackgroundTimeResolution.
       */
      @java.lang.Override
      public int getGBackgroundTimeResolution() {
        return gBackgroundTimeResolution_;
      }
      /**
       * <code>optional int32 g_background_time_resolution = 18203 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The gBackgroundTimeResolution to set.
       * @return This builder for chaining.
       */
      public Builder setGBackgroundTimeResolution(int value) {

        gBackgroundTimeResolution_ = value;
        bitField3_ |= 0x00020000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 g_background_time_resolution = 18203 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearGBackgroundTimeResolution() {
        bitField3_ = (bitField3_ & ~0x00020000);
        gBackgroundTimeResolution_ = 0;
        onChanged();
        return this;
      }

      private boolean gBackgroundDevmode_ ;
      /**
       * <code>optional bool g_background_devmode = 18206 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the gBackgroundDevmode field is set.
       */
      @java.lang.Override
      public boolean hasGBackgroundDevmode() {
        return ((bitField3_ & 0x00040000) != 0);
      }
      /**
       * <code>optional bool g_background_devmode = 18206 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The gBackgroundDevmode.
       */
      @java.lang.Override
      public boolean getGBackgroundDevmode() {
        return gBackgroundDevmode_;
      }
      /**
       * <code>optional bool g_background_devmode = 18206 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The gBackgroundDevmode to set.
       * @return This builder for chaining.
       */
      public Builder setGBackgroundDevmode(boolean value) {

        gBackgroundDevmode_ = value;
        bitField3_ |= 0x00040000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool g_background_devmode = 18206 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearGBackgroundDevmode() {
        bitField3_ = (bitField3_ & ~0x00040000);
        gBackgroundDevmode_ = false;
        onChanged();
        return this;
      }

      private SteammessagesClientsettings.CMsgHotkey gBackgroundMk_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> gBackgroundMkBuilder_;
      /**
       * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the gBackgroundMk field is set.
       */
      public boolean hasGBackgroundMk() {
        return ((bitField3_ & 0x00080000) != 0);
      }
      /**
       * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The gBackgroundMk.
       */
      public SteammessagesClientsettings.CMsgHotkey getGBackgroundMk() {
        if (gBackgroundMkBuilder_ == null) {
          return gBackgroundMk_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : gBackgroundMk_;
        } else {
          return gBackgroundMkBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder setGBackgroundMk(SteammessagesClientsettings.CMsgHotkey value) {
        if (gBackgroundMkBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gBackgroundMk_ = value;
        } else {
          gBackgroundMkBuilder_.setMessage(value);
        }
        bitField3_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder setGBackgroundMk(
          SteammessagesClientsettings.CMsgHotkey.Builder builderForValue) {
        if (gBackgroundMkBuilder_ == null) {
          gBackgroundMk_ = builderForValue.build();
        } else {
          gBackgroundMkBuilder_.setMessage(builderForValue.build());
        }
        bitField3_ |= 0x00080000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder mergeGBackgroundMk(SteammessagesClientsettings.CMsgHotkey value) {
        if (gBackgroundMkBuilder_ == null) {
          if (((bitField3_ & 0x00080000) != 0) &&
            gBackgroundMk_ != null &&
            gBackgroundMk_ != SteammessagesClientsettings.CMsgHotkey.getDefaultInstance()) {
            getGBackgroundMkBuilder().mergeFrom(value);
          } else {
            gBackgroundMk_ = value;
          }
        } else {
          gBackgroundMkBuilder_.mergeFrom(value);
        }
        if (gBackgroundMk_ != null) {
          bitField3_ |= 0x00080000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder clearGBackgroundMk() {
        bitField3_ = (bitField3_ & ~0x00080000);
        gBackgroundMk_ = null;
        if (gBackgroundMkBuilder_ != null) {
          gBackgroundMkBuilder_.dispose();
          gBackgroundMkBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public SteammessagesClientsettings.CMsgHotkey.Builder getGBackgroundMkBuilder() {
        bitField3_ |= 0x00080000;
        onChanged();
        return getGBackgroundMkFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public SteammessagesClientsettings.CMsgHotkeyOrBuilder getGBackgroundMkOrBuilder() {
        if (gBackgroundMkBuilder_ != null) {
          return gBackgroundMkBuilder_.getMessageOrBuilder();
        } else {
          return gBackgroundMk_ == null ?
              SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : gBackgroundMk_;
        }
      }
      /**
       * <code>optional .CMsgHotkey g_background_mk = 18207 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> 
          getGBackgroundMkFieldBuilder() {
        if (gBackgroundMkBuilder_ == null) {
          gBackgroundMkBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder>(
                  getGBackgroundMk(),
                  getParentForChildren(),
                  isClean());
          gBackgroundMk_ = null;
        }
        return gBackgroundMkBuilder_;
      }

      private SteammessagesClientsettings.CMsgHotkey gBackgroundTg_;
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> gBackgroundTgBuilder_;
      /**
       * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the gBackgroundTg field is set.
       */
      public boolean hasGBackgroundTg() {
        return ((bitField3_ & 0x00100000) != 0);
      }
      /**
       * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The gBackgroundTg.
       */
      public SteammessagesClientsettings.CMsgHotkey getGBackgroundTg() {
        if (gBackgroundTgBuilder_ == null) {
          return gBackgroundTg_ == null ? SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : gBackgroundTg_;
        } else {
          return gBackgroundTgBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder setGBackgroundTg(SteammessagesClientsettings.CMsgHotkey value) {
        if (gBackgroundTgBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gBackgroundTg_ = value;
        } else {
          gBackgroundTgBuilder_.setMessage(value);
        }
        bitField3_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder setGBackgroundTg(
          SteammessagesClientsettings.CMsgHotkey.Builder builderForValue) {
        if (gBackgroundTgBuilder_ == null) {
          gBackgroundTg_ = builderForValue.build();
        } else {
          gBackgroundTgBuilder_.setMessage(builderForValue.build());
        }
        bitField3_ |= 0x00100000;
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder mergeGBackgroundTg(SteammessagesClientsettings.CMsgHotkey value) {
        if (gBackgroundTgBuilder_ == null) {
          if (((bitField3_ & 0x00100000) != 0) &&
            gBackgroundTg_ != null &&
            gBackgroundTg_ != SteammessagesClientsettings.CMsgHotkey.getDefaultInstance()) {
            getGBackgroundTgBuilder().mergeFrom(value);
          } else {
            gBackgroundTg_ = value;
          }
        } else {
          gBackgroundTgBuilder_.mergeFrom(value);
        }
        if (gBackgroundTg_ != null) {
          bitField3_ |= 0x00100000;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public Builder clearGBackgroundTg() {
        bitField3_ = (bitField3_ & ~0x00100000);
        gBackgroundTg_ = null;
        if (gBackgroundTgBuilder_ != null) {
          gBackgroundTgBuilder_.dispose();
          gBackgroundTgBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public SteammessagesClientsettings.CMsgHotkey.Builder getGBackgroundTgBuilder() {
        bitField3_ |= 0x00100000;
        onChanged();
        return getGBackgroundTgFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      public SteammessagesClientsettings.CMsgHotkeyOrBuilder getGBackgroundTgOrBuilder() {
        if (gBackgroundTgBuilder_ != null) {
          return gBackgroundTgBuilder_.getMessageOrBuilder();
        } else {
          return gBackgroundTg_ == null ?
              SteammessagesClientsettings.CMsgHotkey.getDefaultInstance() : gBackgroundTg_;
        }
      }
      /**
       * <code>optional .CMsgHotkey g_background_tg = 18208 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder> 
          getGBackgroundTgFieldBuilder() {
        if (gBackgroundTgBuilder_ == null) {
          gBackgroundTgBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              SteammessagesClientsettings.CMsgHotkey, SteammessagesClientsettings.CMsgHotkey.Builder, SteammessagesClientsettings.CMsgHotkeyOrBuilder>(
                  getGBackgroundTg(),
                  getParentForChildren(),
                  isClean());
          gBackgroundTg_ = null;
        }
        return gBackgroundTgBuilder_;
      }

      private boolean gBackgroundAM_ ;
      /**
       * <code>optional bool g_background_a_m = 18209 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the gBackgroundAM field is set.
       */
      @java.lang.Override
      public boolean hasGBackgroundAM() {
        return ((bitField3_ & 0x00200000) != 0);
      }
      /**
       * <code>optional bool g_background_a_m = 18209 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The gBackgroundAM.
       */
      @java.lang.Override
      public boolean getGBackgroundAM() {
        return gBackgroundAM_;
      }
      /**
       * <code>optional bool g_background_a_m = 18209 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The gBackgroundAM to set.
       * @return This builder for chaining.
       */
      public Builder setGBackgroundAM(boolean value) {

        gBackgroundAM_ = value;
        bitField3_ |= 0x00200000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool g_background_a_m = 18209 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearGBackgroundAM() {
        bitField3_ = (bitField3_ & ~0x00200000);
        gBackgroundAM_ = false;
        onChanged();
        return this;
      }

      private boolean showTimestampsInConsole_ ;
      /**
       * <code>optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer&#92;&#92;ShowTimestampsInConsole"];</code>
       * @return Whether the showTimestampsInConsole field is set.
       */
      @java.lang.Override
      public boolean hasShowTimestampsInConsole() {
        return ((bitField3_ & 0x00400000) != 0);
      }
      /**
       * <code>optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer&#92;&#92;ShowTimestampsInConsole"];</code>
       * @return The showTimestampsInConsole.
       */
      @java.lang.Override
      public boolean getShowTimestampsInConsole() {
        return showTimestampsInConsole_;
      }
      /**
       * <code>optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer&#92;&#92;ShowTimestampsInConsole"];</code>
       * @param value The showTimestampsInConsole to set.
       * @return This builder for chaining.
       */
      public Builder setShowTimestampsInConsole(boolean value) {

        showTimestampsInConsole_ = value;
        bitField3_ |= 0x00400000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool show_timestamps_in_console = 20000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer&#92;&#92;ShowTimestampsInConsole"];</code>
       * @return This builder for chaining.
       */
      public Builder clearShowTimestampsInConsole() {
        bitField3_ = (bitField3_ & ~0x00400000);
        showTimestampsInConsole_ = false;
        onChanged();
        return this;
      }

      private boolean forceOobe_ ;
      /**
       * <code>optional bool force_oobe = 20001 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ForceOOBE"];</code>
       * @return Whether the forceOobe field is set.
       */
      @java.lang.Override
      public boolean hasForceOobe() {
        return ((bitField3_ & 0x00800000) != 0);
      }
      /**
       * <code>optional bool force_oobe = 20001 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ForceOOBE"];</code>
       * @return The forceOobe.
       */
      @java.lang.Override
      public boolean getForceOobe() {
        return forceOobe_;
      }
      /**
       * <code>optional bool force_oobe = 20001 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ForceOOBE"];</code>
       * @param value The forceOobe to set.
       * @return This builder for chaining.
       */
      public Builder setForceOobe(boolean value) {

        forceOobe_ = value;
        bitField3_ |= 0x00800000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_oobe = 20001 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;ForceOOBE"];</code>
       * @return This builder for chaining.
       */
      public Builder clearForceOobe() {
        bitField3_ = (bitField3_ & ~0x00800000);
        forceOobe_ = false;
        onChanged();
        return this;
      }

      private int overrideBrowserComposerMode_ ;
      /**
       * <code>optional int32 override_browser_composer_mode = 20002 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the overrideBrowserComposerMode field is set.
       */
      @java.lang.Override
      public boolean hasOverrideBrowserComposerMode() {
        return ((bitField3_ & 0x01000000) != 0);
      }
      /**
       * <code>optional int32 override_browser_composer_mode = 20002 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The overrideBrowserComposerMode.
       */
      @java.lang.Override
      public int getOverrideBrowserComposerMode() {
        return overrideBrowserComposerMode_;
      }
      /**
       * <code>optional int32 override_browser_composer_mode = 20002 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The overrideBrowserComposerMode to set.
       * @return This builder for chaining.
       */
      public Builder setOverrideBrowserComposerMode(int value) {

        overrideBrowserComposerMode_ = value;
        bitField3_ |= 0x01000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 override_browser_composer_mode = 20002 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearOverrideBrowserComposerMode() {
        bitField3_ = (bitField3_ & ~0x01000000);
        overrideBrowserComposerMode_ = 0;
        onChanged();
        return this;
      }

      private boolean cefRemoteDebuggingEnabled_ ;
      /**
       * <code>optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return Whether the cefRemoteDebuggingEnabled field is set.
       */
      @java.lang.Override
      public boolean hasCefRemoteDebuggingEnabled() {
        return ((bitField3_ & 0x02000000) != 0);
      }
      /**
       * <code>optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return The cefRemoteDebuggingEnabled.
       */
      @java.lang.Override
      public boolean getCefRemoteDebuggingEnabled() {
        return cefRemoteDebuggingEnabled_;
      }
      /**
       * <code>optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @param value The cefRemoteDebuggingEnabled to set.
       * @return This builder for chaining.
       */
      public Builder setCefRemoteDebuggingEnabled(boolean value) {

        cefRemoteDebuggingEnabled_ = value;
        bitField3_ |= 0x02000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool cef_remote_debugging_enabled = 20003 [(.setting_store) = k_EClientSettingStore_CustomFunc];</code>
       * @return This builder for chaining.
       */
      public Builder clearCefRemoteDebuggingEnabled() {
        bitField3_ = (bitField3_ & ~0x02000000);
        cefRemoteDebuggingEnabled_ = false;
        onChanged();
        return this;
      }

      private boolean forceDeckPerfTab_ ;
      /**
       * <code>optional bool force_deck_perf_tab = 20004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];</code>
       * @return Whether the forceDeckPerfTab field is set.
       */
      @java.lang.Override
      public boolean hasForceDeckPerfTab() {
        return ((bitField3_ & 0x04000000) != 0);
      }
      /**
       * <code>optional bool force_deck_perf_tab = 20004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];</code>
       * @return The forceDeckPerfTab.
       */
      @java.lang.Override
      public boolean getForceDeckPerfTab() {
        return forceDeckPerfTab_;
      }
      /**
       * <code>optional bool force_deck_perf_tab = 20004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];</code>
       * @param value The forceDeckPerfTab to set.
       * @return This builder for chaining.
       */
      public Builder setForceDeckPerfTab(boolean value) {

        forceDeckPerfTab_ = value;
        bitField3_ |= 0x04000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_deck_perf_tab = 20004 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/ForceDeckPerfTab"];</code>
       * @return This builder for chaining.
       */
      public Builder clearForceDeckPerfTab() {
        bitField3_ = (bitField3_ & ~0x04000000);
        forceDeckPerfTab_ = false;
        onChanged();
        return this;
      }

      private boolean forceFakeMandatoryUpdate_ ;
      /**
       * <code>optional bool force_fake_mandatory_update = 20005 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];</code>
       * @return Whether the forceFakeMandatoryUpdate field is set.
       */
      @java.lang.Override
      public boolean hasForceFakeMandatoryUpdate() {
        return ((bitField3_ & 0x08000000) != 0);
      }
      /**
       * <code>optional bool force_fake_mandatory_update = 20005 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];</code>
       * @return The forceFakeMandatoryUpdate.
       */
      @java.lang.Override
      public boolean getForceFakeMandatoryUpdate() {
        return forceFakeMandatoryUpdate_;
      }
      /**
       * <code>optional bool force_fake_mandatory_update = 20005 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];</code>
       * @param value The forceFakeMandatoryUpdate to set.
       * @return This builder for chaining.
       */
      public Builder setForceFakeMandatoryUpdate(boolean value) {

        forceFakeMandatoryUpdate_ = value;
        bitField3_ |= 0x08000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_fake_mandatory_update = 20005 [(.setting_store) = k_EClientSettingStore_ConfigStore_Install, (.setting_name) = "Developer/FakeMandatoryUpdate"];</code>
       * @return This builder for chaining.
       */
      public Builder clearForceFakeMandatoryUpdate() {
        bitField3_ = (bitField3_ & ~0x08000000);
        forceFakeMandatoryUpdate_ = false;
        onChanged();
        return this;
      }

      private int gamescopeHdrVisualization_ = 0;
      /**
       * <code>optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = k_EHDRVisualization_None, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];</code>
       * @return Whether the gamescopeHdrVisualization field is set.
       */
      @java.lang.Override public boolean hasGamescopeHdrVisualization() {
        return ((bitField3_ & 0x10000000) != 0);
      }
      /**
       * <code>optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = k_EHDRVisualization_None, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];</code>
       * @return The gamescopeHdrVisualization.
       */
      @java.lang.Override
      public Enums.EHDRVisualization getGamescopeHdrVisualization() {
        Enums.EHDRVisualization result = Enums.EHDRVisualization.forNumber(gamescopeHdrVisualization_);
        return result == null ? Enums.EHDRVisualization.k_EHDRVisualization_None : result;
      }
      /**
       * <code>optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = k_EHDRVisualization_None, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];</code>
       * @param value The gamescopeHdrVisualization to set.
       * @return This builder for chaining.
       */
      public Builder setGamescopeHdrVisualization(Enums.EHDRVisualization value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField3_ |= 0x10000000;
        gamescopeHdrVisualization_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .EHDRVisualization gamescope_hdr_visualization = 21001 [default = k_EHDRVisualization_None, (.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/HDRVisualization2"];</code>
       * @return This builder for chaining.
       */
      public Builder clearGamescopeHdrVisualization() {
        bitField3_ = (bitField3_ & ~0x10000000);
        gamescopeHdrVisualization_ = 0;
        onChanged();
        return this;
      }

      private int gamescopeAppTargetFramerate_ ;
      /**
       * <code>optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @return Whether the gamescopeAppTargetFramerate field is set.
       */
      @java.lang.Override
      public boolean hasGamescopeAppTargetFramerate() {
        return ((bitField3_ & 0x20000000) != 0);
      }
      /**
       * <code>optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @return The gamescopeAppTargetFramerate.
       */
      @java.lang.Override
      public int getGamescopeAppTargetFramerate() {
        return gamescopeAppTargetFramerate_;
      }
      /**
       * <code>optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @param value The gamescopeAppTargetFramerate to set.
       * @return This builder for chaining.
       */
      public Builder setGamescopeAppTargetFramerate(int value) {

        gamescopeAppTargetFramerate_ = value;
        bitField3_ |= 0x20000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gamescope_app_target_framerate = 21002 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/AppTargetFrameRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @return This builder for chaining.
       */
      public Builder clearGamescopeAppTargetFramerate() {
        bitField3_ = (bitField3_ & ~0x20000000);
        gamescopeAppTargetFramerate_ = 0;
        onChanged();
        return this;
      }

      private boolean gamescopeEnableAppTargetFramerate_ ;
      /**
       * <code>optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];</code>
       * @return Whether the gamescopeEnableAppTargetFramerate field is set.
       */
      @java.lang.Override
      public boolean hasGamescopeEnableAppTargetFramerate() {
        return ((bitField3_ & 0x40000000) != 0);
      }
      /**
       * <code>optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];</code>
       * @return The gamescopeEnableAppTargetFramerate.
       */
      @java.lang.Override
      public boolean getGamescopeEnableAppTargetFramerate() {
        return gamescopeEnableAppTargetFramerate_;
      }
      /**
       * <code>optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];</code>
       * @param value The gamescopeEnableAppTargetFramerate to set.
       * @return This builder for chaining.
       */
      public Builder setGamescopeEnableAppTargetFramerate(boolean value) {

        gamescopeEnableAppTargetFramerate_ = value;
        bitField3_ |= 0x40000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool gamescope_enable_app_target_framerate = 21003 [(.setting_store) = k_EClientSettingStore_Registry, (.setting_name) = "HKEY_CURRENT_USER&#92;&#92;Software&#92;&#92;Valve&#92;&#92;Steam&#92;&#92;GamescopeEnableAppTargetRefreshRate2", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearGamescopeEnableAppTargetFramerate() {
        bitField3_ = (bitField3_ & ~0x40000000);
        gamescopeEnableAppTargetFramerate_ = false;
        onChanged();
        return this;
      }

      private boolean gamescopeDisableFramelimit_ ;
      /**
       * <code>optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @return Whether the gamescopeDisableFramelimit field is set.
       */
      @java.lang.Override
      public boolean hasGamescopeDisableFramelimit() {
        return ((bitField3_ & 0x80000000) != 0);
      }
      /**
       * <code>optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @return The gamescopeDisableFramelimit.
       */
      @java.lang.Override
      public boolean getGamescopeDisableFramelimit() {
        return gamescopeDisableFramelimit_;
      }
      /**
       * <code>optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @param value The gamescopeDisableFramelimit to set.
       * @return This builder for chaining.
       */
      public Builder setGamescopeDisableFramelimit(boolean value) {

        gamescopeDisableFramelimit_ = value;
        bitField3_ |= 0x80000000;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool gamescope_disable_framelimit = 21004 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/DisableFrameLimit", (.setting_default_bool) = false, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @return This builder for chaining.
       */
      public Builder clearGamescopeDisableFramelimit() {
        bitField3_ = (bitField3_ & ~0x80000000);
        gamescopeDisableFramelimit_ = false;
        onChanged();
        return this;
      }

      private int gamescopeDisplayRefreshRate_ ;
      /**
       * <code>optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @return Whether the gamescopeDisplayRefreshRate field is set.
       */
      @java.lang.Override
      public boolean hasGamescopeDisplayRefreshRate() {
        return ((bitField4_ & 0x00000001) != 0);
      }
      /**
       * <code>optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @return The gamescopeDisplayRefreshRate.
       */
      @java.lang.Override
      public int getGamescopeDisplayRefreshRate() {
        return gamescopeDisplayRefreshRate_;
      }
      /**
       * <code>optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @param value The gamescopeDisplayRefreshRate to set.
       * @return This builder for chaining.
       */
      public Builder setGamescopeDisplayRefreshRate(int value) {

        gamescopeDisplayRefreshRate_ = value;
        bitField4_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gamescope_display_refresh_rate = 21005 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Gamescope/RefreshRate", (.setting_default_int) = 0, (.setting_profile_mode) = k_ESettingProfileMode_PerGamePerDisplay];</code>
       * @return This builder for chaining.
       */
      public Builder clearGamescopeDisplayRefreshRate() {
        bitField4_ = (bitField4_ & ~0x00000001);
        gamescopeDisplayRefreshRate_ = 0;
        onChanged();
        return this;
      }

      private boolean gamescopeUseGameRefreshRateInSteam_ ;
      /**
       * <code>optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];</code>
       * @return Whether the gamescopeUseGameRefreshRateInSteam field is set.
       */
      @java.lang.Override
      public boolean hasGamescopeUseGameRefreshRateInSteam() {
        return ((bitField4_ & 0x00000002) != 0);
      }
      /**
       * <code>optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];</code>
       * @return The gamescopeUseGameRefreshRateInSteam.
       */
      @java.lang.Override
      public boolean getGamescopeUseGameRefreshRateInSteam() {
        return gamescopeUseGameRefreshRateInSteam_;
      }
      /**
       * <code>optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];</code>
       * @param value The gamescopeUseGameRefreshRateInSteam to set.
       * @return This builder for chaining.
       */
      public Builder setGamescopeUseGameRefreshRateInSteam(boolean value) {

        gamescopeUseGameRefreshRateInSteam_ = value;
        bitField4_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool gamescope_use_game_refresh_rate_in_steam = 21006 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "Developer/DynamicRefreshRateInSteam", (.setting_default_bool) = true];</code>
       * @return This builder for chaining.
       */
      public Builder clearGamescopeUseGameRefreshRateInSteam() {
        bitField4_ = (bitField4_ & ~0x00000002);
        gamescopeUseGameRefreshRateInSteam_ = false;
        onChanged();
        return this;
      }

      private int steamosStatusLedBrightness_ ;
      /**
       * <code>optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];</code>
       * @return Whether the steamosStatusLedBrightness field is set.
       */
      @java.lang.Override
      public boolean hasSteamosStatusLedBrightness() {
        return ((bitField4_ & 0x00000004) != 0);
      }
      /**
       * <code>optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];</code>
       * @return The steamosStatusLedBrightness.
       */
      @java.lang.Override
      public int getSteamosStatusLedBrightness() {
        return steamosStatusLedBrightness_;
      }
      /**
       * <code>optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];</code>
       * @param value The steamosStatusLedBrightness to set.
       * @return This builder for chaining.
       */
      public Builder setSteamosStatusLedBrightness(int value) {

        steamosStatusLedBrightness_ = value;
        bitField4_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 steamos_status_led_brightness = 22000 [(.setting_store) = k_EClientSettingStore_ConfigStore_UserLocal, (.setting_name) = "SteamOS/StatusLEDBrightness", (.setting_default_int) = 100];</code>
       * @return This builder for chaining.
       */
      public Builder clearSteamosStatusLedBrightness() {
        bitField4_ = (bitField4_ & ~0x00000004);
        steamosStatusLedBrightness_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CMsgClientSettings)
    }

    // @@protoc_insertion_point(class_scope:CMsgClientSettings)
    private static final SteammessagesClientsettings.CMsgClientSettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SteammessagesClientsettings.CMsgClientSettings();
    }

    public static SteammessagesClientsettings.CMsgClientSettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CMsgClientSettings>
        PARSER = new com.google.protobuf.AbstractParser<CMsgClientSettings>() {
      @java.lang.Override
      public CMsgClientSettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CMsgClientSettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgClientSettings> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public SteammessagesClientsettings.CMsgClientSettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int SETTING_STORE_FIELD_NUMBER = 60000;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      SteammessagesClientsettings.EClientSettingStore> settingStore = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        SteammessagesClientsettings.EClientSettingStore.class,
        null);
  public static final int SETTING_NAME_FIELD_NUMBER = 60001;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      java.lang.String> settingName = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.String.class,
        null);
  public static final int SETTING_PRE_LOGIN_FIELD_NUMBER = 60002;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      java.lang.Boolean> settingPreLogin = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int SETTING_DEFAULT_BOOL_FIELD_NUMBER = 60003;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      java.lang.Boolean> settingDefaultBool = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int SETTING_DEFAULT_INT_FIELD_NUMBER = 60004;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      java.lang.Integer> settingDefaultInt = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int SETTING_DEFAULT_UINT_FIELD_NUMBER = 60005;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      java.lang.Integer> settingDefaultUint = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Integer.class,
        null);
  public static final int SETTING_DEFAULT_FLOAT_FIELD_NUMBER = 60006;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      java.lang.Float> settingDefaultFloat = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Float.class,
        null);
  public static final int SETTING_DEFAULT_STRING_FIELD_NUMBER = 60007;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      java.lang.String> settingDefaultString = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.String.class,
        null);
  public static final int SETTING_READONLY_FIELD_NUMBER = 60008;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      java.lang.Boolean> settingReadonly = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Boolean.class,
        null);
  public static final int SETTING_DESCRIPTION_FIELD_NUMBER = 60009;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      java.lang.String> settingDescription = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.String.class,
        null);
  public static final int SETTING_PROFILE_MODE_FIELD_NUMBER = 60010;
  /**
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      SteammessagesClientsettings.ESettingProfileMode> settingProfileMode = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        SteammessagesClientsettings.ESettingProfileMode.class,
        null);
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgHotkey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgHotkey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CMsgClientSettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CMsgClientSettings_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n(steam/steammessages_clientsettings.pro" +
      "to\032 google/protobuf/descriptor.proto\032\021st" +
      "eam/enums.proto\"|\n\nCMsgHotkey\022\020\n\010key_cod" +
      "e\030\001 \001(\r\022\017\n\007alt_key\030\002 \001(\010\022\021\n\tshift_key\030\003 " +
      "\001(\010\022\020\n\010ctrl_key\030\004 \001(\010\022\020\n\010meta_key\030\005 \001(\010\022" +
      "\024\n\014display_name\030\006 \001(\t\"\241D\n\022CMsgClientSett" +
      "ings\022N\n\025no_save_personal_info\030\001 \001(\010B/\200\246\035" +
      "\001\212\246\035\'Software\\Valve\\Steam\\NoSavePersonal" +
      "Info\022P\n\026oobe_test_mode_enabled\030\002 \001(\010B0\200\246" +
      "\035\001\212\246\035(Software\\Valve\\Steam\\OOBETestModeE" +
      "nabled\022 \n\016in_client_beta\030\003 \001(\010B\010\200\246\035\005\220\246\035\001" +
      "\022%\n\023is_steam_sideloaded\030\004 \001(\010B\010\200\246\035\005\220\246\035\001\022" +
      "5\n\021preferred_monitor\030\005 \001(\tB\032\200\246\035\001\212\246\035\022BigP" +
      "icture/Monitor\022p\n steam_cef_gpu_blocklis" +
      "t_disabled\030\006 \001(\010BF\200\246\035\004\212\246\035>HKEY_CURRENT_U" +
      "SER\\Software\\Valve\\Steam\\CEFGPUBlocklist" +
      "Disabled\022<\n\023bigpicture_windowed\030\007 \001(\010B\037\200" +
      "\246\035\001\212\246\035\023BigPicture/Windowed\220\246\035\001\0225\n\014displa" +
      "y_name\030\010 \001(\tB\037\200\246\035\001\212\246\035\027UI/Display/Current" +
      "/Name\022I\n\023is_external_display\030\t \001(\010B,\200\246\035\001" +
      "\212\246\035$UI/Display/Current/IsExternalDisplay" +
      "\022E\n\030steam_os_underscan_level\030\n \001(\002B#\200\246\035\001" +
      "\212\246\035\033SteamOSScreenUnderscanLevel\022I\n\032steam" +
      "_os_underscan_enabled\030\013 \001(\010B%\200\246\035\001\212\246\035\035Ste" +
      "amOSScreenUnderscanEnabled\022C\n\020min_scale_" +
      "factor\030\014 \001(\002B)\200\246\035\001\212\246\035!UI/Display/Current" +
      "/MinScaleFactor\022C\n\020max_scale_factor\030\r \001(" +
      "\002B)\200\246\035\001\212\246\035!UI/Display/Current/MaxScaleFa" +
      "ctor\022E\n\021auto_scale_factor\030\016 \001(\002B*\200\246\035\001\212\246\035" +
      "\"UI/Display/Current/AutoScaleFactor\022:\n\ns" +
      "mall_mode\030\020 \001(\010B&\200\246\035\003\212\246\035\036Software\\Valve\\" +
      "Steam\\SmallMode\022I\n\033skip_steamvr_install_" +
      "dialog\030\023 \001(\010B$\200\246\035\003\212\246\035\034system\\SteamVRHMDV" +
      "GUIWarning\022O\n\030always_show_user_chooser\030\024" +
      " \001(\010B-\200\246\035\001\212\246\035%WebStorage\\Auth\\AlwaysShow" +
      "UserChooser\0220\n!show_family_sharing_notif" +
      "ications\030\270\027 \001(\010B\004\200\246\035\005\022N\n\032overlay_fps_cou" +
      "nter_corner\030\240\037 \001(\005B)\200\246\035\003\212\246\035!system\\InGam" +
      "eOverlayShowFPSCorner\022W\n!overlay_fps_cou" +
      "nter_high_contrast\030\241\037 \001(\010B+\200\246\035\003\212\246\035#syste" +
      "m\\InGameOverlayShowFPSContrast\022[\n\013overla" +
      "y_key\030\242\037 \001(\0132\013.CMsgHotkeyB8\200\246\035\003\212\246\035\037syste" +
      "m\\InGameOverlayShortcutKey\272\246\035\rShift\tKEY_" +
      "TAB\022]\n\016screenshot_key\030\243\037 \001(\0132\013.CMsgHotke" +
      "yB7\200\246\035\003\212\246\035$system\\InGameOverlayScreensho" +
      "tHotKey\272\246\035\007KEY_F12\0229\n\016enable_overlay\030\244\037 " +
      "\001(\010B \200\246\035\003\212\246\035\030system\\EnableGameOverlay\022_\n" +
      "\036enable_screenshot_notification\030\246\037 \001(\010B6" +
      "\200\246\035\003\212\246\035*system\\InGameOverlayScreenshotNo" +
      "tification\230\246\035\001\022U\n\027enable_screenshot_soun" +
      "d\030\247\037 \001(\010B3\200\246\035\003\212\246\035\'system\\InGameOverlaySc" +
      "reenshotPlaySound\230\246\035\001\022^\n\035save_uncompress" +
      "ed_screenshots\030\250\037 \001(\010B6\200\246\035\003\212\246\035.system\\In" +
      "GameOverlayScreenshotSaveUncompressed\022\037\n" +
      "\020screenshots_path\030\251\037 \001(\tB\004\200\246\035\005\022l\n\021defaul" +
      "t_ping_rate\030\252\037 \001(\005BP\200\246\035\005\300\246\035\001\312\246\035DComputed" +
      " default (automatic) server ping rate ba" +
      "sed on network speed\022\037\n\020server_ping_rate" +
      "\030\253\037 \001(\005B\004\200\246\035\005\022(\n\031steam_networking_share_" +
      "ip\030\254\037 \001(\005B\004\200\246\035\005\022\037\n\020web_browser_home\030\255\037 \001" +
      "(\tB\004\200\246\035\005\022$\n\025voice_mic_device_name\030\256\037 \001(\t" +
      "B\004\200\246\035\005\022#\n\024voice_mic_input_gain\030\257\037 \001(\002B\004\200" +
      "\246\035\005\022(\n\031voice_speaker_output_gain\030\260\037 \001(\002B" +
      "\004\200\246\035\005\022)\n\032voice_push_to_talk_setting\030\261\037 \001" +
      "(\005B\004\200\246\035\005\0222\n\026voice_push_to_talk_key\030\262\037 \001(" +
      "\0132\013.CMsgHotkeyB\004\200\246\035\005\022B\n\031overlay_toolbar_" +
      "list_view\030\263\037 \001(\010B\036\200\246\035\003\212\246\035\026OverlayToolBar" +
      "ListView\022T\n\034always_use_gamepadui_overlay" +
      "\030\264\037 \001(\010B-\200\246\035\003\212\246\035%system\\EnableSCTenFootO" +
      "verlayCheckNew\022*\n\014overlay_tabs\030\265\037 \001(\tB\023\200" +
      "\246\035\002\212\246\035\013OverlayTabs\022j\n\027overlay_scale_inte" +
      "rface\030\266\037 \001(\010BH\200\246\035\004\212\246\035<HKEY_CURRENT_USER\\" +
      "Software\\Valve\\Steam\\OverlayScaleInterfa" +
      "ce\230\246\035\001\022Y\n\034overlay_restore_browser_tabs\030\267" +
      "\037 \001(\010B2\200\246\035\003\212\246\035&system\\InGameOverlayResto" +
      "reBrowserTabs\230\246\035\001\022h\n\026smooth_scroll_webvi" +
      "ews\030\210\' \001(\010BG\200\246\035\004\212\246\035;HKEY_CURRENT_USER\\So" +
      "ftware\\Valve\\Steam\\SmoothScrollWebViews\230" +
      "\246\035\001\022.\n\037enable_gpu_accelerated_webviews\030\211" +
      "\' \001(\010B\004\200\246\035\005\022-\n\036enable_hardware_video_dec" +
      "oding\030\213\' \001(\010B\004\200\246\035\005\022\035\n\016run_at_startup\030\214\' " +
      "\001(\010B\004\200\246\035\005\022!\n\022enable_dpi_scaling\030\215\' \001(\010B\004" +
      "\200\246\035\005\022I\n\031enable_marketing_messages\030\216\' \001(\010" +
      "B%\200\246\035\003\212\246\035\031news\\NotifyAvailableGames\230\246\035\001\022" +
      "(\n\031start_in_big_picture_mode\030\217\' \001(\010B\004\200\246\035" +
      "\005\022>\n\016jumplist_flags\030\220\' \001(\rB%\200\246\035\003\212\246\035\027syst" +
      "em\\JumplistSettings\250\246\035\360\336\004\022<\n\020enable_ui_s" +
      "ounds\030\221\' \001(\010B!\200\246\035\003\212\246\035\025system\\EnableUISou" +
      "nds\230\246\035\001\0225\n\022disable_all_toasts\030\360. \001(\010B\030\200\246" +
      "\035\002\212\246\035\020DisableAllToasts\022<\n\026disable_toasts" +
      "_in_game\030\361. \001(\010B\033\200\246\035\002\212\246\035\023DisableToastsIn" +
      "Game\022:\n\023play_sound_on_toast\030\362. \001(\010B\034\200\246\035\002" +
      "\212\246\035\020PlaySoundOnToast\230\246\035\001\0229\n\024library_disp" +
      "lay_size\030\3306 \001(\005B\032\200\246\035\003\212\246\035\022LibraryDisplayS" +
      "ize\022c\n+library_whats_new_show_only_produ" +
      "ct_updates\030\3316 \001(\010B-\200\246\035\002\212\246\035%LibraryWhatsN" +
      "ewShowOnlyProductUpdates\022G\n\032show_store_c" +
      "ontent_on_home\030\3326 \001(\010B\"\200\246\035\002\212\246\035\026ShowStore" +
      "ContentOnHome\230\246\035\001\022\031\n\nstart_page\030\3336 \001(\tB\004" +
      "\200\246\035\005\022D\n\032library_low_bandwidth_mode\030\3346 \001(" +
      "\010B\037\200\246\035\003\212\246\035\027LibraryLowBandwidthMode\022:\n\025li" +
      "brary_low_perf_mode\030\3356 \001(\010B\032\200\246\035\003\212\246\035\022Libr" +
      "aryLowPerfMode\022R\n!library_disable_commun" +
      "ity_content\030\3366 \001(\010B&\200\246\035\003\212\246\035\036LibraryDisab" +
      "leCommunityContent\022T\n!library_display_ic" +
      "on_in_game_list\030\3376 \001(\010B(\200\246\035\003\212\246\035\034LibraryD" +
      "isplayIconInGameList\230\246\035\001\022O\n ready_to_pla" +
      "y_includes_streaming\030\3406 \001(\010B$\200\246\035\005\212\246\035\034Rea" +
      "dyToPlayIncludesStreaming\022A\n\024show_steam_" +
      "deck_info\030\3416 \001(\010B\"\200\246\035\003\212\246\035\032ShowSteamDeckI" +
      "nfoInLibrary\022%\n\026enable_shader_precache\030\300" +
      "> \001(\010B\004\200\246\035\005\0222\n#enable_shader_background_" +
      "processing\030\301> \001(\010B\004\200\246\035\005\022(\n\025shader_precac" +
      "hed_size\030\302> \001(\004B\010\200\246\035\005\300\246\035\001\022-\n\032needs_steam" +
      "_service_repair\030\303> \001(\010B\010\200\246\035\005\300\246\035\001\022$\n\025down" +
      "load_peer_content\030\304> \001(\005B\004\200\246\035\005\022\'\n\030downlo" +
      "ad_rate_bits_per_s\030\305> \001(\010B\004\200\246\035\005\022$\n\025restr" +
      "ict_auto_updates\030\306> \001(\010B\004\200\246\035\005\022*\n\033restric" +
      "t_auto_updates_start\030\307> \001(\005B\004\200\246\035\005\022(\n\031res" +
      "trict_auto_updates_end\030\310> \001(\005B\004\200\246\035\005\022\036\n\017d" +
      "ownload_region\030\311> \001(\005B\004\200\246\035\005\022)\n\032download_" +
      "while_app_running\030\312> \001(\010B\004\200\246\035\005\0220\n!downlo" +
      "ad_throttle_while_streaming\030\313> \001(\010B\004\200\246\035\005" +
      "\022%\n\026download_throttle_rate\030\314> \001(\005B\004\200\246\035\005\022" +
      "\034\n\rcloud_enabled\030\220N \001(\010B\004\200\246\035\005\022T\n\027show_sc" +
      "reenshot_manager\030\221N \001(\010B2\200\246\035\002\212\246\035*Softwar" +
      "e\\Valve\\Steam\\ShowScreenshotManager\022\033\n\014m" +
      "usic_volume\030\370U \001(\005B\004\200\246\035\005\022I\n\030music_pause_" +
      "on_app_start\030\371U \001(\010B&\200\246\035\001\212\246\035\036Music\\Pause" +
      "OnAppStartedProcess\022B\n\031music_pause_on_vo" +
      "ice_chat\030\372U \001(\010B\036\200\246\035\001\212\246\035\026Music\\PauseOnVo" +
      "iceChat\022W\n\033music_download_high_quality\030\373" +
      "U \001(\010B1\200\246\035\001\212\246\035)Music\\DownloadHighQuality" +
      "AudioSoundtracks\022R\n\033music_playlist_notif" +
      "ication\030\374U \001(\010B,\200\246\035\001\212\246\035$Music\\PlaylistNo" +
      "wPlayingNotification\022x\n\025broadcast_permis" +
      "sions\030\340] \001(\0162\025.EBroadcastPermission:\036k_E" +
      "BroadcastPermissionDisabledB!\200\246\035\003\212\246\035\025Bro" +
      "adcast\\Permissions\240\246\035\001\022>\n\026broadcast_outp" +
      "ut_width\030\341] \001(\005B\035\200\246\035\003\212\246\035\025Broadcast\\Outpu" +
      "tWidth\022@\n\027broadcast_output_height\030\342] \001(\005" +
      "B\036\200\246\035\003\212\246\035\026Broadcast\\OutputHeight\0225\n\021broa" +
      "dcast_bitrate\030\343] \001(\005B\031\200\246\035\003\212\246\035\021Broadcast\\" +
      "MaxKbps\022\177\n\031broadcast_encoding_option\030\344] " +
      "\001(\0162\031.EBroadcastEncoderSetting:\036k_EBroad" +
      "castEncoderBestQualityB \200\246\035\003\212\246\035\030Broadcas" +
      "t\\EncoderSetting\022E\n\032broadcast_record_all" +
      "_video\030\345] \001(\010B \200\246\035\003\212\246\035\030Broadcast\\Include" +
      "Desktop\022H\n\032broadcast_record_all_audio\030\346]" +
      " \001(\010B#\200\246\035\003\212\246\035\033Broadcast\\RecordSystemAudi" +
      "o\022A\n\033broadcast_record_microphone\030\347] \001(\010B" +
      "\033\200\246\035\003\212\246\035\023Broadcast\\RecordMic\022E\n\033broadcas" +
      "t_show_upload_stats\030\350] \001(\010B\037\200\246\035\003\212\246\035\027Broa" +
      "dcast\\ShowDebugInfo\022I\n\034broadcast_show_li" +
      "ve_reminder\030\351] \001(\010B\"\200\246\035\003\212\246\035\026Broadcast\\Sh" +
      "owReminder\230\246\035\001\022>\n\025broadcast_chat_corner\030" +
      "\352] \001(\005B\036\200\246\035\003\212\246\035\022Broadcast\\ShowChat\240\246\035\001\022c" +
      "\n)steam_input_configurator_error_msg_ena" +
      "ble\030\261m \001(\010B/\200\246\035\001\212\246\035\'SteamInput/Configura" +
      "tor/ErrorMsgEnabled\022Q\n#controller_guide_" +
      "button_focus_steam\030\262m \001(\010B#\200\246\035\003\212\246\035\033Contr" +
      "oller_CheckGuideButton\022E\n\025controller_ps_" +
      "support\030\263m \001(\005B%\200\246\035\003\212\246\035\031SteamController_" +
      "PSSupport\240\246\035\001\022E\n\027controller_xbox_support" +
      "\030\264m \001(\010B#\200\246\035\003\212\246\035\033SteamController_XBoxSup" +
      "port\022C\n\026controller_xbox_driver\030\265m \001(\010B\"\200" +
      "\246\035\003\212\246\035\032SteamController_XBoxDriver\022I\n\031con" +
      "troller_switch_support\030\266m \001(\010B%\200\246\035\003\212\246\035\035S" +
      "teamController_SwitchSupport\022R\n\032controll" +
      "er_generic_support\030\267m \001(\010B-\200\246\035\003\212\246\035%Steam" +
      "Controller_GenericGamepadSupport\022W\n\034cont" +
      "roller_power_off_timeout\030\270m \001(\005B0\200\246\035\003\212\246\035" +
      "$CSettingsPanelGameController.Timeout\240\246\035" +
      "\017\022R\n\033turn_off_controller_on_exit\030\271m \001(\010B" +
      ",\200\246\035\003\212\246\035$CSettingsPanelGameController.Tu" +
      "rnOff\0222\n#controller_combine_nintendo_joy" +
      "cons\030\272m \001(\010B\004\200\246\035\005\022I\n\020startup_movie_id\030\200}" +
      " \001(\004B.\200\246\035\001\212\246\035\"Customization/StartupMovie" +
      "/MovieID\220\246\035\001\022S\n\030startup_movie_local_path" +
      "\030\201} \001(\tB0\200\246\035\001\212\246\035$Customization/StartupMo" +
      "vie/LocalPath\220\246\035\001\022N\n\025startup_movie_shuff" +
      "le\030\202} \001(\010B.\200\246\035\001\212\246\035\"Customization/Startup" +
      "Movie/Shuffle\220\246\035\001\022X\n\035startup_movie_used_" +
      "for_resume\030\203} \001(\010B0\200\246\035\003\212\246\035(Customization" +
      "/StartupMovie/UsedForResume\022M\n\034game_note" +
      "s_enable_spellcheck\030\351\204\001 \001(\010B%\200\246\035\002\212\246\035\031Gam" +
      "eNotesEnableSpellcheck\230\246\035\001\022I\n\030screenshot" +
      "_items_per_row\030\320\214\001 \001(\005B%\200\246\035\002\212\246\035\031Screensh" +
      "otViewItemsPerRow\240\246\035\001\022$\n\024g_background_en" +
      "abled\030\230\216\001 \001(\010B\004\200\246\035\005\022!\n\021g_background_path" +
      "\030\231\216\001 \001(\tB\004\200\246\035\005\022%\n\025g_background_max_keep\030" +
      "\232\216\001 \001(\tB\004\200\246\035\005\022,\n\034g_background_time_resol" +
      "ution\030\233\216\001 \001(\005B\004\200\246\035\005\022$\n\024g_background_devm" +
      "ode\030\236\216\001 \001(\010B\004\200\246\035\005\022,\n\017g_background_mk\030\237\216\001" +
      " \001(\0132\013.CMsgHotkeyB\004\200\246\035\005\022,\n\017g_background_" +
      "tg\030\240\216\001 \001(\0132\013.CMsgHotkeyB\004\200\246\035\005\022 \n\020g_backg" +
      "round_a_m\030\241\216\001 \001(\010B\004\200\246\035\005\022O\n\032show_timestam" +
      "ps_in_console\030\240\234\001 \001(\010B)\200\246\035\003\212\246\035!Developer" +
      "\\ShowTimestampsInConsole\022N\n\nforce_oobe\030\241" +
      "\234\001 \001(\010B8\200\246\035\004\212\246\0350HKEY_CURRENT_USER\\Softwa" +
      "re\\Valve\\Steam\\ForceOOBE\022.\n\036override_bro" +
      "wser_composer_mode\030\242\234\001 \001(\005B\004\200\246\035\005\022,\n\034cef_" +
      "remote_debugging_enabled\030\243\234\001 \001(\010B\004\200\246\035\005\022A" +
      "\n\023force_deck_perf_tab\030\244\234\001 \001(\010B\"\200\246\035\001\212\246\035\032D" +
      "eveloper/ForceDeckPerfTab\022L\n\033force_fake_" +
      "mandatory_update\030\245\234\001 \001(\010B%\200\246\035\001\212\246\035\035Develo" +
      "per/FakeMandatoryUpdate\022x\n\033gamescope_hdr" +
      "_visualization\030\211\244\001 \001(\0162\022.EHDRVisualizati" +
      "on:\030k_EHDRVisualization_NoneB#\200\246\035\003\212\246\035\033Ga" +
      "mescope/HDRVisualization2\022V\n\036gamescope_a" +
      "pp_target_framerate\030\212\244\001 \001(\005B,\200\246\035\003\212\246\035\034Gam" +
      "escope/AppTargetFrameRate\240\246\035\000\320\246\035\002\022\210\001\n%ga" +
      "mescope_enable_app_target_framerate\030\213\244\001 " +
      "\001(\010BW\200\246\035\004\212\246\035KHKEY_CURRENT_USER\\Software\\" +
      "Valve\\Steam\\GamescopeEnableAppTargetRefr" +
      "eshRate2\230\246\035\001\022S\n\034gamescope_disable_framel" +
      "imit\030\214\244\001 \001(\010B+\200\246\035\003\212\246\035\033Gamescope/DisableF" +
      "rameLimit\230\246\035\000\320\246\035\002\022O\n\036gamescope_display_r" +
      "efresh_rate\030\215\244\001 \001(\005B%\200\246\035\003\212\246\035\025Gamescope/R" +
      "efreshRate\240\246\035\000\320\246\035\002\022c\n(gamescope_use_game" +
      "_refresh_rate_in_steam\030\216\244\001 \001(\010B/\200\246\035\003\212\246\035#" +
      "Developer/DynamicRefreshRateInSteam\230\246\035\001\022" +
      "P\n\035steamos_status_led_brightness\030\360\253\001 \001(\005" +
      "B\'\200\246\035\003\212\246\035\033SteamOS/StatusLEDBrightness\240\246\035" +
      "d*\225\002\n\023EClientSettingStore\022!\n\035k_EClientSe" +
      "ttingStore_Invalid\020\000\022-\n)k_EClientSetting" +
      "Store_ConfigStore_Install\020\001\0221\n-k_EClient" +
      "SettingStore_ConfigStore_UserRoaming\020\002\022/" +
      "\n+k_EClientSettingStore_ConfigStore_User" +
      "Local\020\003\022\"\n\036k_EClientSettingStore_Registr" +
      "y\020\004\022$\n k_EClientSettingStore_CustomFunc\020" +
      "\005*\265\001\n\031EOverlayToggleBarLocation\022&\n\"k_EOv" +
      "erlayToggleBarLocation_Bottom\020\000\022$\n k_EOv" +
      "erlayToggleBarLocation_Left\020\001\022%\n!k_EOver" +
      "layToggleBarLocation_Right\020\002\022#\n\037k_EOverl" +
      "ayToggleBarLocation_Top\020\003*\205\001\n\023ESettingPr" +
      "ofileMode\022\036\n\032k_ESettingProfileMode_None\020" +
      "\000\022!\n\035k_ESettingProfileMode_PerGame\020\001\022+\n\'" +
      "k_ESettingProfileMode_PerGamePerDisplay\020" +
      "\002:k\n\rsetting_store\022\035.google.protobuf.Fie" +
      "ldOptions\030\340\324\003 \001(\0162\024.EClientSettingStore:" +
      "\035k_EClientSettingStore_Invalid:5\n\014settin" +
      "g_name\022\035.google.protobuf.FieldOptions\030\341\324" +
      "\003 \001(\t::\n\021setting_pre_login\022\035.google.prot" +
      "obuf.FieldOptions\030\342\324\003 \001(\010:=\n\024setting_def" +
      "ault_bool\022\035.google.protobuf.FieldOptions" +
      "\030\343\324\003 \001(\010:<\n\023setting_default_int\022\035.google" +
      ".protobuf.FieldOptions\030\344\324\003 \001(\005:=\n\024settin" +
      "g_default_uint\022\035.google.protobuf.FieldOp" +
      "tions\030\345\324\003 \001(\r:>\n\025setting_default_float\022\035" +
      ".google.protobuf.FieldOptions\030\346\324\003 \001(\002:?\n" +
      "\026setting_default_string\022\035.google.protobu" +
      "f.FieldOptions\030\347\324\003 \001(\t:9\n\020setting_readon" +
      "ly\022\035.google.protobuf.FieldOptions\030\350\324\003 \001(" +
      "\010:<\n\023setting_description\022\035.google.protob" +
      "uf.FieldOptions\030\351\324\003 \001(\t:o\n\024setting_profi" +
      "le_mode\022\035.google.protobuf.FieldOptions\030\352" +
      "\324\003 \001(\0162\024.ESettingProfileMode:\032k_ESetting" +
      "ProfileMode_NoneB\005H\001\200\001\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
          Enums.getDescriptor(),
        });
    internal_static_CMsgHotkey_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_CMsgHotkey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgHotkey_descriptor,
        new java.lang.String[] { "KeyCode", "AltKey", "ShiftKey", "CtrlKey", "MetaKey", "DisplayName", });
    internal_static_CMsgClientSettings_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_CMsgClientSettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CMsgClientSettings_descriptor,
        new java.lang.String[] { "NoSavePersonalInfo", "OobeTestModeEnabled", "InClientBeta", "IsSteamSideloaded", "PreferredMonitor", "SteamCefGpuBlocklistDisabled", "BigpictureWindowed", "DisplayName", "IsExternalDisplay", "SteamOsUnderscanLevel", "SteamOsUnderscanEnabled", "MinScaleFactor", "MaxScaleFactor", "AutoScaleFactor", "SmallMode", "SkipSteamvrInstallDialog", "AlwaysShowUserChooser", "ShowFamilySharingNotifications", "OverlayFpsCounterCorner", "OverlayFpsCounterHighContrast", "OverlayKey", "ScreenshotKey", "EnableOverlay", "EnableScreenshotNotification", "EnableScreenshotSound", "SaveUncompressedScreenshots", "ScreenshotsPath", "DefaultPingRate", "ServerPingRate", "SteamNetworkingShareIp", "WebBrowserHome", "VoiceMicDeviceName", "VoiceMicInputGain", "VoiceSpeakerOutputGain", "VoicePushToTalkSetting", "VoicePushToTalkKey", "OverlayToolbarListView", "AlwaysUseGamepaduiOverlay", "OverlayTabs", "OverlayScaleInterface", "OverlayRestoreBrowserTabs", "SmoothScrollWebviews", "EnableGpuAcceleratedWebviews", "EnableHardwareVideoDecoding", "RunAtStartup", "EnableDpiScaling", "EnableMarketingMessages", "StartInBigPictureMode", "JumplistFlags", "EnableUiSounds", "DisableAllToasts", "DisableToastsInGame", "PlaySoundOnToast", "LibraryDisplaySize", "LibraryWhatsNewShowOnlyProductUpdates", "ShowStoreContentOnHome", "StartPage", "LibraryLowBandwidthMode", "LibraryLowPerfMode", "LibraryDisableCommunityContent", "LibraryDisplayIconInGameList", "ReadyToPlayIncludesStreaming", "ShowSteamDeckInfo", "EnableShaderPrecache", "EnableShaderBackgroundProcessing", "ShaderPrecachedSize", "NeedsSteamServiceRepair", "DownloadPeerContent", "DownloadRateBitsPerS", "RestrictAutoUpdates", "RestrictAutoUpdatesStart", "RestrictAutoUpdatesEnd", "DownloadRegion", "DownloadWhileAppRunning", "DownloadThrottleWhileStreaming", "DownloadThrottleRate", "CloudEnabled", "ShowScreenshotManager", "MusicVolume", "MusicPauseOnAppStart", "MusicPauseOnVoiceChat", "MusicDownloadHighQuality", "MusicPlaylistNotification", "BroadcastPermissions", "BroadcastOutputWidth", "BroadcastOutputHeight", "BroadcastBitrate", "BroadcastEncodingOption", "BroadcastRecordAllVideo", "BroadcastRecordAllAudio", "BroadcastRecordMicrophone", "BroadcastShowUploadStats", "BroadcastShowLiveReminder", "BroadcastChatCorner", "SteamInputConfiguratorErrorMsgEnable", "ControllerGuideButtonFocusSteam", "ControllerPsSupport", "ControllerXboxSupport", "ControllerXboxDriver", "ControllerSwitchSupport", "ControllerGenericSupport", "ControllerPowerOffTimeout", "TurnOffControllerOnExit", "ControllerCombineNintendoJoycons", "StartupMovieId", "StartupMovieLocalPath", "StartupMovieShuffle", "StartupMovieUsedForResume", "GameNotesEnableSpellcheck", "ScreenshotItemsPerRow", "GBackgroundEnabled", "GBackgroundPath", "GBackgroundMaxKeep", "GBackgroundTimeResolution", "GBackgroundDevmode", "GBackgroundMk", "GBackgroundTg", "GBackgroundAM", "ShowTimestampsInConsole", "ForceOobe", "OverrideBrowserComposerMode", "CefRemoteDebuggingEnabled", "ForceDeckPerfTab", "ForceFakeMandatoryUpdate", "GamescopeHdrVisualization", "GamescopeAppTargetFramerate", "GamescopeEnableAppTargetFramerate", "GamescopeDisableFramelimit", "GamescopeDisplayRefreshRate", "GamescopeUseGameRefreshRateInSteam", "SteamosStatusLedBrightness", });
    settingStore.internalInit(descriptor.getExtensions().get(0));
    settingName.internalInit(descriptor.getExtensions().get(1));
    settingPreLogin.internalInit(descriptor.getExtensions().get(2));
    settingDefaultBool.internalInit(descriptor.getExtensions().get(3));
    settingDefaultInt.internalInit(descriptor.getExtensions().get(4));
    settingDefaultUint.internalInit(descriptor.getExtensions().get(5));
    settingDefaultFloat.internalInit(descriptor.getExtensions().get(6));
    settingDefaultString.internalInit(descriptor.getExtensions().get(7));
    settingReadonly.internalInit(descriptor.getExtensions().get(8));
    settingDescription.internalInit(descriptor.getExtensions().get(9));
    settingProfileMode.internalInit(descriptor.getExtensions().get(10));
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(SteammessagesClientsettings.settingDefaultBool);
    registry.add(SteammessagesClientsettings.settingDefaultInt);
    registry.add(SteammessagesClientsettings.settingDefaultString);
    registry.add(SteammessagesClientsettings.settingDefaultUint);
    registry.add(SteammessagesClientsettings.settingDescription);
    registry.add(SteammessagesClientsettings.settingName);
    registry.add(SteammessagesClientsettings.settingPreLogin);
    registry.add(SteammessagesClientsettings.settingProfileMode);
    registry.add(SteammessagesClientsettings.settingReadonly);
    registry.add(SteammessagesClientsettings.settingStore);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.protobuf.DescriptorProtos.getDescriptor();
    Enums.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
