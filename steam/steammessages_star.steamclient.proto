syntax = "proto2";

import "steam/steammessages_base.proto";
import "steam/steammessages_unified_base.steamclient.proto";

option cc_generic_services = true;

enum E_STAR_GlyphWriteResult {
	k_E_STAR_GlyphWriteResult_Success = 0;
	k_E_STAR_GlyphWriteResult_InvalidMessage = 1;
	k_E_STAR_GlyphWriteResult_InvalidJSON = 2;
	k_E_STAR_GlyphWriteResult_SQLError = 3;
}

message CSTAR_KeyValueQuery {
	optional string key = 1;
	optional string value = 2;
}

message CSTAR_GlyphQueryParams {
	optional uint64 bundle_id = 1;
	repeated .CSTAR_KeyValueQuery queries = 2;
}

message CSTAR_ReadGlyphData_Request {
	optional .CSTAR_GlyphQueryParams query_params = 1;
	optional string last_modified_time_lower_limit = 2;
}

message CSTAR_GlyphData {
	optional bytes glyph_guid = 1;
	optional string glyph_last_modified = 2;
	optional string glyph_json_data = 3;
}

message CSTAR_WriteGlyphData_Request {
	optional uint64 bundle_id = 1;
	repeated .CSTAR_GlyphData glyph_data = 2;
}

message CSTAR_Request {
	optional .CSTAR_ReadGlyphData_Request read_glyph_data = 1;
	optional .CSTAR_WriteGlyphData_Request write_glyph_data = 2;
}

message CSTAR_ReadGlyphData_Response {
	optional uint64 bundle_id = 1;
	repeated .CSTAR_GlyphData glyph_data = 2;
}

message CSTAR_WriteGlyphData_Response {
	repeated .E_STAR_GlyphWriteResult result = 1;
}

message CSTAR_Response {
	optional .CSTAR_ReadGlyphData_Response read_glyph_data = 1;
	optional .CSTAR_WriteGlyphData_Response write_glyph_data = 2;
}

service STAR {
	rpc ProcessMessage (.CSTAR_Request) returns (.CSTAR_Response);
}
